-- This package implements the LZF lossless data compression algorithm. LZF is
-- a Lempel-Ziv variant with byte-aligned output, and optimized for speed.

-- Safety/Use Notes:
--  - The byte arrays should be smaller than 2 GB (Positive'Last).
--  - For performance reasons, safety checks on expansion are omitted.
--  - Invalid compressed data can cause exceptions (Constraint_Error)

-- General principles:
-- The LZF compressed format knows literal runs and back-references:
--  - Literal run: directly copy bytes from input to output.
--  - Back-reference: copy previous data of the uncompressed stream to the
--    output stream, with specified offset from location in the uncompressed
--    stream and length. The length is at least 3 bytes.
-- The compression algorithm is
--  - Read next byte and the 2 following bytes, these 3 bytes are the "future",
--    hash them
--  - Read the corresponding hash entry and replace the entry by current input
--    index (so, for a hash value, there is always the most recent index)
--  - If the read entry is set, then it is an index. Compare the three bytes at
--    this reference index with the current "future"
--  - If they match, then check how long of the reference matches current text
--    and append a cross reference (with offset from current and length of
--    match)
--  - If no match, then append the current byte as literal.
--  - The first byte of a literal run is a control byte than denotes a literal
--    run (as opposed to a cross reference) and indicates the length of the run,
--    so:
--  - When appending the first literal of a run (first byte of the input or
--    just after a cross reference) skip a byte for this control byte
--  - When appending a cross reference after a literal run, update the control
--    char of this run (set it to the length of the run)
-- The uncompression algorithm is
--  - Read a byte
--  - If this is the control byte of a literal run, then it indicates the
--    length; copy this length of bytes from input to output
--  - If this is a cross-refernce, then it indicates the offset and length;
--    copy this length from *output* at this offset to output.

-- Format of the compressed data:
-- The first byte of the compressed stream is the control byte.
-- -  For literal runs, the highest three bits of the control byte are not set,
--    then the lower bits are the literal run length - 1, and the next bytes
--    are the literals
-- - For back-references, the highest three bits of the control byte are the
--    back-reference length - 2. If all three bits are set (val=7), then the
--    back-reference length - 9 is stored in the next byte.
--    The 5 lower bits of the control byte, are combined with the last byte
--    (the one after the control byte and the possible length extension),
--    in order to form the offset, in the uncompressed flow, for the
--    back-reference (0 for prev byte).
-- So a sequence can be:
-- 000L:llll|<literal> : with Lllll being the literal length - 1, from 0 to 1F
-- LLLO:OOOO|{oooo:oooo} : with LLL /= 7 being the reference length - 2
--    and OOOOO{oooo:oooo} the reference offset on 5 or 13 bits
-- LLLO:OOOO|llll:llll|{oooo:ooooo} : length - 2 on 11 bits, and offset
--     on 5 or 13 bits

-- Main differences from the original implementation (in C):
-- - The hash table is initialized with -1, which allows a match with index 0
--   (first three bytes). If this raises a performance issue, the hash table
--   can be initialised with 0 (change Default_Hash). It can even be not
--   initialised at all, but in this case the test "if Ref /= Default_Hash"
--   must be replaced by "if Ref in Hash_Table'Range".
-- - The most upper byte of the future is masked when shifting (left), otherwise
--   the hashing fails on overflow. Considering that the future applies to 3
--   bytes, it is cleaner to mask when building the future rather than when
--   hashing it. Still, this does not change the result of the hashing.
with Bit_Ops; use Bit_Ops;
--#@IfDef Debug
  --#@IfDef LocalTrace
with Ada.Text_Io;
  --#@ElseDef
with Trace, Hexa_Utils;
  --#@EndifDef
--#@EndifDef
pragma Optimize (Time);
package body Lzf is

  --#@IfDef Debug
    --#@IfDef LocalTrace
  -- Logging
  package Logger is
    function Debug_On return Boolean;
  end Logger;
  package body Logger is
    -- Static activation of traces
    function Info_On return Boolean is (False) with Inline => True;
    function Debug_On return Boolean is (False) with Inline => True;
  end Logger;
  procedure Log (Msg : in String) with Inline => True is
  begin
    Ada.Text_Io.Put_Line (Ada.Text_Io.Standard_Error, Msg);
  end Log;
  procedure Log_Info (Msg : in String) renames Log;
  -- Image of natural
  package Int_Io is new Ada.Text_Io.Integer_Io (Integer);
  package Hexa_Utils is
    function Image (N : Natural) return String;
  end Hexa_Utils;
  package body Hexa_Utils is
    function Image (N : Natural) return String is
      Str : String (1 .. 12); -- 16#FFFFFFFF#
    begin
      Int_Io.Put (Str, N, 16);
      return Str;
    end Image;
  end Hexa_Utils;
  -- Image of a byte
  package Byte_Io is new Ada.Text_Io.Modular_Io (Byte);
  function Image (B : Byte) return String is
    Str : String (1 .. 6); -- 16#FF#
  begin
    Byte_Io.Put (Str, B, 16);
    return Str;
  end Image;
    --#@ElseDef
  -- Trace logger
  package Logger is new Trace.Basic_Logger ("Lzf");
  procedure Log (Msg : in String) with Inline => True is
  begin
    Logger.Log_Debug (Msg);
  end Log;
  procedure Log_Info (Msg : in String) with Inline => True is
  begin
    Logger.Log_Info (Msg);
  end Log_Info;
  -- Image of a byte
  function Image is new Hexa_Utils.Mod_Image (Byte);
    --#@EndifDef
  --#@EndifDef

  -- The number of entries in the hash table. The size is a trade-off between
  --  hash collisions (reduced compression) and speed (amount that fits in CPU
  --  cache)
  -- The difference between 15 and 14 is very small for small blocks (and 14
  --  is usually a bit faster).
  -- For a low-memory/faster configuration, use Hash_Log = 13
  -- For best compression, use 15 or 16 (or more, up to 22).
  subtype Hash_Log_Range is Natural range 13 .. 22;
  -- Values above 16 do not significantly improve the compression rate
  --  but significantly degrade the compression time (3 times for 22).
  -- Values below 16 do not significantly change anything.

  Hash_Log : constant Hash_Log_Range :=
  --#@IfDef Slow
    22;
  --#@ElsifDef Fast
    13;
  --#@ElseDef
    16;
  --#@EndifDef

  Hash_Size : constant Natural := Shl (1, Hash_Log);
  -- Hash table: indexes are the hash of future and values are indexes
  --  in the input flow
  subtype Hash_Range is Integer range -1 .. Integer'Last;
  subtype Hash_Ref is Hash_Range range 0 .. Hash_Range'Last;
  Hash_Table : array (0 .. Hash_Size - 1) of Integer;

  -- The initial value of the Hash_Table
  Default_Hash : constant Hash_Range := -1;

  -- The maximum number of literals in a chunk (31)
  -- Nb of literals is on 5 bits, so up to 16#1F#
  Max_Literal : constant Natural := 16#1F#;

  -- The maximum offset allowed for a back-reference (8192)
  -- The offset - 1 is stored in 5 bits + 1 byte, so up to 16#1FFF#
  Max_Ref_Off : constant Natural := 16#1FFF# + 1;

  -- The maximum back-reference length (264)
  -- The length - 2 is stored in 3 bits so up to 16#7#
  --   possibly extented by 1 byte, so up to 16#FF#
  Max_Ref_Len : constant Natural := 16#07# + 16#FF# + 2;

  -- Compute the input to Next, to compute the future
  -- Return the integer with the first two bytes 0, then the byte at the
  --  index and the byte at index + 1
  subtype Future_Range is Natural;
  function First (A : Byte_Array; I : Natural) return Future_Range is
    (Shl (Integer(A(A'First + I)), 8) or Integer(A(A'First + I + 1)) )
    with Inline => True;

  -- Update the future with current position
  -- Shift the value 1 byte left, and add the byte at index inPos+2
  function Next (V : Future_Range; A : Byte_Array; I : Natural)
                return Future_Range is
    (Shl (V and 16#FFFF#, 8) or Integer(A(A'First + I + 2)) )
    with Inline => True;

  -- Compute the hash value of a future
  function Hash (V : Future_Range) return Hash_Ref is
    --## rule off Parentheses
    (
    --#@IfDef Slow
      (Shr (V xor Shl (V, 5), 3 * 8 - Hash_Log) - V * 5) and (Hash_Size - 1)
    --#@ElsifDef Fast
      (Shr (V,                3 * 8 - Hash_Log) - V)     and (Hash_Size - 1)
    --#@ElseDef
      (Shr (V,                3 * 8 - Hash_Log) - V * 5) and (Hash_Size - 1)
    --#@EndifDef
    ) with Inline => True;
    --## rule on Parentheses

  -- Convert an int into a byte
  function To_Byte (I : Natural) return Byte is
    (Byte (I and 16#FF#)) with Inline => True;

  -- Compress Input into Output
  -- Outlen is less than 104% of Input length
  -- May raise Too_Big if Output is too small
  procedure Compress (Input  : in Byte_Array;
                      Output : out Byte_Array;
                      Outlen : out Natural) is
    -- Indexes in input and output flows
    In_Pos : Natural := 0;
    Out_Pos : Positive := Output'First + 1;
    -- Current, next and next-next bytes
    Future : Future_Range;
    -- Number of literal in current run
    Literals : Integer := 0;
    -- Next-next byte
    P2 : Byte;
    -- Absolute and relative index, in input, of cross reference
    Ref : Hash_Range;
    Off : Natural;
    -- Do we match the cross reference found at Hash(Future) in Hash_Table
    Match : Boolean;
    -- Length and Max_Len of a match with cross reference
    Len, Max_Len : Positive;
    --#@IfDef Debug
    -- Statistics
    Nb_Lit_Seq, Total_Lit_Len, Nb_Ref_Seq, Total_Ref_Len : Natural := 0;
    --#@EndifDef
    use type C_Types.Byte;
  begin

    if Input'Length < 3 then
      -- Specific handling of input too short to compute the future
      if Input'Length = 0 then
        Outlen := 0;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Empty input");
        end if;
        --#@EndifDef
        return;
      elsif Input'Length = 1 then
        if Output'Length < 2 then
          raise Too_Big;
        end if;
        Outlen := 2;
        Output(Out_Pos - 1) := 0;
        Output(Out_Pos) := Input(Input'First);
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Single byte " & Image (Input(Input'First)));
        end if;
        --#@EndifDef
        return;
      elsif Input'Length = 2 then
        if Output'Length < 2 then
          raise Too_Big;
        end if;
        Outlen := 3;
        Output(Out_Pos - 1) := 1;
        Output(Out_Pos    ) := Input(Input'First);
        Output(Out_Pos + 1) := Input(Input'First + 1);
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Two bytes " & Image (Input(Input'First))
             & " and " & Image (Input(Input'First + 1)));
        end if;
        --#@EndifDef
        return;
      end if;
    end if;

    --#@IfDef Debug
    if Logger.Debug_On then
      Log ("Starting encoding from index " & Hexa_Utils.Image (Input'First)
         & " to " & Hexa_Utils.Image (Input'Last));
    end if;
    --#@EndifDef

    -- Init
    Hash_Table := (others => Default_Hash);

    -- Main loop
    Future := First (Input, 0);
    while In_Pos < Input'Length - 2 loop
      P2 := Input(Input'First + In_Pos + 2);
      -- Next: Remove oldest byte, shift Future left, append P2
      Future := Shl (Future and 16#FFFF#, 8) or Integer (P2);
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Start loop at index " & Hexa_Utils.Image (In_Pos)
           & ", future " & Hexa_Utils.Image (Future));
      end if;
      --#@EndifDef
      Off := Hash (Future);
      Ref := Hash_Table(Off);
      Hash_Table(Off) := In_Pos;
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Hashed as " & Hexa_Utils.Image (Off)
           & ", got ref "
           & (if Ref = Default_Hash then Integer'Image (Default_Hash)
              else Hexa_Utils.Image (Ref)));
      end if;
      --#@EndifDef

      -- Check if match
      Match := False;
      if Ref /= Default_Hash then
        Off := In_Pos - Ref - 1;
        -- Not too far backwards and the 3 bytes match
        if Off < Max_Ref_Off
        and then Input(Input'First + Ref + 2) = P2
        and then Input(Input'First + Ref + 1) = To_Byte (Shr (Future, 8))
        and then Input(Input'First + Ref) = To_Byte (Shr (Future, 16)) then
          Match := True;
        end if;
      end if;

      if Match then
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Match at offset " & Hexa_Utils.Image (Off + 1));
        end if;
        --#@EndifDef

        if Literals = 0 then
          -- Multiple successive back-references,
          --  so there is no literal run control byte to update
          Out_Pos := Out_Pos - 1;
        else
          -- Set the control byte at the start of the literal run
          --  to store the number of literals
          -- 3 first bits at 0 then Nb on the next 5 bits (so <= 31)
          --#@IfDef Debug
          Nb_Lit_Seq := Nb_Lit_Seq + 1;
          Total_Lit_Len := Total_Lit_Len + Literals;
          if Logger.Debug_On then
            Log ("  Update Nb literals " & Hexa_Utils.Image (Literals - 1)
               & " at pos " & Hexa_Utils.Image (Out_Pos - Literals - 1));
          end if;
          --#@EndifDef
          Output(Out_Pos - Literals - 1) := To_Byte (Literals - 1);
          Literals := 0;
        end if;

        -- Length of the match
        -- Ensure that there will remain at least 2 more bytes to rebuild
        --  the future from
        Max_Len := Input'Length - In_Pos - 2;
        if Max_Len > Max_Ref_Len then
          Max_Len := Max_Ref_Len;
        end if;
        Len := 3;
        while Len < Max_Len
        and then Input(Input'First + Ref + Len)
               = Input(Input'First + In_Pos + Len) loop
          Len := Len + 1;
        end loop;
        Max_Len := Len;
        Len := Len - 2;
        --#@IfDef Debug
        Nb_Ref_Seq := Nb_Ref_Seq + 1;
        Total_Ref_Len := Total_Ref_Len + Max_Len;
        if Logger.Debug_On then
          Log ("  Match len " & Hexa_Utils.Image (Max_Len));
        end if;
        --#@EndifDef

        -- Store match length-2
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("  Write ref at output index " & Hexa_Utils.Image (Out_Pos));
        end if;
        --#@EndifDef
        if Len < 7 then
          -- Less than 3 bits of length then 5 upper bits of offset
          Output(Out_Pos) := To_Byte (Shr (Off, 8) or Shl (Len, 5));
        else
          -- 3 bits of length then 5 upper bits of offset
          Output(Out_Pos) := To_Byte (Shr (Off, 8) or Shl (7, 5));
          Out_Pos := Out_Pos + 1;
          -- Then Length - 7
          Output(Out_Pos) := To_Byte (Len - 7);
        end if;
        Out_Pos := Out_Pos + 1;
        -- Then 8 lower bits of offset
        Output(Out_Pos) := To_Byte (Off);
        Out_Pos := Out_Pos + 1;
        -- Move one byte forward to allow for a literal run control byte
        Out_Pos := Out_Pos + 1;

        -- Rebuild the future
        --#@IfDef Slow

        -- Rebuild the future, and store all the bytes to the hashtable.
        -- Hashing and storing all the bytes improves a bit the
        --  compression ratio but can reduce the speed significantly
        declare
          -- Length of the loop of creation of future
          Loop_Len : Integer;
        begin
          -- In_Pos is already done, so we will process Max_Len - 1,
          --  from In_Pos to In_Pos + Max_Len - 2
          In_Pos := In_Pos + 1;
          Loop_Len := Max_Len - 2;
          -- Ensure that In_Pos + Max_Len + 3 <= Input'Length
          --  (Next reads Input'First + I + 2)
          if In_Pos + Loop_Len  + 3 > Input'Length then
            -- History of 3 bytes must end before Length
            Loop_Len := Input'Length - In_Pos - 3;
          end if;
          -- In_Pos already done
          for I in In_Pos .. In_Pos + Loop_Len loop
            Future := Next (Future, Input, I);
            Hash_Table(Hash (Future)) := I;
            --#@IfDef Debug
            if Logger.Debug_On then
              Log ("  Future " & Hexa_Utils.Image (Future)
                 & " store index " & Hexa_Utils.Image (I)
                 & " at offset " & Hexa_Utils.Image (Hash (Future)));
            end if;
            --#@EndifDef
          end loop;
          -- Set correct input index
          In_Pos := In_Pos + Len + 1;
        end;

        --#@ElsifDef Fast

        -- Rebuild the future of the last byte, do no hash any value
        In_Pos := In_Pos + Len + 1;
        if In_Pos < Input'Length - 2 then
          Future := First (Input, In_Pos);
          Future := Next (Future, Input, In_Pos);
          --#@IfDef Debug
          if Logger.Debug_On then
            Log ("  Future " & Hexa_Utils.Image (Future));
          end if;
          --#@EndifDef
        end if;
        In_Pos := In_Pos + 1;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("  Now at index " & Hexa_Utils.Image (In_Pos));
        end if;
        --#@EndifDef

        --#@ElseDef

        -- Rebuild the future, and store the last 2 bytes to the hashtable.
        -- Storing hashes of the last bytes in back-reference improves the
        --  compression ratio a bit and only reduces slightly the speed
        In_Pos := In_Pos + Len;
        if In_Pos < Input'Length - 3 then
          Future := First (Input, In_Pos);
          Future := Next (Future, Input, In_Pos);
          Hash_Table(Hash (Future)) := In_Pos;
          --#@IfDef Debug
          if Logger.Debug_On then
            Log ("  Future " & Hexa_Utils.Image (Future)
               & " store index " & Hexa_Utils.Image (In_Pos)
               & " at offset " & Hexa_Utils.Image (Hash (Future)));
          end if;
          --#@EndifDef
          In_Pos := In_Pos + 1;
          Future := Next (Future, Input, In_Pos);
          Hash_Table(Hash (Future)) := In_Pos;
          --#@IfDef Debug
          if Logger.Debug_On then
            Log ("  Future " & Hexa_Utils.Image (Future)
               & " store index " & Hexa_Utils.Image (In_Pos)
               & " at hash " & Hexa_Utils.Image (Hash (Future)));
          end if;
          --#@EndifDef
          In_Pos := In_Pos + 1;
          --#@IfDef Debug
          if Logger.Debug_On then
            Log ("  Now at index " & Hexa_Utils.Image (In_Pos));
          end if;
          --#@EndifDef
        else
          -- Set correct input index
          In_Pos := In_Pos + 2;
        end if;

        --#@EndifDef

      else
        -- Not match
        -- Copy one byte from input to output as part of literal
        Output(Out_Pos) := Input(Input'First + In_Pos);
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Not Match");
          Log ("  Store literal " & Image (Input(Input'First + In_Pos))
             & " at pos " & Hexa_Utils.Image (Out_Pos));
        end if;
        --#@EndifDef
        In_Pos := In_Pos + 1;
        Out_Pos := Out_Pos + 1;
        Literals := Literals + 1;
        if Literals > Max_Literal then
          --#@IfDef Debug
          if Logger.Debug_On then
            Log ("  Update Nb literals " & Hexa_Utils.Image (Literals - 1)
               & " at pos " & Hexa_Utils.Image (Out_Pos - Literals - 1));
          end if;
          --#@EndifDef
          Output(Out_Pos - Literals - 1) := To_Byte (Literals - 1);
          Literals := 0;
          -- Move ahead one byte to allow for the literal run control byte
          Out_Pos := Out_Pos + 1;
        end if;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("  Nb literals " & Hexa_Utils.Image (Literals));
        end if;
        --#@EndifDef
      end if;
    end loop;

    -- Write the remaining few bytes as literals
    while In_Pos < Input'Length loop
      --#@IfDef Debug
      Total_Lit_Len := Total_Lit_Len + 1;
      if Logger.Debug_On then
        Log ("Append literal " & Image (Input(Input'First + In_Pos))
           & " at pos " & Hexa_Utils.Image (Out_Pos));
      end if;
      --#@EndifDef
      Output(Out_Pos) := Input(Input'First + In_Pos);
      In_Pos := In_Pos + 1;
      Out_Pos := Out_Pos + 1;
      Literals := Literals + 1;
      if Literals > Max_Literal then
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("  Store Nb literals " & Hexa_Utils.Image (Literals - 1)
             & " at pos " & Hexa_Utils.Image (Out_Pos - Literals - 1));
        end if;
        --#@EndifDef
        Output(Out_Pos - Literals - 1) := To_Byte (Literals - 1);
        Literals := 0;
        Out_Pos := Out_Pos + 1;
      end if;
    end loop;

    -- Write the final literal run length to the control byte
    if Literals /= 0 then
      Output(Out_Pos - Literals - 1) := To_Byte (Literals - 1);
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("  Store Nb literals " & Hexa_Utils.Image (Literals - 1)
           & " at pos " & Hexa_Utils.Image (Out_Pos - Literals - 1));
      end if;
      --#@EndifDef
    else
      -- One extra byte was inserted to store the length, but there is
      --  no more literal
      Out_Pos := Out_Pos - 1;
    end if;

    Outlen := Out_Pos - Output'First;
  --#@IfDef Debug
    if Logger.Info_On then
      Log_Info ("Nb literal seqs " & Nb_Lit_Seq'Img
         & ", Total literal length " & Total_Lit_Len'Img
         & ", Avg literal length "
         & Natural'Image (Total_Lit_Len / Nb_Lit_Seq));
      Log_Info ("Nb references " & Nb_Ref_Seq'Img
         & ", Total literal length " & Total_Ref_Len'Img
         & ", Avg Ref length "
         & Natural'Image (Total_Ref_Len / Nb_Ref_Seq));
      Log_Info ("Lengths " & Natural'Image(Input'Length)
         & " and " & Outlen'Img & ", rate "
         & Integer'Image ((Input'Length - Outlen) * 100 / Input'Length));
    end if;
  --#@ElseDef
  exception
    when Constraint_Error =>
      raise Too_Big;
  --#@EndifDef
  end Compress;

  -- Uncompress Input into Output
  -- May raise Too_Big if Output is too small
  procedure Uncompress (Input  : in Byte_Array;
                        Output : out Byte_Array;
                        Outlen : out Natural) is
    In_Pos, Out_Pos : Integer;
    Ctrl, Len : Integer;
  begin

    if Input'Length = 0 then
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Empty input");
      end if;
      --#@EndifDef
      Outlen := 0;
      return;
    end if;

    In_Pos := Input'First;
    Out_Pos := Output'First;
    --#@IfDef Debug
    if Logger.Debug_On then
      Log ("First index is " & Hexa_Utils.Image (In_Pos));
    end if;
    --#@EndifDef
    loop
      -- Get control char: literals-run or backref
      Ctrl := Integer (Input(In_Pos));
      In_Pos := In_Pos + 1;
      if Ctrl <= Max_Literal then
        -- Literal run of length = ctrl + 1,
        -- Copy to output and move forward this many bytes
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Got at index " & Hexa_Utils.Image (In_Pos - 1)
             & " " & Hexa_Utils.Image (Ctrl + 1) & " litterals");
          for I in In_Pos .. In_Pos + Ctrl loop
             Log ("  Literal " & Image (Input(I)));
          end loop;
        end if;
        --#@EndifDef
        if Out_Pos + Ctrl > Output'Last then
          raise Too_Big;
        end if;
        Output(Out_Pos .. Out_Pos + Ctrl) := Input (In_Pos .. In_Pos + Ctrl);
        In_Pos := In_Pos + Ctrl + 1;
        Out_Pos := Out_Pos + Ctrl + 1;
      else
        -- Back reference: the highest 3 bits are the match length
        Len := Shr (Ctrl, 5);
        -- If the length is maxed, add the next byte to the length
        if Len = 7 then
          Len := Len + Integer(Input(In_Pos));
          In_Pos := In_Pos + 1;
        end if;
        -- Minimum back-reference is 3 bytes,
        --  so 2 was subtracted before storing size
        Len := Len + 2;

        -- Ctrl is now the offset for a back-reference...
        -- the logical AND operation removes the length bits
        Ctrl := Shl (Ctrl and 16#1F#, 8);

        -- The next byte increases the offset
        Ctrl := Ctrl + Integer(Input(In_Pos)) + 1;
        In_Pos := In_Pos + 1;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Got at index " & Hexa_Utils.Image (In_Pos - 1)
             & " a backref of len " & Hexa_Utils.Image (Len)
             & " and offset " & Hexa_Utils.Image (Ctrl));
        end if;
        --#@EndifDef

        -- Copy the *back-reference* bytes from the given
        --  location in output to current position
        if Out_Pos + Len - 1 > Output'Last then
          raise Too_Big;
        end if;
        Ctrl := Out_Pos - Ctrl;
        -- Areas may overlap! so we must copy byte per byte
        for I in 0 .. Len - 1 loop
          Output(Out_Pos + I) := Output(Ctrl + I);
        end loop;
        Out_Pos := Out_Pos + Len;
      end if;

      exit when In_Pos > Input'Last;
    end loop;
    Outlen := Out_Pos - Output'First;
  end Uncompress;

end Lzf;

