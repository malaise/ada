-- This package implements a kind of LZ4 lossless data compression algorithm.
-- LZ4 is a Lempel-Ziv variant with byte-aligned output, and optimized for
--  speed.
-- LZ4L is adapted for large data (lengths and offsets on 64 bits), so it is
--  not compatible with LZ4.

-- Safety/Use Notes:
--  - For performance reasons, safety checks on expansion are omitted.
--  - Invalid compressed data can cause exceptions (Constraint_Error)

-- General principles:
-- The LZ4 compressed format knows literal runs and back-references:
--  - Literal run: directly copy bytes from input to output.
--  - Back-reference: copy previous data of the uncompressed stream to the
--    output stream, with specified offset from location in the uncompressed
--    stream and length. The length is at least 4 bytes.
-- The compression algorithm is
--  - Read next byte and the 3 following bytes, these 4 bytes are the "future",
--    hash them
--  - Read the corresponding hash entry and replace the entry by current input
--    index (so, for a hash value, there is always the most recent index)
--  - If the read entry is set, then it is an index. Compare the four bytes at
--    this reference index with the current "future"
--  - If they match, then check how long of the reference matches current text
--    and append a cross reference (with offset from current and length of
--    match)
--  - If no match, then append the current byte as literal.
-- The compressed flow is a suite of sequences. A sequence contains a run of
--  literal then a cross reference. It is made of:
--  * A token: The first 4 bits indicate the length of the literal run
--    and the last 4 bits indicate the length - 4 of the cross reference
--  * Then, if the run is longer than 14 (the token then contains Fx, x for the
--    length of the cross reference), the following bytes contain the remaining
--    of the length, each byte adding up to FF to the length, until the (last)
--    byte that is not FF. The worst overhead is then 1/255, so 0.4% (to 8MB for
--    a 2GB input length)
--    Exemple, a length of 300 is coded as Fx FF 1E (15+255+30)
--  * Then the literal run (if any)
--  * Then the reference offset: if the highest bit is not set, then the
--    offset is coded in the next 15 bits, big endian, otherwise the
--    3 bits next represent the number - 1 of bytes to concatenate, big endian,
--    to represent the offset
--  * Then, if the reference is longer than 18 (x = F), the bytes until not FF
--    in order to to complete the length (up to 4MB for 1GB reference in a 2GB
--    input length)
-- So, a sequence can be:
--  LLLL:RRRR|{llll:llll}|<literal>|<offset>|{rrrr:rrrr}, where
--  - {llll:llll} is a suite (possibly empty) of bytes of literal length to be
--    added to LLLL
--  - <offset> is either 0OOOO:OOOO|oooo:oooo (0OOO:OOOO|oooo:oooo offset on
--    15 bits big endian), or 1000:0iii|{OOOO:OOOO} with iii + 1 instances of
--    OOOO:OOOO, little endian
--  - {rrrr:rrrr} is a suite (possibly empty) of bytes of reference length to be
--    added to RRRR
-- Extra compatibility constraints:
--  * The last sequence must contain only a token with no reference, and, when
--    possible (input length >= 4), it must contain at least 4 literals.
--  * The last match must start at least 12 bytes before the end of block.

-- The uncompression algorithm is
--  - Read a token, read the complement of literal run length if needed,
--  - Copy the literals from input into output
--  - Read the offset, read the complement of reference length if needed
--  - Copy the reference, from offset in input, into output

with Bit_Ops; use Bit_Ops;
--#@IfDef Debug
with Trace, Hexa_Utils;
--#@EndifDef
pragma Optimize (Time);
package body Lz4L is

  subtype Ll_Integer is Long_Longs.Ll_Integer;

  --#@IfDef Debug
  -- Trace logger
  package Logger is new Trace.Basic_Logger ("Lz4l");
  procedure Log (Msg : in String) with Inline => True is
  begin
    Logger.Log_Debug (Msg);
  end Log;
  -- Image of a byte
  function Image is new Hexa_Utils.Mod_Image (Byte);
  -- Image of a signed integer
  package Int_Image is new Hexa_Utils.Int_Image (Integer);
  function Image (N : Integer) return String renames Int_Image.Image;
  --#@EndifDef

  -- The number of entries in the hash table. The size is a trade-off between
  --  hash collisions (reduced compression) and speed (amount that fits in CPU
  --  cache)
  Hash_Log : constant := 17;
  Hash_Size : constant Natural := Shl (1, Hash_Log);
  subtype Hash_Range is Natural range 0 .. Hash_Size - 1;
  -- Hash table: indexes are the hash of future and values are indexes
  --  in the input flow
  subtype Hash_Ref is Ll_Integer;
  Hash_Table : array (Hash_Range) of Hash_Ref;

  -- The initial value of the Hash_Table
  Default_Hash : constant Hash_Ref := -1;

  -- The representaion of 4 succesive bytes of input
  subtype Seq_Type is Integer;

  -- Init the future
  -- Bytes at Pos, Pos+1, Pos+2, Pos+3
  function Build (A : Byte_Array; I : Ll_Natural) return Seq_Type is
    (Shl (Integer(A(A'First + I + 0)), 24)
        or Shl (Integer(A(A'First + I + 1)), 16)
        or Shl (Integer(A(A'First + I + 2)),  8)
        or      Integer(A(A'First + I + 3)) ) with Inline => True;

  -- Compute the hash value of a Seq
  Hash_Mask : constant Long_Long_Integer := Long_Long_Integer (Hash_Size - 1);
  function Hash (V : Seq_Type) return Hash_Range is
    (Hash_Range (Shr (Long_Long_Integer (V) * 2654435761, 32 - Hash_Log)
                 and Hash_Mask) ) with Inline => True;

  -- Convert an int into a byte
  function To_Byte (I : Ll_Natural) return Byte is
    (Byte (I and 16#FF#)) with Inline => True;

  -- Encode a length on several successive Out_Pos of Output
  --  by succesive slices of 255
  procedure Encode_Length (Val : in Ll_Natural; Out_Pos : in out Ll_Positive;
                                                Output : in out Byte_Array) is
    Res : Ll_Natural := Val;
  begin
    loop
      if Res >= 16#FF# then
        Output(Out_Pos) := 16#FF#;
        Res := Res - 16#FF#;
        Out_Pos := Out_Pos + 1;
      else
        Output(Out_Pos) := To_Byte (Res);
        Out_Pos := Out_Pos + 1;
        exit;
      end if;
    end loop;
  end Encode_Length;


  -- Compress Input into Output
  -- May raise Too_Big if Output is too small
  procedure Compress (Input  : in Byte_Array;
                      Output : out Byte_Array;
                      Outlen : out Ll_Natural) is
    -- Indexes in input and output flows
    In_Pos, Anchor : Ll_Natural := 0;
    Src_Limit : constant Ll_Integer := Input'Length - 4;
    Out_Pos : Ll_Positive := Output'First;
    Token_Pos : Ll_Positive;
    -- Current, next, next-next and next-next-next bytes
    Seq : Seq_Type;
    -- For increasing step of search
    Incompressible : constant := 128;
    Unmatch_Limit : Ll_Positive := Incompressible;
    Match_Step : Positive := 1;
    -- Number of literal in current run
    Nb_Literals : Ll_Integer := 0;
    -- Length-4 of the matching sequence
    Nb_Match : Ll_Natural;
    -- Absolute and relative index, in input, of cross reference
    Hashed : Hash_Range;
    Ref : Hash_Ref;
    Off, Remain, Len_Pos : Ll_Integer;
    use type Byte;
  begin

    if Output'Length = 0 then
      if Input'Length /= 0 then
        raise Too_Big;
      end if;
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Empty input");
      end if;
      --#@EndifDef
      Outlen := 0;
      return;
    end if;
    Out_Pos := Output'First;

    --#@IfDef Debug
    if Logger.Debug_On then
      Log ("Starting encoding indexes " & Hexa_Utils.Image (Input'First)
         & " .. " & Hexa_Utils.Image (Input'Last)
         & " into " & Hexa_Utils.Image (Output'First)
         & " .. " & Hexa_Utils.Image (Output'Last));
    end if;
    --#@EndifDef

    -- Init
    Hash_Table := (others => Default_Hash);

    -- Main loop
    while In_Pos < Src_Limit loop

      -- Build sequence, hash it, read and replace Hash table content
      Seq := Build (Input, In_Pos);
      Hashed := Hash (Seq);
      Ref := Hash_Table(Hashed);
      Hash_Table(Hashed) := In_Pos;
      Off := In_Pos - Ref;
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("At Inpos " & Hexa_Utils.Image (In_Pos)
           & ", Byte " & Image (Input(Input'First + In_Pos))
           & ", Seq " & Image (Seq)
           & ", Hashed as " & Hexa_Utils.Image (Hashed)
           & ", Got " & (if Ref = Default_Hash then "Default"
                         else Hexa_Utils.Image (Ref)) );
      end if;
      --#@EndifDef

      if Ref = Default_Hash                    -- No reference
      or else Seq /= Build (Input, Ref)        -- Seq do not match
      or else In_Pos >= Input'Length - 11 then -- The last match is before the
                                               --  last 12 bytes
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("No match");
        end if;
        --#@EndifDef

        -- No match: search another following byte
        if In_Pos - Anchor > Unmatch_Limit then
          -- After Unmatch_Limit failures we consider that the flow is not
          --  compressible, so we increase the step and the limit
          Unmatch_Limit := Shl (Unmatch_Limit, 1);
          Match_Step := Match_Step + 1 + Shr (Match_Step, 2);
          --#@IfDef Debug
          if Logger.Debug_On then
            Log ("Step becomes" & Match_Step'Img
               & " and limit" & Unmatch_Limit'Img);
          end if;
          --#@EndifDef
        end if;
        In_Pos := In_Pos + Ll_Positive (Match_Step);
      elsif Match_Step > 1 then
        -- Match while stepping by more than one
        -- Restart just after previous matching failure
        Hash_Table(Hashed) := Ref;
        In_Pos := In_Pos - (Ll_Positive (Match_Step) - 1);
        Match_Step := 1;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Match while stepping, restart at " & Hexa_Utils.Image (In_Pos));
        end if;
        --#@EndifDef
      else
        -- Match while stepping by one

        -- Reset the stepping values
        Unmatch_Limit := Incompressible;

        -- Encode then length of literal run seen so far
        Nb_Literals := In_Pos - Anchor;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Match after " & Hexa_Utils.Image (Nb_Literals)
             & " literals, write at outpos " & Hexa_Utils.Image (Out_Pos));
        end if;
        --#@EndifDef
        Token_Pos := Out_Pos;
        if Nb_Literals < 16#F# then
          -- Stored in 4 bits (upper quartet of token)
          Output(Out_Pos) := To_Byte (Shl (Nb_Literals, 4));
          Out_Pos := Out_Pos + 1;
        else
          -- Stored on 4 bits and several successive bytes
          Output(Out_Pos) := 16#F0#;
          Out_Pos := Out_Pos + 1;
          Encode_Length (Nb_Literals - 16#F#, Out_Pos, Output);
        end if;

        -- Copy literals
        Output(Out_Pos .. Out_Pos + Nb_Literals - 1)
              := Input(Input'First + Anchor ..
                       Input'First + Anchor + Nb_Literals - 1);
        Out_Pos := Out_Pos + Nb_Literals;

        -- Encode Offset
        if Off <= 16#7FFF# then
          -- 0 + offset on 31 bytes big endian
          Output(Out_Pos) := Byte (Shr (Off, 8));
          Out_Pos := Out_Pos + 1;
          Output(Out_Pos) := Byte (Off and 16#FF#);
          Out_Pos := Out_Pos + 1;
        else
          -- 1000:0iii then offset little endian
          -- Skip byte for the the length
          Len_Pos := Out_Pos;
          Out_Pos := Out_Pos + 1;
          -- Then bytes little endian
          Remain := Off;
          loop
            Output(Out_Pos) := Byte (Remain and 16#FF#);
            Remain := Shr (Remain, 8);
            exit when Remain = 0;
            Out_Pos := Out_Pos + 1;
          end loop;
          -- Encode highest bit set, then length-1
          Output(Len_Pos) := Byte (16#80# or (Out_Pos - Len_Pos - 1));
          Out_Pos := Out_Pos + 1;
        end if;

        -- Count the length of the matching sequence
        -- The last 5 bytes are always literals
        In_Pos := In_Pos + 4;
        Ref := Ref + 4;
        Anchor := In_Pos;
        while Input(Input'First + In_Pos) = Input(Input'First + Ref)
        and then In_Pos < Input'Length - 4 loop
          In_Pos := In_Pos + 1;
          Ref := Ref + 1;
        end loop;

        -- Encode the length - 4
        Nb_Match := In_Pos - Anchor;
        --#@IfDef Debug
        if Logger.Debug_On then
          Log ("Match length " & Hexa_Utils.Image (Nb_Match + 4)
             & " at offset " & Hexa_Utils.Image (Off));
        end if;
        --#@EndifDef
        if Nb_Match < 16#F# then
          -- Stored in 4 bits (lower quartet of token)
          Output(Token_Pos) :=
            To_Byte (Ll_Natural (Output(Token_Pos)) or Nb_Match);
        else
          -- Stored on 4 lower bits in the token and in several successive bytes
          Output (Token_Pos) :=
            To_Byte (Ll_Natural (Output(Token_Pos)) or 16#0F#);
          Encode_Length (Nb_Match - 16#F#, Out_Pos, Output);
        end if;

        -- Set Anchor to start of new run
        Anchor := In_Pos;

      end if;
    end loop;

    -- Encode length of last literals
    Nb_Literals := Input'Length - Anchor;
    --#@IfDef Debug
    if Logger.Debug_On then
      Log ("Copy last " & Hexa_Utils.Image (Nb_Literals) & " literals");
    end if;
    --#@EndifDef
    if Nb_Literals < 16#F# then
      -- Stored in 4 bits (upper quartet of token)
      Output(Out_Pos) := To_Byte (Shl (Nb_Literals, 4));
      Out_Pos := Out_Pos + 1;
    else
      -- Stored on 4 bits and several successive bytes
      Output(Out_Pos) := 16#F0#;
      Out_Pos := Out_Pos + 1;
      Encode_Length (Nb_Literals - 16#F#, Out_Pos, Output);
    end if;

    -- Copy last literals
    Output(Out_Pos .. Out_Pos + Nb_Literals - 1)
          := Input(Input'First + Anchor ..
                   Input'First + Anchor + Nb_Literals - 1);
    Out_Pos := Out_Pos + Nb_Literals;

    -- Done
    Outlen := Out_Pos - Output'First;

  --#@IfDef Debug
  --#@ElseDef
  exception
    when Constraint_Error =>
      raise Too_Big;
  --#@EndifDef
  end Compress;

  -- Uncompress Input into Output
  -- May raise Too_Big if Output is too small
  procedure Uncompress (Input  : in Byte_Array;
                        Output : out Byte_Array;
                        Outlen : out Ll_Natural) is
    -- Indexes in input and output flows
    In_Pos : Ll_Natural := Input'First;
    Ref : Ll_Natural;
    Out_Pos : Ll_Positive := Output'First;
    -- Token of a sequence
    Token : Ll_Natural;
    -- Number of literal in current run
    Nb_Literals : Ll_Natural;
    -- Offset of the matching sequence
    Off : Ll_Natural;
    Off_Len : Natural;
    -- Length-4 of the matching sequence
    Nb_Match : Ll_Natural;
    use type C_Types.Byte;
  begin

    --#@IfDef Debug
    if Logger.Debug_On then
      Log ("Starting decoding indexes " & Hexa_Utils.Image (Input'First)
         & " .. " & Hexa_Utils.Image (Input'Last)
         & " into " & Hexa_Utils.Image (Output'First)
         & " .. " & Hexa_Utils.Image (Output'Last));
    end if;
    --#@EndifDef

    -- Main loop
    while In_Pos < Input'Last loop
      -- Read token
      Token := Ll_Natural (Input(In_Pos));
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("At index " & Hexa_Utils.Image (In_Pos)
           & " got token " & Image (Input(In_Pos)));
      end if;
      --#@EndifDef
      In_Pos := In_Pos + 1;

      -- Extract length of the literals run
      Nb_Literals := Shr (Token, 4);
      if Nb_Literals >= 15 then
        while Input(In_Pos) = 255 loop
           Nb_Literals := Nb_Literals + 255;
           In_Pos := In_Pos + 1;
        end loop;
        Nb_Literals := Nb_Literals + Ll_Natural (Input(In_Pos));
        In_Pos := In_Pos + 1;
      end if;
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Got literal length " & Hexa_Utils.Image (Nb_Literals));
      end if;
      --#@EndifDef

      -- Copy literals
      Output(Out_Pos .. Out_Pos + Nb_Literals - 1)
          := Input(In_Pos ..  In_Pos + Nb_Literals - 1);
      In_Pos := In_Pos + Nb_Literals;
      Out_Pos := Out_Pos + Nb_Literals;

      -- Check end of input
      exit when In_Pos > Input'Last;

      -- Get match offset
      Off := Ll_Natural (Input(In_Pos));
      if (Off and 16#80#) = 0 then
        -- 15 bits big endian
        In_Pos := In_Pos + 1;
        Off := Shl (Off, 8) or Ll_Natural (Input(In_Pos));
        In_Pos := In_Pos + 1;
      else
        -- N bytes, little endian
        Off_Len := Natural (Off and 16#07#);
        Off := 0;
        for I in 0 .. Off_Len loop
          In_Pos := In_Pos + 1;
          Off := Off or Shl (Ll_Natural (Input(In_Pos)), 8 * I);
        end loop;
        In_Pos := In_Pos + 1;
      end if;
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Got match offset " & Hexa_Utils.Image (Off));
      end if;
      --#@EndifDef

      -- Get match length
      Nb_Match := Token and 16#0F#;
      if Nb_Match >= 15 then
        while Input(In_Pos) = 255 loop
           Nb_Match := Nb_Match + 255;
           In_Pos := In_Pos + 1;
        end loop;
        Nb_Match := Nb_Match + Ll_Natural (Input(In_Pos));
        In_Pos := In_Pos + 1;
      end if;
      Nb_Match := Nb_Match + 4;
      --#@IfDef Debug
      if Logger.Debug_On then
        Log ("Got match length " & Hexa_Utils.Image (Nb_Match));
      end if;
      --#@EndifDef

      -- Copy matching sequence from Output to Output
      -- Areas may overlap! so we must copy byte per byte
      Ref := Out_Pos - Off;
      for I in 1 .. Nb_Match loop
        Output(Out_Pos) := Output(Ref);
        Out_Pos := Out_Pos + 1;
        Ref := Ref + 1;
      end loop;

    end loop;

    Outlen := Out_Pos - Output'First;

  --#@IfDef Debug
  --#@ElseDef
  exception
    when Constraint_Error =>
      raise Too_Big;
  --#@EndifDef
  end Uncompress;

end Lz4L;

