with Ada.Calendar, Mutex_Manager, Math;
package body Rnd is
 
  type Long_Integer is new Integer;
 
  -- Generator of pseudo random : remanent variable
  Rnd_Nbre : Float;
 
  Lock     : Mutex_Manager.Mutex;

  -- Initialise sequence
  procedure Randomize(Init : in Float := 1.0) is
    -- Result of mutex query : always True because call is blocking
    Ok : Boolean;
 
    -- Random number 
    -- Number of seconds in current day is N.xxx
    -- Result is 0.xxx
    function Init_Rnd return Float is
      Duree : constant Duration
            := abs(Ada.Calendar.Seconds(Ada.Calendar.Clock));
    begin
      return Float(Duree - Duration(Math.Trunc(Math.Real(Duree))));
    end Init_Rnd;
 
  begin
    -- 0 <= init < 1 : valid, else random
    Ok := Mutex_Manager.Get_Mutex(Lock, -1.0);
    if 0.0 <= Init and then Init < 1.0 then
      Rnd_Nbre := Init;
    else
      Rnd_Nbre := Init_Rnd;
    end if;
    Mutex_Manager.Release_Mutex(Lock);
  end Randomize;
 
 
  -- Next element in sequence
  function Random(Mini : Float := 0.0;
                  Maxi : Float := 1.0) return Float is
    Rnd_2 : Float;
    Pi    : constant := 3.141592653589793;
    Ok    : Boolean;
  begin
    Ok := Mutex_Manager.Get_Mutex(Lock, -1.0);
    -- (rnd + pi) ** 5
    Rnd_Nbre := Rnd_Nbre + Pi;
    Rnd_2 := Rnd_Nbre * Rnd_Nbre;
    Rnd_Nbre := Rnd_2 * Rnd_2 * Rnd_Nbre;
    -- decimal part
    Rnd_Nbre := Rnd_Nbre - Float(Math.Trunc(Math.Real(Rnd_Nbre)));
    Mutex_Manager.Release_Mutex(Lock);
    -- here 0 <= Rnd < 1
    if Mini >= Maxi then
      return Rnd_Nbre;
    else
      return Mini + (Rnd_Nbre * (Maxi - Mini));
    end if;
  end Random;
 
  function Discr_Random(Mini : Num := Num'First;
                        Maxi : Num := Num'Last) return Num is
  begin
    return Num'Val(Integer(Math.Trunc(Math.Real(Random(Float(Num'Pos(Mini)),
                                                             Float(Num'Pos(Maxi) + 1))))));
  end Discr_Random;
 
  function Int_Random(Mini : Integer := 0;
                      Maxi : Integer := 1) return Integer is
  begin
    return Integer(Math.Trunc(Math.Real(Random(Float(Mini), Float(Maxi + 1)))));
  end Int_Random;
 
  function Float_Random(Mini : Float := 0.0;
                        Maxi : Float := 1.0) return Float is
  begin
    return Random(Mini, Maxi);
  end Float_Random;
 
  function Dur_Random(Mini : Duration := 0.0;
                      Maxi : Duration := 1.0) return Duration is
  begin
    return Duration(Random(Float(Mini), Float(Maxi)));
  end Dur_Random;
 
begin
  Randomize;
end Rnd;

