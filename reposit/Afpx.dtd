<?xml version="1.1" encoding="UTF-8"?>
<!-- DTD for Afpx xml definition -->
<!-- See also the comments in afpx.ads for the handling of user actions -->
<!--  on list, on buttons and on get fields. -->

<!-- General Informations -->
<!-- ==================== -->
<!-- Only Mixed_Case keywords are accepted (not lowercase nor UPPERCASE). -->
<!-- Rows are from 0 to 255. -->
<!-- Cols are from 0 to 255. -->

<!-- Syntax and semantic of the descriptor file -->
<!-- ========================================== -->
<!-- Afpx_Descriptors allows defining the screen size for all descriptors -->
<!--  Default are a Height of 25 and a Width of 80. -->
<!-- The constants Screen.Width and Screen.Height are automatically created -->
<!--  as soon as the attribute is parsed (so it can be used for defining -->
<!--  the other attribute. The constants Screen.Up, Low, Left and Right -->
<!--  are also created. They are valid for all the descriptors. -->
<!ATTLIST Afpx_Descriptors Width CDATA #IMPLIED
                           Height CDATA #IMPLIED>
<!-- The Afpx_Descriptors is made of several descriptors. -->
<!-- Before descriptors it is possible to re-define any of the 14 colors. -->
<!--  The constants Color01 to Color14 are automatically created after this -->
<!--  definition, or at least before the first descriptor. It is also -->
<!--  possible to define the default background for descriptors (default is -->
<!--  Color01). -->
<!-- As soon as the Afpx descriptors declaration is parsed a constant -->
<!--  Default_Background is defined. -->
<!-- Before the descriptors, it is possible to (re)define some variables. -->
<!-- These variables are valid for all the descriptors. -->
<!ELEMENT Afpx_Descriptors (Var*,Color_Definitions?,Var*,Descriptor*)>

<!-- A variable name must be <Identifier>[{.<Identifier>}] the Ada way. -->
<!-- Value can be string or number, and may contain some reference to -->
<!--  variables or constants, on the form ${Variable}. -->
<!-- Expansion can be prevented by backslashing both delimiters: -->
<!--  e.g. "\${Variable\}" will become "${Variable}". -->
<!ELEMENT Var EMPTY>
<!ATTLIST Var Name  NMTOKEN #REQUIRED
              Value CDATA   #REQUIRED>

<!-- This ENTITY is informative. It defines the default colors, (if not -->
<!--  re-defined in ColorDefinitions). -->
<!ENTITY % Default_Colors "Light_Grey | Blue | Dark_Green | Cyan |
                           Red | Magenta | Brown | White |
                           Dark_Grey | Light_Blue | Lime_Green | Orange |
                           Yellow | Black">
<!ELEMENT Color_Definitions (Color_Definition*,Default_Background?)>
<!ELEMENT Color_Definition EMPTY>
<!ATTLIST Color_Definition Id ID #REQUIRED
                           Color CDATA #REQUIRED>
<!ELEMENT Default_Background EMPTY>
<!ATTLIST Default_Background Color CDATA #REQUIRED>

<!-- A descriptor Num has to be positive range 1 .. 50 and sole (no double). -->
<!-- It cannot be a variable. -->
<!-- It is possible to define the background color of the descriptor -->
<!--  (default is Default_Background). -->
<!-- The descriptor name is the name of the corresponding package in the -->
<!--  cross-reference package (default: Dscr_<Num>) -->
<!-- As soon as a descriptor declaration is parsed, the following -->
<!--  constants are defined: -->
<!--  - Descriptor.Name, set to the current descriptor name, -->
<!--    scope the current descriptor, -->
<!--  - Descriptor.Background, set to the current descriptor background, -->
<!--    scope the current descriptor, -->
<!--  - Dscr_<Name>.Background, set to the current descriptor background, -->
<!--    scope the following descriptors. -->
<!-- A descriptor leads to the definition of a sub-package (named <Name>) -->
<!--  of the cross-reference package, with a constant Dscr_Num set to <Num>. -->
<!ATTLIST Descriptor Num NMTOKEN #REQUIRED Background CDATA #IMPLIED
                                           Name CDATA #IMPLIED>
<!-- A descriptor allows defining one optional list, then fields. -->
<!-- Before and between them, it is possible to (re)define variables that -->
<!--  are valid in the descriptor only. -->
<!ELEMENT Descriptor (Var*, List?,(Var|Field)*)>

<!-- The list can be defined none or once per descriptor, only at the -->
<!--  beginning. -->
<!ATTLIST List>
<!-- The list (like fields) is defined by a geometry and colors. -->
<!-- Geometry has to be compatible with the screen, and the list and fields -->
<!--  must not overlap. -->
<!ELEMENT List (Geometry,Colors)>

<!-- Field Num has to be within Field_Range (1 .. 500), strictly crescent -->
<!--  within one descriptor: no "hole" nor double are allowed in field nums. -->
<!-- It cannot be a variable. -->
<!-- Put field simply displays fixed text, Button field allows the user to -->
<!--  click (with the mouse) on it and Get field allows the used to enter -->
<!--  text in it. -->
<!-- If a Name is set, then a variable is defined (e.g. Field_2.Name) and -->
<!--  a constant Name will be generated in the desciptor's sub-pacakge of -->
<!--  the cross-reference package, so the name "Dscr_Num" is forbidden for -->
<!--  a field. -->
<!ATTLIST Field Num NMTOKEN #REQUIRED
                Kind (Put|Button|Get) #REQUIRED
                Name CDATA #IMPLIED>
<!-- Field are defined by a geometry and colors -->
<!-- Fields also allow defining an initial content (several rows and cols). -->
<!ELEMENT Field (Geometry,Get_Tuning?,Colors,Init*)>

<!-- Geometry must define at least one row and one col. -->
<!-- In each direction it must define an absolute position, and an absolute -->
<!--  position or length. Two horizontal and two vertical indications are -->
<!--  required. -->
<!-- Geometry must not make the field overlap with another field of the -->
<!--  descriptor. -->
<!-- Geometry of a Get field must define only one row. -->
<!ELEMENT Geometry EMPTY>
<!ATTLIST Geometry
     Up   CDATA #IMPLIED Low   CDATA #IMPLIED Height  CDATA #IMPLIED
     Left CDATA #IMPLIED Right CDATA #IMPLIED Width   CDATA #IMPLIED>
<!-- As soon as an attribute is parsed, the corresponding constant -->
<!--  is defined and valid for the rest of the descriptor (e.g. List.Up, -->
<!--  Field_2.Low, Field_21.Width). When all geometry is parsed for a list -->
<!--  or field, the two missing constants (e.g. List.Width, -->
<!--  Field_21.Up) are also defined. -->

<!-- A Get field can be customized with: -->
<!--  - Data_Len: the length of string to input, by default and at least the -->
<!--     width computed from the geometry. -->
<!--  - Move_Prev / Move_Next: Move to previous/next field on arrow or -->
<!--     on character input, when in the first/last char of data input. -->
<!-- If a Data_Len is set, then Move_Prev and Move_Next must be False -->
<!ELEMENT Get_Tuning EMPTY>
<!ATTLIST Get_Tuning Move_Prev (True|False) "False"
                     Move_Next (True|False) "False"
                     Data_Len CDATA #IMPLIED>

<!-- Any field must have a Foreground and Background color. -->
<!-- Get fields and List must also have a Selected color. -->
<!-- Summary of color combinations: -->
<!-- ========================================== -->
<!-- Kind  |   Foreground  Background  Selected -->
<!-- ========================================== -->
<!-- Put   |       X           X                -->
<!-- Button|       X           X                -->
<!-- Get   |       X           X           X    -->
<!-- List  |       X           X           X    -->
<!-- ========================================== -->
<!ELEMENT Colors EMPTY>
<!ATTLIST Colors Foreground CDATA #REQUIRED
                 Background CDATA #REQUIRED
                 Selected CDATA #IMPLIED>
<!-- As soon as such color attribute is parsed, the corresponding constant, -->
<!--  (valid for the rest of the descriptor) is defined (e.g. -->
<!--  List.Foreground and Field_1.Background). -->

<!-- Init row and col have to be compatible with the geometry of the field. -->
<!-- Init string must contain Line Feed and must be compatible with the -->
<!-- geometry and the init col. -->
<!ELEMENT Init (#PCDATA)>
<!ATTLIST Init Row CDATA #REQUIRED Col CDATA #REQUIRED
               xml:space (default|preserve) "preserve">

<!-- Note on Cross-reference package -->
<!-- If afpx_bld is called with the option -x<cross_ref_package> thenn it -->
<!--  generates a file (named cross_ref_package.ads) containing all the -->
<!--  descriptors ans the fields with a Name. Ex: if Afpx.xml contains: -->
<!--  <Descriptor Num="1" Name="Main">                   -->
<!--    <Field Num="2" Kind="Put" Name="Top".            -->
<!--  <Descriptor Num="2"                                -->
<!--    <Field Num="2" Kind="Put" Name="Up".             -->
<!-- The cross-reference package will contain:           -->
<!-- with Afpx;                                          -->
<!-- package Cross_Ref_Package is                        -->
<!--   package Main is                                   -->
<!--     Dscr_Num : constant Afpx.Descriptor_Range := 1; -->
<!--     Top : constant Afpx.Field_Range := 2;           -->
<!--   end Main;                                         -->
<!--   package Desr_02 is                                -->
<!--     Dscr_Num : constant Afpx.Descriptor_Range := 2; -->
<!--     Up : constant Afpx.Field_Range := 2;            -->
<!--   end Dscr_2;                                       -->
<!-- end Cross_Ref_Package;                              -->
<!-- So names must be valid Ada identifiers, not keywords, -->
<!--  descriptor names must be unique and field names must be unique within -->
<!--  a descriptor and cannot be "Dscr_Num". -->

