-- This package implements the Snappy lossless data compression algorithm.
-- Snappy is a Lempel-Ziv variant, which aims for very high speeds and
-- reasonable compression. This version is not as optimised as the original
-- in C++.
-- Safety/Use Notes:
--  - The byte arrays should be smaller than 2 GB (Positive'Last).
--  - For performance reasons, safety checks on expansion are omitted.
--  - Invalid compressed data can cause exceptions (Constraint_Error)

-- General principles:
-- The Snappy compressed format knows literal runs and back-references:
--  - Literal run: directly copy bytes from input to output.
--  - Back-reference: copy previous data of the uncompressed stream to the
--    output stream, with specified offset from location in the uncompressed
--    stream and length. The length is at least 4 bytes.
-- A sequence is made of one or several literal runs, then of one or several
--  back references (all with the same offset).
-- The compression algorithm is
--  - Read next byte and the 3 following bytes, these 4 bytes are the "future",
--    hash them
--  - Read the corresponding hash entry and replace the entry by current input
--    index (so, for a hash value, there is always the most recent index)
--  - If the read entry is set, then it is an index. Compare the four bytes at
--    this reference index with the current "future"
--  - If they match, then check how long of the reference matches current text
--    and append a cross reference (with offset from current and length of
--    match)
--  - If no match, then append the current byte as literal.
--  - The compressed flow is a suite of sequences. A sequence starts with a
--    token. The 2 lowest bits of the first byte indicate the kind of the
--    sequence
--    * 00: a literal run, the 6 other bits L of the token indicate the
--      length:
--      - 0 <= L < 60, L = length - 1
--      - L = 60, length - 1 is coded in the 1 following byte
--      - L = 61, length - 1 is coded in the 2 following bytes, little endian
--      - L = 62, length - 1 is coded in the 3 following bytes, little endian
--      - L = 63, length - 1 is coded in the 4 following bytes, little endian
--    * 01: a reference with offset on 1 byte. The token is of the form:
--      OOOLLL01 oooooooo. OOOoooooooo is the offset (on 11 bits) and LLL
--      if the length - 4 on 3 bits
--    * 10: a reference with offset on 2 bytes. The token is of the form:
--      LLLLLL10 OOOOOOOO oooooooo. LLLLLL is the length - 1 on 6 bits, and
--      the token is followed by the offset on 16 bits, little endian
--    * 11: a reference with offset on 4 bytes. The first byte is
--      LLLLLL11, where LLLLLL is the length - 1 on 6 bits, and
--      it is followed by the offset on 32 bits, little endian

with Bit_Ops; use Bit_Ops;
--#IfDef Debug
with Trace, Hexa_Utils;
--#EndifDef
pragma Optimize (Time);
package body Snappy is

  --#IfDef Debug
  -- Trace logger
  package Logger is new Trace.Basic_Logger ("Snappy");
  procedure Log (Msg : in String) is
  pragma Inline (Log);
  begin
    Logger.Log_Debug (Msg);
  end Log;
  -- Image of a byte
  function Image is new Hexa_Utils.Mod_Image (Byte);
  -- Image of a signed integer
  function Image is new Hexa_Utils.Int_Image (Integer);
  --#EndifDef

  -- The number of entries in the hash table. The size is a trade-off between
  --  hash collisions (reduced compression) and speed (amount that fits in CPU
  --  cache)
  Hash_Log : constant := 14;
  Hash_Size : constant Natural := Shl (1, Hash_Log);
  -- Hash table: indexes are the hash of future and values are indexes
  --  in the input flow
  subtype Hash_Ref is Integer;
  Hash_Table : array (0 .. Hash_Size - 1) of Hash_Ref;
  Hash_Mask : constant Long_Long_Integer := Long_Long_Integer (Hash_Size - 1);

  -- The initial value of the Hash_Table: an offset too large
  Default_Hash : constant Hash_Ref := 0;

  -- The representaion of 4 succesive bytes of input
  subtype Seq_Type is Integer;

  -- Init the future
  -- Bytes at Pos, Pos+1, Pos+2, Pos+3
  function Build (A : Byte_Array; I : Natural) return Seq_Type is
  pragma Inline (Build);
  begin
    return Shl (Integer(A(A'First + I + 0)), 24)
        or Shl (Integer(A(A'First + I + 1)), 16)
        or Shl (Integer(A(A'First + I + 2)),  8)
        or      Integer(A(A'First + I + 3));
  end Build;

  -- Compute the hash value of a Seq
  function Hash (V : Seq_Type) return Hash_Ref is
  pragma Inline (Hash);
  begin
    return Hash_Ref (Shr (Long_Long_Integer (V) * 16#1E35A7BD#, 32 - Hash_Log)
                     and Hash_Mask);
  end Hash;

  -- Convert an int into a byte
  function To_Byte (I : Natural) return Byte is
  pragma Inline (To_Byte);
  begin
    return Byte (I and 16#FF#);
  end To_Byte;

  -- Encode Nb_Literals from Anchor to Out_POs
  procedure Encode_Literals (Nb_Literals : in Natural;
                             Anchor      : in Natural;
                             Input       : in  Byte_Array;
                             Out_Pos     : in out Positive;
                             Output      : in out Byte_Array) is
    Res : Natural;
  begin
    -- Encode literal token xxxxxx00
    if Nb_Literals < 16#3C# then
      -- Stored Length - 1 in 6 bits (upper quartet of token)
      Output(Out_Pos) := To_Byte (Shl (Nb_Literals - 1, 2));
      Out_Pos := Out_Pos + 1;
    else
      -- Length -1 will be stored on 1 to 4 successive bytes
      -- The 6 bits indicate the number of bytes
      Res := Nb_Literals - 1;
      if Res <= 16#FF# then
        -- Shl (16#3C#, 2)
        Output(Out_Pos) := 16#F0#;
      elsif Res <= 16#FFFF# then
        -- Shl (16#3D#, 2)
        Output(Out_Pos) := 16#F4#;
      elsif Res <= 16#FFFFFF# then
        -- Shl (16#3E#, 2)
        Output(Out_Pos) := 16#F8#;
      else
        -- Shl (16#3F#, 2)
        Output(Out_Pos) := 16#FC#;
      end if;
      Out_Pos := Out_Pos + 1;
      -- Encode the length - 1 on 1 to 4 bytes, little endian
      loop
        -- Lower byte
        Output(Out_Pos) := To_Byte (Res and 16#FF#);
        Out_Pos := Out_Pos + 1;
        -- Remaining bytes
        Res := Shr (Res, 8);
        exit when Res = 0;
      end loop;
    end if;

    -- Copy literals
    Output(Out_Pos .. Out_Pos + Nb_Literals - 1)
          := Input(Input'First + Anchor ..
                   Input'First + Anchor + Nb_Literals - 1);
    Out_Pos := Out_Pos + Nb_Literals;
  end Encode_Literals;

  -- Encode reference to Off, length Len (<=64) in Output(Outpos)
  procedure Encode_Ref64 (Off : in Integer;
                          Len : in Positive;
                          Out_Pos : in out Positive;
                          Output : in out Byte_Array) is
  begin
    --#IfDef Debug
    if Logger.Debug_On then
      Log ("  Write ref off " & Hexa_Utils.Image (Off)
         & ", len " & Hexa_Utils.Image (Len)
         & ", at outpos " & Hexa_Utils.Image (Out_Pos));
    end if;
    --#EndifDef
    if Len <= 16#0B# and then Off <= 16#7FF# then
      -- OOOLLL01 OOOOOOOO   (with L = Len-4)
      Output(Out_Pos) := To_Byte (
          Shr (Off and 16#700#, 3) or Shl (Len - 4, 2) or 16#01#);
      Output(Out_Pos + 1) := To_Byte (Off and 16#FF#);
      Out_Pos := Out_Pos + 2;
    elsif Off <= 16#FFFF# then
      -- LLLLLL10 Ol Oh (with L = Len - 1)
      Output(Out_Pos) := To_Byte (Shl (Len - 1, 2) or 16#02#);
      Output(Out_Pos + 1) := To_Byte (Off and 16#FF#);
      Output(Out_Pos + 2) := To_Byte (Shr (Off and 16#FF00#, 8));
      Out_Pos := Out_Pos + 3;
    else
      -- LLLLLL10 O1 O2 O3 O4 (with L = Len - 1)
      Output(Out_Pos) := To_Byte (Shl (Len - 1, 2) or 16#03#);
      Output(Out_Pos + 1) := To_Byte (Off and 16#FF#);
      Output(Out_Pos + 2) := To_Byte (Shr (Off and 16#FF00#, 8));
      Output(Out_Pos + 3) := To_Byte (Shr (Off and 16#FF0000#, 16));
      Output(Out_Pos + 4) := To_Byte (Shr (Off, 24));
      Out_Pos := Out_Pos + 5;
    end if;
  end Encode_Ref64;

  -- Compress Input into Output
  -- May raise Too_Big if Output is too small
  procedure Compress (Input  : in Byte_Array;
                      Output : out Byte_Array;
                      Outlen : out Natural) is
    -- Indexes in input and output flows
    In_Pos, Anchor : Natural := 0;
    Src_Limit : constant Integer := Input'Length - 15;
    Out_Pos : Positive := Output'First;
    -- Stepping mechanism
    Incompressible : constant := 32;
    Nb_Try : Positive := 1;
    Match_Step : Positive := 1;
    -- Current, next, next-next and next-next-next bytes
    Seq : Seq_Type;
    -- Number of literal in current run
    Nb_Literals : Integer := 0;
    -- Length of the matching sequence
    Max_Len : Positive;
    Nb_Match : Natural;
    -- Absolute and relative index, in input, of cross reference
    Hashed : Hash_Ref;
    Ref : Hash_Ref;
    Off : Integer;
    use type C_Types.Byte;
  begin

    if Output'Length = 0 then
      if Input'Length /= 0 then
        raise Too_Big;
      end if;
      --#IfDef Debug
      if Logger.Debug_On then
        Log ("Empty input");
      end if;
      --#EndifDef
      Outlen := 0;
      return;
    end if;
    Out_Pos := Output'First;

    --#IfDef Debug
    if Logger.Debug_On then
      Log ("Starting encoding indexes " & Hexa_Utils.Image (Input'First)
         & " .. " & Hexa_Utils.Image (Input'Last)
         & " into " & Hexa_Utils.Image (Output'First)
         & " .. " & Hexa_Utils.Image (Output'Last));
    end if;
    --#EndifDef

    -- Init
    Hash_Table := (others => Default_Hash);

    -- Main loop
    In_Pos := In_Pos + 1;
    while In_Pos < Src_Limit loop

      -- Build sequence, hash it, read and replace Hash table content
      Seq := Build (Input, In_Pos);
      Hashed := Hash (Seq);
      Ref := Hash_Table(Hashed);
      Hash_Table(Hashed) := In_Pos;
      Off := In_Pos - Ref;
      --#IfDef Debug
      if Logger.Debug_On then
        Log ("At Inpos " & Hexa_Utils.Image (In_Pos)
           & ", Byte " & Image (Input(Input'First + In_Pos))
           & ", Seq " & Image (Seq)
           & ", Hashed as " & Hexa_Utils.Image (Hashed)
           & ", Got " & (if Ref = Default_Hash then "Default"
                         else Hexa_Utils.Image (Ref)) );

      end if;
      --#EndifDef

      if Seq /= Build (Input, Ref) then
        -- Seq do not match
        --#IfDef Debug
        if Logger.Debug_On then
          Log ("No match");
        end if;
        --#EndifDef

        -- No match: search another following byte
        if Nb_Try > Incompressible then
          -- After Uncompressible failures we consider that the flow is not
          --  compressible, so we increase the step
          Match_Step := Match_Step + 1;
          --#IfDef Debug
          if Logger.Debug_On then
            Log ("Step becomes" & Match_Step'Img);
          end if;
          --#EndifDef
        end if;
        Nb_Try := Nb_Try + 1;
        In_Pos := In_Pos + Match_Step;
      else
        -- Match
        -- Reset the stepping values
        Nb_Try := 1;
        Match_Step := 1;

        -- Encode the length of literal run seen so far
        Nb_Literals := In_Pos - Anchor;
        if Nb_Literals /= 0 then
          --#IfDef Debug
          if Logger.Debug_On then
            Log ("Match after " & Hexa_Utils.Image (Nb_Literals)
               & " literals, write at outpos " & Hexa_Utils.Image (Out_Pos));
          end if;
          --#EndifDef

          -- Encode literals
          Encode_Literals (Nb_Literals, Anchor, Input, Out_Pos, Output);
        end if;

        -- Now handle the match
        -- Count length of the match
        Nb_Match := 4;
        Max_Len := Input'Length - In_Pos;
        while Nb_Match < Max_Len
        and then Input (Input'First + Ref + Nb_Match)
               = Input(Input'First + In_Pos + Nb_Match) loop
          Nb_Match := Nb_Match + 1;
        end loop;
        --#IfDef Debug
        if Logger.Debug_On then
          Log ("Match length " & Hexa_Utils.Image (Nb_Match));
        end if;
        --#EndifDef
        In_Pos := In_Pos + Nb_Match;

        -- Write reference blocks, keep last 4 bytes
        while Nb_Match >= 68 loop
          Encode_Ref64 (Off, 64, Out_Pos, Output);
          Nb_Match := Nb_Match - 64;
        end loop;
        -- Write extra 60 block if possible
        if Nb_Match >= 64 then
          Encode_Ref64 (Off, 60, Out_Pos, Output);
          Nb_Match := Nb_Match - 60;
        end if;
        -- Write remaining block
        Encode_Ref64 (Off, Nb_Match, Out_Pos, Output);

        -- Set Anchor to start of new run
        Anchor := In_Pos;

        -- Store both last hash values
        if In_Pos < Src_Limit then
          Seq := Build (Input, In_Pos - 2);
          Hash_Table(Hash (Seq)) := In_Pos - 2;
          Seq := Build (Input, In_Pos - 1);
          Hash_Table(Hash (Seq)) := In_Pos - 1;
        end if;

      end if;
    end loop;

    -- Encode length of last literals
    Nb_Literals := Input'Length - Anchor;
    if Nb_Literals /= 0 then
      --#IfDef Debug
      if Logger.Debug_On then
        Log ("Copy last " & Hexa_Utils.Image (Nb_Literals) & " literals");
      end if;
      --#EndifDef
      -- Encode literals
      Encode_Literals (Nb_Literals, Anchor, Input, Out_Pos, Output);
    end if;

    -- Done
    Outlen := Out_Pos - Output'First;

  --#IfDef Debug
  --#ElseDef
  exception
    when Constraint_Error =>
      raise Too_Big;
  --#EndifDef
  end Compress;

  -- Uncompress Input into Output
  -- May raise Too_Big if Output is too small
  procedure Uncompress (Input  : in Byte_Array;
                        Output : out Byte_Array;
                        Outlen : out Natural) is
    In_Pos, Out_Pos : Integer;
    Ctrl, Kind, Len, Off : Integer;
  begin

    if Input'Length = 0 then
      --#IfDef Debug
      if Logger.Debug_On then
        Log ("Empty input");
      end if;
      --#EndifDef
      Outlen := 0;
      return;
    end if;

    In_Pos := Input'First;
    Out_Pos := Output'First;
    --#IfDef Debug
    if Logger.Debug_On then
      Log ("First index is " & Hexa_Utils.Image (In_Pos));
    end if;
    --#EndifDef
    loop
      -- Get control char: literals-run or backref
      Ctrl := Integer (Input(In_Pos));
      Kind := Ctrl and 16#3#;
      --#IfDef Debug
      if Logger.Debug_On then
        Log ("At index " & Hexa_Utils.Image (In_Pos)
           & ", outpos " & Hexa_Utils.Image (Out_Pos)
           & ", kind " & Hexa_Utils.Image (Kind));
      end if;
      --#EndifDef
      In_Pos := In_Pos + 1;

      if Kind = 0 then
        -- LLLLLL00: Literal run
        Len := Shr (Ctrl, 2);
        case Len is
          when 16#3C# =>
            -- Len on 1 byte
            Len := Integer (Input(In_Pos));
            In_Pos := In_Pos + 1;
          when 16#3D# =>
            -- Len on 2 bytes
            Len := Integer (Input(In_Pos))
                   or Shl (Integer (Input(In_Pos + 1)), 8);
            In_Pos := In_Pos + 2;
          when 16#3E# =>
            -- Len on 3 bytes
            Len := Integer (Input(In_Pos))
                   or Shl (Integer (Input(In_Pos + 1)), 8)
                   or Shl (Integer (Input(In_Pos + 2)), 16);
            In_Pos := In_Pos + 3;
          when 16#3F# =>
            -- Len on 4 bytes
            Len := Integer (Input(In_Pos))
                   or Shl (Integer (Input(In_Pos + 1)), 8)
                   or Shl (Integer (Input(In_Pos + 2)), 16)
                   or Shl (Integer (Input(In_Pos + 3)), 24);
            In_Pos := In_Pos + 4;
          when others =>
            -- Len <= 16#3B#, in token
            null;
        end case;
        Len := Len + 1;

        --#IfDef Debug
        if Logger.Debug_On then
          Log ("Got " & Hexa_Utils.Image (Len) & " litterals");
          for I in In_Pos .. In_Pos + Len - 1 loop
             Log ("  Literal " & Image (Input(I)));
          end loop;
        end if;
        --#EndifDef
        -- Copy to output and move forward this many bytes
        if Out_Pos + Len > Output'Last then
          raise Too_Big;
        end if;
        Output(Out_Pos .. Out_Pos + Len - 1)
             := Input (In_Pos .. In_Pos + Len - 1);
        In_Pos := In_Pos + Len;
        Out_Pos := Out_Pos + Len;
      else
        -- Back reference
        if Kind = 16#01# then
          -- OOOLLL01 OOOOOOOO   (with L = Len-4)
          Len := Shr (Ctrl and 16#1C#, 2) + 4;
          Off := Shl (Ctrl and 16#E0#, 3) or Integer (Input (In_Pos));
          In_Pos := In_Pos + 1;
        elsif Kind = 16#02# then
          -- LLLLLL10 Ol Oh (with L = Len - 1)
          Len := Shr (Ctrl, 2) + 1;
          Off := Integer (Input (In_Pos))
               + Shl (Integer (Input (In_Pos + 1)), 8);
          In_Pos := In_Pos + 2;
        elsif Kind = 16#03# then
          -- LLLLLL10 O O O O (with L = Len - 1)
          Len := Shr (Ctrl, 2) + 1;
          Off := Integer (Input (In_Pos))
               + Shl (Integer (Input (In_Pos + 1)), 8)
               + Shl (Integer (Input (In_Pos + 2)), 16)
               + Shl (Integer (Input (In_Pos + 3)), 24);
          In_Pos := In_Pos + 4;
        end if;

        --#IfDef Debug
        if Logger.Debug_On then
          Log ("Got a backref of len " & Hexa_Utils.Image (Len)
             & " and offset " & Hexa_Utils.Image (Off));
        end if;
        --#EndifDef

        -- Copy the *back-reference* bytes from the given
        --  location in output to current position
        if Out_Pos + Len - 1 > Output'Last then
          raise Too_Big;
        end if;
        Off := Out_Pos - Off;
        -- Areas may overlap! so we must copy byte per byte
        --#IfDef Debug
        if Logger.Debug_On then
          Log ("  Copying from " & Hexa_Utils.Image (Off)
             & " to " & Hexa_Utils.Image (Off + Len - 1)
             & " into " & Hexa_Utils.Image (Out_Pos));
        end if;
        --#EndifDef
        for I in 0 .. Len - 1 loop
          --#IfDef Debug
          if Logger.Debug_On then
            Log ("  --> " & Image (Output(Off + I)));
          end if;
          --#EndifDef
          Output(Out_Pos + I) := Output(Off + I);
        end loop;
        Out_Pos := Out_Pos + Len;
      end if;

      exit when In_Pos > Input'Last;
    end loop;
    Outlen := Out_Pos - Output'First;
  end Uncompress;

end Snappy;

