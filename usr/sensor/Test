#!/bin/bash

# Env
export INPUT=input.txt
export OUTPUT=output.txt
export EXPECTED=expected.txt
export TIMEOUT=1
export PERIOD="0.2"
export TRIGGER="Trigger"
# Defining the action in a variable requires a specific DTD
#  (where Action ID and ADREF are replaced by CDATA)
export ACTION="LogTrigger"

# Clean files
function cleanup {
  rm -f $INPUT $OUTPUT $EXPECTED
}
trap 'echo "Aborted"; cleanup; exit 1' SIGINT SIGTERM

if [ "$1" = "clean" ]  ; then
  cleanup
  exit 0
fi

# Option verbose
export VERBOSE=1
if [ \( "$1" = "-s" \) -o \( "$1" = "--silent" \) ] ; then
  VERBOSE=0
  shift
fi

# Output if verbose
function output {
  if [ $VERBOSE -eq 1 ] ; then
    echo $*
  fi
}

# Initialise input and output
echo -e "Toto\nTiti\nTata\n${TRIGGER} 1\nToto\n" > $INPUT
rm -f $OUTPUT
touch $OUTPUT

# Start sensor
output "Starting"
./sensor Test.xml &
export SENSOR_PID=$!

# Scenario
sleep $TIMEOUT
output "Adding a trigger"
echo -e "Tata\nTate\n${TRIGGER} 2\nTati\n" >> $INPUT
sleep $TIMEOUT
output "Adding two triggers"
echo -e "Teta\nTete\n${TRIGGER} 3\nTeti\n" >> $INPUT
echo -e "Tita\nTite\n${TRIGGER} 4\nTiti\n" >> $INPUT
sleep $TIMEOUT
# This one will be filtered out by the latency
output "Adding a trigger"
echo -e "${TRIGGER} 4\n" >> $INPUT
sleep $TIMEOUT
output "Adding a trigger"
echo -e "Tota\nTote\n${TRIGGER} 5\nToti\n" >> $INPUT
sleep $TIMEOUT

# Terminate
output "Terminating"
kill $SENSOR_PID

# Check
cat >$EXPECTED <<EOF
Got ${TRIGGER} 1
Got ${TRIGGER} 2
Got ${TRIGGER} 3
${TRIGGER} 4
Got ${TRIGGER} 5
EOF
cmp $OUTPUT $EXPECTED 2>/dev/null
res=$? 
if [ $res -ne 0 ] ; then
  echo "File $OUTPUT differs from expected $EXPECTED." 1>&2
  exit 1
else
  # Cleanup
  echo Test OK.
  cleanup
fi

