Sensor
======
Version: 7.0

Sensor scans several log files and raises alerts on some events (matching
filters).

Syntax and configuration
------------------------
...............................................................
sensor <configuration file> | -h | --help | -v | --version
...............................................................

The XML configuration file may start by defining variables. Each variable has
a unique name and a text value.

Then the configuration file defines several actions. +
Each action has a unique name and executes a predefined shell command. The
definition of a command can refer to some variables of the form
'$\{variable}'. The following variable names are automatically defined:

- $\{Match} : Lines (content) of the log that match the filter
- $\{Time} : Date and time at ISO format (YYyy-Mm-DdTHh:Mm:Ss.mmm)
- $\{Host}: Local host name

All the other variables must be defined previously in the configuration or in
the environment, otherwise this is an error.

The configuration file then defines rules. Each rule consists in:

- the name of the file to scan
- an optional scanning period in seconds (default 60.0, min 0.1)
- an optional tail size to scan (default 100 lines, 0 for infinite)
- an optional number of past seconds to scan (default 1 hour, 0 for infinite)
and the format of time (expected at a fixed offset in each line of the file).
See Date_Text for the definition of format used to scan dates and times.
- a history of alerts to store (default 100)
- the name of the action to execute
- the latency between two successive executions of the action
- the criteria (regular expression) to match

All the definitions of the configuration (variable definition, action name,
rule name and options), can refer to existing variables (defined previously in
the configuration or in the environment, otherwise this is an error).

NOTE: If a variable is used for the definition and reference of an action,
then the definitions of attributes Action:Name and Rule:Action must be modified
in the DTD file, from ID and IDREF to CDATA.

.......................................

<?xml version="1.0" encoding="Utf-8"?>
<!DOCTYPE Sensor SYSTEM "Sensor.dtd">
<Sensor>
  <Vars>
    <Var Name="Logfile">/root/log/login</Var>
  </Vars>
  <Actions>
    <Action Name="RootLogin">echo -n "${Match}" >> ${Logfile}</Rule>
  </Actions>
  <Rules>
    <Rule File="/var/log/auth.log" Action="RootLogin" Latency="300.5">
      <Past Seconds="3600">%b %d %H:%M:%S</Past>
      <Criteria>pam_unix\((su|sshd):session\): session opened for user root by</Criteria>
    </Rule>
  </Rules>
</Sensor>

.......................................

Processing
----------
.Init
 * Parse the argument and the configuration file
 * Check the expansion of each rule (variables) and store the actions in a
unique list (by name)
 * Store the rules in a dynamic list (history is a circular queue), check
time format, regular expression, and that the referenced action exists
 * Arm a periodical time for each rule (user data being the position in list)

.When a timer expires:
 * Retrieve the rule
 * Extract the tail then filter the past seconds of the file, and then search
the regex
 * If found, check each line of the result versus the history
 * If found in the history then drop, otherwise store in the history
 * Store the matching lines until latency is reached, then expand and execute
the action on all these lines together

