Sensor
======
Version: 11.2

Sensor scans some files and triggers actions when finding specific events. +
It is usefull to raise alerts when some log messages are matching criteria.

Syntax and configuration
------------------------
...............................................................
sensor [ -c | --check ] <configuration file> | -h | --help | -v | --version
...............................................................

.Options
With option -c (--check), sensor only checks the configuration file and exits.

.Variables
The XML configuration file may start by defining variables. Each variable has
a unique name and a text value.

All the definitions of the configuration (variable definition, action name,
rule name and options), can refer to existing variables of the form
'$\{variable}'. A referred variable must be defined previously (automatically,
or in the configuration or in the environment), otherwise this is an error.

.Rules
The configuration file then defines rules. Each rule consists in:

- scanning criteria

* the name of the file to scan
* an optional scanning period in seconds (default 60.0, min 0.1)
* the criteria (regular expression) to match
* an optional tail size to scan (default 100 lines, 0 for infinite)
* the format of time (expected at a fixed offset in each line of the
file), allowing to discard "old" entries (e.g. the ones before we started)
* an optional number of past seconds to scan (default 1 hour, 0 for infinite)

- execution definition

* the name of the action to execute
* a history of alerts to store (default 100) in order to avoid repeating an
action for the same reason
* the latency between two successive executions of the action

NOTE: See the package Date_Text for the definition of the format used to scan dates
and times. +
The format of the time can be empty (if there is no time in the log file or if
its format is not supported), and then the past seconds *must* be set to 0. 
In this case, at the startup of sensor, the old log messages cannot be skipped
and may trigger actions.

.Actions
Then the configuration file defines several actions. +
Each action has a unique name and defines a shell command. +
If an action is triggered too often (more than a given number of occurences
within a given time), it is possible to also trigger another action. +
The following variable names are automatically defined when evaluating an
action:

- $\{Match} : The lines of the log that match the filter
- $\{Time} : Date and time at ISO format (YYyy-Mm-DdTHh:Mm:Ss.mmm)
- $\{Host}: Local host name
- $\{Action}: The repeated action, when executing an action as the consequence
of a repeated action

NOTE: During a scan, several lines may match the criteria and get through the
various history and latency filters. In this case, $\{Match} will be
expanded with *all* these lines separated by Line_Feed.

Example:

.......................................

<?xml version="1.0" encoding="Utf-8"?>
<!DOCTYPE Sensor SYSTEM "Sensor.dtd">

<Sensor>
  <Var Name="OUTPUT" Value="/root/log/Sensor.log"/>
  <Rules>
    <Rule>
      <Scan File="${INPUT}" Period="60" Criteria="${TRIGGER}" Tail="10">
        <Time Format="%b %d %H:%M:%S" Past="3600"/>
      </Scan>
      <Execute Action="LogTrigger" History="5" Latency="1.5"/>
    </Rule>
  </Rules>
  <Actions>
    <Action Name="LogTrigger"
            Command='/bin/echo -en "Got ${Match}" >>${OUTPUT}'>
      <Repeat Number="3" During="2.0" Action="Repeat"/>
    </Action>
    <Action Name="Repeat"
            Command='/bin/echo "Repeated ${Action}" >>${OUTPUT}'>
    </Action>
  </Actions>
</Sensor>

.......................................

Processing
----------
.Init
 * Parse the arguments and the configuration file
 * Check the expansion of each rule (variables) and store the actions in a
unique list (by name)
 * Store the rules in a dynamic list (history is a circular queue), check
time format, regular expression, and that the referenced action exists
 * Arm a periodical time for each rule (user data being the position in list)

.When a timer expires:
 * Retrieve the rule
 * Extract the tail of the file then filter the past seconds of the file,
and then search the lines matching the regex
 * For each matching line, if found in the history then drop it,
otherwise store it in the history
 * If within latency since previous match of this rule then drop it,
otherwise expand and execute the action (on all these lines together)
 * Store these occurences of the action (one for each matching line),
purge old occurences, check if this action is repeated too often and trigger
associated "repeat" action (potentially several times).

