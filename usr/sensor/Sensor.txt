Sensor
======
Version: V3.2

Sensor scans several log files and raises alerts on some events (matching
filters).

Syntax and configuration
------------------------
...............................................................
sensor <configuration file> | -h | --help | -v | --version
...............................................................

The XML configuration file defines several rules. +
Each rule has a unique name and executes a predefined shell command. The
definition of a command can refer to some variables of the form
'${variable}'. The following variable names are automatically defined:

- $\{Match} : Lines of the log that match the filter
- $\{Time} : Date and time at ISO format (YYyy-Mm-DdTHh:Mm:Ss.mmm)
- $\{Host}: Local host name

All the other variables must be defined in the environment, otherwise this is
an error. +
 +
The configuration file then defines filters. Each filter consists in:

- the name of the file to scan
- an optional scanning period in seconds (default 60.0, min 1.0)
- an optional tail size to scan (default 100 lines, 0 for infinite)
- an optional number of past seconds to scan (default 1 hour, 0 for infinite)
and the format of time in the file
- an history of alerts to store (default 100)
- the name of the rule to execute
- the criteria (regular expression) to match

Example:
.......................................

<?xml version="1.0" encoding="Utf-8"?>
<!DOCTYPE Sensor SYSTEM "Sensor.dtd">
<Sensor>
  <Rules>
    <Rule Name="RootLogin">echo -n "${Match}" >> /root/log/login</Rule>
  </Rules>
  <Filters>
    <Filter File="/var/log/auth.log" Rule="RootLogin">
      <Past Seconds="3600">%b %d %H:%M:%S</Past>
      <Criteria>pam_unix\((su|sshd):session\): session opened for user root by</Criteria>
    </Filter>
  </Filters>
</Sensor>

.......................................

Processing
----------
.Init
 * Parse the argument and the configuration file
 * Check the expansion of each rule (variables) and store the rules in a
unique list (by name)
 * Store the filters in a dynamic list (history is a circular queue), check
time format, regular expression, and that the referenced rule exists
 * Arm a periodical time for each filter (user data being the position in list)

.When a timer expires:
 * Retrieve the filter
 * Extract the tail then filter the past seconds of the file, and then search
the regex
 * If found, check each line of the result versus the history
 * If not found, store in the history
 * Execute the rule if some matches

