<?xml version="1.0"?>
<!DOCTYPE chats SYSTEM "chats.dtd">
<!-- Example of TCP chat script, used for testing -->

<chats Version="&Version;">
  <!-- HTTP 0.9: Send file -->
  <!-- HTTP 1.0 or 1.1: Skip noise, send header + file -->
  <chat Name="http"
        Crit="GET ((http:/)?/(localhost|${$HOSTNAME}))?([^ ]+)( +HTTP/1\.(0|1))?"
        Regexp="true"
        Assign="File=${4} Vers=${5}"
        TimeoutMs="&None;">
    <cond>
      <if Expr="${Vers}" Crit="">
        <!-- No vers => 0.9 -->
      </if>
      <else>
        <!-- Vers 1.x => skip inputs until empty line -->
        <set Variable="Done" Expr="false"/>
        <while Expr="${Done}" Crit="false">
          <select TimeoutMs="1000">
            <expect Crit="">
              <set Variable="Done" Expr="true"/>
            </expect>
            <default>
            </default>
          </select>
        </while>
        <!-- And send header -->
        <eval Variable="Size">
          <command>ls -al ${File} | awk '{printf "%s",$5\}'</command>
          <error>
            <set Variable="Size" Expr=""/>
          </error>
        </eval>
        <cond>
          <if Expr="${Size}" Crit="">
            <send>HTTP/1.0 404 Not Found</send>
            <close/>
          </if>
        </cond>
        <eval Variable="Date">
          <command>echo -n `date "+%a, %d %b %Y %H:%M:00 %Z"`</command>
        </eval>
        <set Variable="Server_Id" Expr="tcpchat/V&Version;"/>
        <send>HTTP/1.0 200 OK</send>
        <send>Date: ${Date}</send>
        <send>Server: ${Server_Id}</send>
        <send>Connection: close</send>
        <send>Accept-Ranges: bytes</send>
        <send>Content-Length: ${Size}</send>
        <send>Content-Type: text/plain</send>
        <send></send>
      </else>
    </cond>
    <call>
      <command>cat ${File}</command>
      <error>
        <cond>
          <if Expr="${Vers}" Crit="">
          </if>
          <else>
            <send>HTTP/1.0 404 Not Found</send>
          </else>
        </cond>
      </error>
    </call>
    <close/>
  </chat>

  <!-- Tcping: Send pong or tcpong. Remain connected -->
  <chat Name="tcping" Crit="(tc)?ping" Regexp="true" Assign="Tc=${1}"
        TimeoutMs="1_000">
    <send NewLine="false">${Tc}pong</send>
  </chat>

  <!-- TEST wait then close -->
  <chat Name="testWaitClose" Crit="close">
    <wait DelayMs="1000"/>
    <close/>
  </chat>

  <!-- TEST simulate a ppp login chat user side -->
  <chat Name="testPpp1" Crit="ppp1">
    <send>AT</send>
    <read TimeoutMs="5_000" Crit="OK"/>
    <send>ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0</send>
    <read TimeoutMs="5_000" Crit="OK"/>
    <send>ATDT0860922000</send>
    <select TimeoutMs="60_000">
      <expect Crit="BUSY|ERROR|NO CARRIER|VOICE|NO DIAL ?TONE|NO ANSWER|DELAYED"
              Regexp="true">
        <close/>
      </expect>
      <expect Crit="CONNECT( [0-9]+)?" Regexp="true">
        <read TimeoutMs="30_000" Crit=".ogin" Regexp="true"/>
        <send>malaise</send>
        <read TimeoutMs="10_000" Crit=".{4\}word" Regexp="true"/>
        <send>${$PASSWORD}</send>
        <send>Working: Please wait...</send>
        <wait DelayMs="5_000"/>
        <send>Done. Please logout.</send>
        <read TimeoutMs="10_000" Crit="logout"/>
        <close/>
      </expect>
    </select>
  </chat>

  <!-- TEST simulate a ppp login chat modem side -->
  <chat Name="testPpp2" Crit="ppp2">
    <read Crit="AT"/>
    <send>OK</send>
    <read Crit="ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0"/>
    <send>OK</send>
    <read Crit="ATDT0860922000"/>
    <wait DelayMs="21_000"/>
    <send>CONNECT 56000</send>
    <wait DelayMs="10_000"/>
    <send>login</send>
    <read Crit="malaise"/>
    <send>password</send>
    <read Crit="${$PASSWORD}"/>
    <send>Working: Please wait...</send>
    <wait DelayMs="5_000"/>
    <send>Done. Please logout.</send>
    <read TimeoutMs="10_000" Crit="logout"/>
    <close/>
  </chat>

  <!-- TEST multiple select -->
  <chat Name="testMulti" Crit="testMulti"
        InputDefaultTimeoutMs="None">
    <send></send>
    <select>
      <expect Crit="login">
        <send>me</send>
        <select>
          <expect Crit="password">
            <send>pass</send>
          </expect>
          <expect Crit="PASSWORD">
            <send>PASS</send>
          </expect>
          <default>
            <close/>
          </default>
        </select>
        <wait DelayMs="10"/>
        <send>ls</send>
      </expect>
      <expect Crit="LOGIN">
        <send>ME</send>
        <read Crit="PASSWORD"/>
        <send>PASS</send>
      </expect>
    </select>
    <wait DelayMs="1_000"/>
    <close/>
  </chat>

  <!-- TEST a login -->
  <chat Name="login" Crit="login" TimeoutMs="60_000">
    <set Variable="Count" Expr="0"/>
    <set Variable="Res" Expr="try"/>
    <while Expr="${Res}" Crit="try">
      <!-- Get login and password, set RES=loggedin if OK -->
      <send>login:</send>
      <read Crit=".*" Regexp="true" Assign="User=${0}"/>
      <send>password:</send>
      <read Crit=".*" Regexp="true" Assign="Passwd=${0}"/>
      <cond>
        <if Expr="${User}" Crit="malaise">
          <cond>
            <if Expr="${Passwd}" Crit="${$PASSWORD}">
              <set Variable="Res" Expr="success"/>
            </if>
          </cond>
        </if>
      </cond>
      <!-- Increment counter if not OK, failed if maximum reached -->
      <cond>
        <if Expr="${Res}" Crit="try">
          <set Variable="Count" Expr="{Count}+1" Compute="true"/>
          <cond>
            <if Expr="${Count}" Crit="5">
              <set Variable="Res" Expr="failure"/>
            </if>
          </cond>
        </if>
      </cond>
    </while>
    <!-- Put result -->
    <cond>
      <if Expr="${Res}" Crit="success">
        <send>User ${User} logged in</send>
        <log>User ${User} logged in</log>
      </if>
      <else>
        <send>Login failed</send>
        <log>Login failed</log>
        <set Variable="User" Expr=""/>
        <close/>
      </else>
    </cond>
  </chat>

  <!-- TEST a logout -->
  <chat Name="logout" Crit="logout">
    <set Variable="User" Expr="" OnlyIfNotSet="true"/>
    <cond>
      <if Expr="${User}" Crit="">
      </if>
      <else>
        <send>User ${User} logged out</send>
        <log>User ${User} logged out</log>
      </else>
    </cond>
    <wait DelayMs="500"/>
    <close/>
  </chat>

  <!-- TEST an indirection ($$) -->
  <chat Name="Indirect" Crit="indirect">
    <set Variable="V1" Expr="Content1"/>
    <set Variable="V2" Expr="Content2"/>
    <select TimeoutMs="1_000">
      <expect Crit=".*" Regexp="true" Assign="Index=${0}">
        <assign Variable="Index" Expr="${Index}+1" Compute="true">
          <error>
            <send>ERROR</send>
            <wait DelayMs="100"/>
            <close/>
          </error>
        </assign>
        <assign Variable="Result" Expr="${V${Index}}">
          <error>
            <send>ERROR</send>
            <wait DelayMs="100"/>
            <close/>
          </error>
        </assign>
        <send>${Result}</send>
      </expect>
      <default>
        <send>IMPOSSIBLE</send>
      </default>
      <timeout>
        <send>TIMEOUT</send>
      </timeout>
    </select>
    <close/>
  </chat>

  <!-- TEST an error handler of chdir -->
  <chat Name="error1" Crit="error1">
    <chdir Dir="Unknown">
      <error>
        <send>error-handler-1</send>
      </error>
    </chdir>
    <wait DelayMs="500"/>
    <close/>
  </chat>

  <!-- TEST an error handler of chdir -->
  <chat Name="error2" Crit="error2">
    <chdir Dir="Unknown">
      <error>
        <send>error-handler-2</send>
      </error>
    </chdir>
    <send>after-error-2</send>
    <wait DelayMs="500"/>
    <close/>
  </chat>

  <!-- TEST the parse instruction -->
  <chat Name="parse" Crit="parse ?(.*)" Regexp="true" Assign="STR=${1}">
    <parse Compute="true"
           Expr="${STR}"
           Assign="V1=${1} V2=${3} V3=${5} V4=${7} V5=${9}"
           >([^ ]*)( ([^ ]*))?( ([^ ]*))?( ([^ ]*))?( ([^ ]*))?.*</parse>
    <!-- Loop on all non empty Vi or up to V5 -->
    <set Variable="Index" Expr="0"/>
    <set Variable="Max" Expr="5"/>
    <set Variable="Done" Expr="false"/>
    <while Expr="${Done}" Crit="false">
      <set Variable="Index" Compute="true" Expr="${Index}+1"/>
      <set Variable="Res" Expr="${V${Index}}"/>
      <cond>
        <if Expr="${Res}" Crit="">
          <!-- Vi is empty -->
          <set Variable="Done" Expr="true"/>
        </if>
        <else>
          <send>${Res}</send>
        </else>
      </cond>
      <cond>
        <if Expr="${Index}" Crit="${Max}">
          <!-- Max is reached -->
          <set Variable="Done" Expr="true"/>
        </if>
        </cond>
    </while>
    <close/>
  </chat>

</chats>

