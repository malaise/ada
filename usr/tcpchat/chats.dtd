<?xml version="1.0" encoding="UTF-8"?>
<!-- DTD of a chats file of tcpchat

  A File containts several chats.
  Each chat is made of a sequence of statements, which are either sentences to
   read or to send, waiting statements...
  A chat has a unique name. It can define global timeout for its execution
   (default infinite) and a default timeout for all its statements when an
   input is expected: chats, select, read, skip (default infinite).
  A chat starts by a "expect" statement. It defines a regexp that will lead
   this chat script to be selected if the input string matches the regexp.
  Once the chat is selected it follows a script made of instructions:
   - select: A select is like a sub-chat but with no name nor attibute. It
     allows selecting a subscript according to the reception of a matching
     sentence. If the select has a default entry, it is selected when the
     sentence does not match any expected string.
   - cond: execute a sub-chat on condition (variable matching a criteria)
   - repeat: loop executing a chat while a condition is true
   - read: Read next sentence and check that it mathes the one provided.
   - skip: Read next sequence whatever it is.
   - send: Send the sentence provided.
   - wait: Wait the specified delay.
   - call: Call the shell to execute the command and arguments provided. Send
     the output flow of the command.
   - eval: Call the shell to execute the command and arguments provided. Set a
     variable to the output flow of the command.
   - chdir: Change current directory until another chdir or until the current
     script ends. Note that an empty argument leads to move back to the original
     directory when tcpchat has been launched.
  When a subscript reaches its end, the execution continues at the instruction
   that follows the instruction that leads to this subscript (if any).
  A chat script ends on either:
   - a close statement: Close current connection, reset variables and current
     dir, and go back expecting a chat script selection.
   - nothing else to do: Keep connection open and go back expecting a chat
     script selection. Variables and current dir are not reset. The chat
     timeout, if any, remains active until a new chat is selected.

  The following situations lead to the termination (closure as on instruction
   "close") of current script:
   - The expiration of the timeout global to the chat script.
   - The expiration of the timeout on the whole chats selection, on a select,
      on a read or on a skip.
   - The reception of a non expected string by a read.
   - The reception of a non expected string by a chats-expect or a
      select-expect when it has no default.
   - A transmission error (closure, overflow).
   - The failure when calling or executing an external command if there is no
     "error" block to handle the failure.

  Variables:
   - Assignments (after chat, read or expect) have the form "VAR=... VAR=..."
   - References have the form ${name} where:
     - ${0} denotes the full string matching the regexp
     - ${1} to ${9} denote the substrings (matching "(...)" int the regexp)
     - ${$name} denotes ENV variables
     - Internal variables names cannot be numbers nor start by "$" nor contain
       "="
     - Set with Compute converts an expression (possibly refering to variables)
       to an integer and back to a string stored in a variable
     - Set and Eval with IfUnset will set the variable only if it is not
       set yet
     - If, elsif and while may raise error, return true or false depending on
       IfUnset
   Any occurence of "${" or "}" that does't denote a variable must be
    backslashed.
-->

<!ENTITY % boolean "(true|false)">

<!ENTITY None "None">

<!ENTITY % TimeoutMs "TimeoutMs CDATA #IMPLIED">

<!ENTITY % Regexp "Regexp %boolean; 'false'">

<!ENTITY % IfUnset "(true|false|error) 'error'">

<!ENTITY % Variable_Set "Variable CDATA #REQUIRED">
<!ENTITY % Variable_Ref "Variable CDATA #REQUIRED
                        %Regexp; IfUnset %IfUnset;">

<!ENTITY % ReadDef "%Regexp; Assign CDATA #IMPLIED">

<!ENTITY % error "(error,script)">

<!ELEMENT chats (chat,script)+>
<!ELEMENT chat (#PCDATA)>
<!ATTLIST chat Name ID #REQUIRED
               %TimeoutMs;
               InputDefaultTimeoutMs CDATA #IMPLIED
               %ReadDef;>
<!ELEMENT script ((select|cond|repeat|read|skip|wait|send|call|set|eval|chdir
                   |log)*,close?)>

<!ELEMENT select ((expect,script)+,(default,script)?)>
<!ATTLIST select %TimeoutMs;>
<!ELEMENT expect (#PCDATA)>
<!ATTLIST expect %ReadDef;>
<!ELEMENT default EMPTY>

<!ELEMENT cond ((if,script),(elsif,script)*,(else,script)?)>
<!ELEMENT if (#PCDATA)>
<!ATTLIST if %Variable_Ref;>
<!ELEMENT elsif (#PCDATA)>
<!ATTLIST elsif %Variable_Ref;>
<!ELEMENT else EMPTY>

<!ELEMENT repeat (while,script)>
<!ELEMENT while (#PCDATA)>
<!ATTLIST while %Variable_Ref;>

<!ELEMENT read (#PCDATA)>
<!ATTLIST read %TimeoutMs;
               %ReadDef;>
<!ELEMENT skip EMPTY>
<!ATTLIST skip %TimeoutMs;>
<!ELEMENT wait EMPTY>
<!ATTLIST wait DelayMs CDATA #REQUIRED>
<!ELEMENT send (#PCDATA)>
<!ATTLIST send NewLine %boolean; "true">
<!ELEMENT call (command,%error;?)>
<!ELEMENT command (#PCDATA)>
<!ELEMENT error EMPTY>
<!ELEMENT eval (command,%error;?)>
<!ATTLIST eval %Variable_Set; IfUnset %boolean; "false">
<!ELEMENT set (#PCDATA)>
<!ATTLIST set %Variable_Set; Compute %boolean; "false"
              IfUnset %boolean; "false">
<!ELEMENT chdir (dir,%error;?)>
<!ELEMENT dir (#PCDATA)>
<!ELEMENT log (#PCDATA)>
<!ELEMENT close EMPTY>

