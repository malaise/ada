<?xml version="1.0" encoding="UTF-8"?>
<!-- DTD of a chats file of tcpchat

  A File containts several chats.
  Each chat is made of a sequence of statements, which are either sentences to
   read or to send, waiting statements...
  A chat has a unique name. It can define global timeout for its execution
   (default infinite) and a default timeout for all its statements when an
   input is expected: chats, select, read, skip (default infinite).
  A chat starts by a "expect" statement. It defines a regexp that will lead
   this chat script to be selected if the input string matches the regexp.
  Once the chat is selected it follows a script made of instructions:
   - select: A select is like a sub-chat but with no name nor attibute. It
     allows selecting a subscript according to the reception of a matching
     sentence. If the select has a default entry, it is selected when the
     sentence does not match any expected string.
   - read: Read next sentence and check that it mathes the one provided.
   - skip: Read next sequence whatever it is.
   - send: Send the sentence provided.
   - wait: Wait the specified delay.
   - call: Call the shell to execute the command and arguments provided. Send
     the output flow of the command.
  When a subscript reaches its end, the execution continues from the instruction
   that follows the select that lead to this subscript (if any).
  A chat script ends on either:
   - a close statement: Close current connection and go back expecting a chat
     script selection.
   - nothing else to do: Keep connection open and go back expecting a chat
     script selection. The chat timeout, if any, remains active until a new
     chat is selected.

  The following situations lead to the termination (closure) of current
     script:
      - The expiration of the timeout global to the chat script.
      - The expiration of the timeout on the whole chats selection, on a select,
        on a read or on a skip.
      - the reception of a non expected string by a read.
      - The reception of a non expected string by a chats-expect or a
        select-expect when it has no default.
      - A transmission error (closure, overflow).
      - The failure when calling or executing an external command.
-->

<!ENTITY % boolean "(true|false)">
<!ENTITY None "None">

<!ENTITY % ReadDef "Regexp %boolean; 'false'
                    Assign CDATA #IMPLIED">

<!ELEMENT chats (chat,script)+>
<!ELEMENT chat (#PCDATA)>
<!ATTLIST chat Name ID #REQUIRED
               TimeoutMs CDATA #IMPLIED
               InputDefaultTimeoutMs CDATA #IMPLIED
               %ReadDef;>
<!ELEMENT script ((select|read|skip|wait|send|call)*,close?)>
<!ELEMENT select ((expect,script)+,(default,script)?)>
<!ATTLIST select TimeoutMs CDATA #IMPLIED>
<!ELEMENT expect (#PCDATA)>
<!ATTLIST expect %ReadDef;>
<!ELEMENT default EMPTY>
<!ELEMENT read (#PCDATA)>
<!ATTLIST read TimeoutMs CDATA #IMPLIED
               %ReadDef;>
<!ELEMENT skip EMPTY>
<!ATTLIST skip TimeoutMs CDATA #IMPLIED>
<!ELEMENT wait EMPTY>
<!ATTLIST wait DelayMs CDATA #REQUIRED>
<!ELEMENT send (#PCDATA)>
<!ATTLIST send NewLine %boolean; "true">
<!ELEMENT call (#PCDATA)>
<!ELEMENT exec (#PCDATA)>
<!ELEMENT close EMPTY>

