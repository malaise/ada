#!/bin/bash

# Force UTF-8 mode
export ASUBST_UTF8=Y

# Display current version
type asubst
asubst --version

# Play scenario
export STEP="Test scenario"
./player Scenario
if [ $? -ne 0 ] ; then
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."
echo ""

# Various file names, reference (in), expected result
#  tested (in/out), list, saved
export FR=tstfile.ref
export FE=tstfile.exp
export FT=tstfile.tst
export FL=tstfile.lst
export FS=tstfile.tst.asu

# Initial cleanup of files
rm -rf $FS Temp_File.*

# Make reference in file and result
# Will remove both "------" and the linefeed before Test
echo "Package body Pack is" > $FR
echo "Package body Pack is" > $FE
echo "" >> $FR
echo "" >> $FE
echo "  ----------" >> $FR
echo "  -- Test --" >> $FR
echo "  -- Test --" >> $FE
echo "  ----------" >> $FR
echo "" >> $FR
echo "  procedure Test is" >> $FR
echo "  procedure Test is" >> $FE
echo "  begin" >> $FR
echo "  begin" >> $FE
echo "    null" >> $FR
echo "    null" >> $FE
echo "  end T;" >> $FR
echo "  end T;" >> $FE
echo "" >> $FR
echo "" >> $FE
echo "end Pack;" >> $FR
echo "end Pack;" >> $FE

# Substit from file list with no backup
STEP="File substitution from file list"
cp $FR $FT
echo $FT > $FL
res=`asubst -f "^(  )*--.*\n(  )*--.*\n(  )*--.*\n\n" "\R03\n" $FL`
code=$?
# Check exit code and that result is expected
if [ $code -ne 0 ] ; then
  echo "Error: asubst exited with code $code"
  echo "$STEP FAILED."
  exit 1
fi
cmp -s $FT $FE
if [ $? -ne 0 ] ; then
  echo "Result file $FT differs from expected $FE."
  echo "$STEP FAILED."
  exit 1
fi
if [ "$res" != "$FT" ] ; then
  echo "Asubst generated wrong output $res. Expected $FT."
  echo "$STEP FAILED."
  exit 1
fi
if [ -f $FS ] ; then
  echo "Unexpected backup $FS found."
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."

# Substit with backup
STEP="File substitution with backup"
rm -rf $FS
cp $FR $FT
res=`asubst -s "^(  )*--.*\n(  )*--.*\n(  )*--.*\n\n" "\R03\n" $FT`
code=$?
# Check exit code and result is expected
if [ $code -ne 0 ] ; then
  echo "Error: asubst exited with code $code"
  echo "$STEP FAILED."
  exit 1
fi
cmp -s $FT $FE
if [ $? -ne 0 ] ; then
  echo "Result file $FT differs from expected $FE."
  echo "$STEP FAILED."
  exit 1
fi
if [ "$res" != "$FT" ] ; then
  echo "Asubst generated wrong output $res. Expected $FT."
  echo "$STEP FAILED."
  exit 1
fi
if [ ! -f $FS ] ; then
  echo "Backup file $FS not found."
  echo "$STEP FAILED."
  exit 1
fi
cmp -s $FS $FR
if [ $? -ne 0 ] ; then
  echo "Backup file $FS differs from reference $FR."
  echo "$STEP FAILED."
  exit 1
fi
if [ -f "Temp_File.*" ] ; then
  echo "Found remaining temorary files " Temp_File.* "."
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."

# File substitution in test mode
STEP="Substitution in test mode"
rm -rf $FS
cp $FR $FT
res=`asubst -t "^(  )*--.*\n(  )*--.*\n(  )*--.*\n\n" "\R03\n" $FT`
code=$?
# Check exit code and result is expected
if [ $code -ne 0 ] ; then
  echo "Error: asubst exited with code $code"
  echo "$STEP FAILED."
  exit 1
fi
cmp -s $FT $FR
if [ $? -ne 0 ] ; then
  echo "Result file $FT differs from expected $FR."
  echo "$STEP FAILED."
  exit 1
fi
if [ "$res" != "$FT" ] ; then
  echo "Asubst generated wrong output $res. Expected $FT."
  echo "$STEP FAILED."
  exit 1
fi
if [ -f "Temp_File.*" ] ; then
  echo "Found remaining temorary files " Temp_File.* "."
  echo "$STEP FAILED."
  exit 1
fi
res=`echo toto | asubst -t o i`
if [ "$res" != "toto" ] ; then
  echo "Result $res differs from expected toto."
  echo "$STEP FAILED."
  exit 1
fi
# Stdin substitution in test mode
exp="\ntoto\ntiti\ntata"
res=`echo -e "$exp" | asubst -t "toto\ntiti" "\u\R01\R02\R03"`
exp=`echo -e "$exp"`
if [ "$res" != "$exp" ] ; then
  echo "Result $res differs from expected."
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."

# Substitution with a "--"
STEP="Substitution with --"
res=`echo "t_o..T'I" | asubst "--"  "[\T]" "-"`
if [ "$res" != "t-o--T-I" ] ; then
  echo "Result $res differs from expected."
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."

# Grep mode
STEP="Grep mode"
rm -rf $FS
cp $FR $FT
# Check multiple regexp grep
res=`asubst -gl " is\n" "" $FT`
code=$?
if [ $code -ne 0 ] ; then
  echo "Error: asubst exited with code $code"
  echo "$STEP FAILED."
  exit 1
fi
exp_res=`echo -e "tstfile.tst:1:Package body Pack is\n\ntstfile.tst:7:  procedure Test is\n\n"`
if [ "$res" != "$exp_res" ] ; then
  echo "Result $res differs from expected."
  echo "$STEP FAILED."
  exit 1
fi
# Check mono regexp grep
res=`asubst -g " is" "" $FT`
if [ $code -ne 0 ] ; then
  echo "Error: asubst exited with code $code"
  echo "$STEP FAILED."
  exit 1
fi
exp_res=`echo -e "tstfile.tst:Package body Pack is\ntstfile.tst:  procedure Test is\n"`
if [ "$res" != "$exp_res" ] ; then
  echo "Result $res differs from expected toto."
  echo "$STEP FAILED."
  exit 1
fi
cmp -s $FT $FR
if [ $? -ne 0 ] ; then
  echo "Result file $FT differs from expected $FR."
  echo "$STEP FAILED."
  exit 1
fi
# Check grep with exclusion
res=`asubst -g "--exclude=Pack\sis" " is" "" $FT`
if [ $code -ne 0 ] ; then
  echo "Error: asubst exited with code $code"
  echo "$STEP FAILED."
  exit 1
fi
exp_res=`echo -e "tstfile.tst:  procedure Test is\n"`
if [ "$res" != "$exp_res" ] ; then
  echo "Result $res differs from expected toto."
  echo "$STEP FAILED."
  exit 1
fi
cmp -s $FT $FR
if [ $? -ne 0 ] ; then
  echo "Result file $FT differs from expected $FR."
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."

# Exit codes
STEP="Exit codes"
asubst -g > /dev/null 2>&1
code=$?
if [ $code != 2 ] ; then
  echo "Error: asubst exited with code $code instead of 2"
  echo "$STEP FAILED."
  exit 1
fi
asubst "[is" "is" $FT > /dev/null 2>&1
code=$?
if [ $code != 2 ] ; then
  echo "Error: asubst exited with code $code instead of 2"
  echo "$STEP FAILED."
  exit 1
fi
echo "That is the question" | asubst -g "[Tt]his" "" > /dev/null 2>&1
code=$?
if [ $code != 1 ] ; then
  echo "Error: asubst exited with code $code instead of 1"
  echo "$STEP FAILED."
  exit 1
fi
echo "That is the question" | asubst -g "[Tt]h.*is" "" > /dev/null 2>&1
code=$?
if [ $code != 0 ] ; then
  echo "Error: asubst exited with code $code instead of 0"
  echo "$STEP FAILED."
  exit 1
fi
echo "$STEP OK."

# Cleanup test files
rm -rf $FR $FT $FS $FE $FL
echo "Test OK."

