with TEXT_IO; -- For exception trace
with TEXT_HANDLER, ARGUMENT, MY_IO;

with GRID_1;
procedure TG1 is
  KEY : constant STRING := ARGUMENT.GET_PARAMETER(1);
  TEXT : TEXT_HANDLER.TEXT(500);
  DUMMY : TEXT_HANDLER.TEXT(80);
  CODE : TEXT_HANDLER.TEXT(TEXT.MAX_LEN*2);
  REC : GRID_1.COORDINATE_REC;
begin

  TEXT_HANDLER.SET(TEXT, "");
  for I in 2 .. ARGUMENT.GET_NBRE_ARG loop
    ARGUMENT.GET_PARAMETER(DUMMY, I);
    TEXT_HANDLER.APPEND (TEXT, DUMMY);
    if I /= ARGUMENT.GET_NBRE_ARG then
      TEXT_HANDLER.APPEND (TEXT, " ");
    end if;
  end loop;

  GRID_1.INITIALIZE(KEY);
  MY_IO.PUT_LINE ("Key : " & KEY);
  GRID_1.DUMP;
  MY_IO.NEW_LINE;


  MY_IO.PUT_LINE ("Text : " & TEXT_HANDLER.VALUE(TEXT));
  TEXT_HANDLER.SET (CODE, "");
  for I in 1 .. TEXT_HANDLER.LENGTH(TEXT) loop
    REC := GRID_1.ENCODE (TEXT_HANDLER.VALUE(TEXT)(I));
    TEXT_HANDLER.APPEND (CODE, REC.ROW);
    TEXT_HANDLER.APPEND (CODE, REC.COL);
  end loop;
  MY_IO.PUT_LINE ("Code : " & TEXT_HANDLER.VALUE(CODE));

  TEXT_HANDLER.SET (TEXT, "");
  for I in 1 .. TEXT_HANDLER.LENGTH(CODE) loop
    if I mod 2 = 1 then
      REC.ROW := TEXT_HANDLER.VALUE(CODE)(I);
    else
      REC.COL := TEXT_HANDLER.VALUE(CODE)(I);
      TEXT_HANDLER.APPEND (TEXT, GRID_1.DECODE(REC));
    end if;
  end loop;
  MY_IO.PUT_LINE ("Text : " & TEXT_HANDLER.VALUE(TEXT));


end TG1;
