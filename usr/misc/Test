#!/bin/bash

# Automatic tests of misc

# Cleanup
function clean {
  rm -f cmp res out err expout experr
  rm -rf tmp
}
trap 'echo ""; clean; exit 1' SIGINT SIGTERM

if [ "$1" = "clean" ]  ; then
  clean
  exit 0
fi

# Error message
function error {
  echo
  echo $* 2>&1
  exit 1
}

# Compare 2 files
function comp {
  local ok=1
  if [ $1 = "-n" ] ; then
    ok=0
    shift
  fi
  cmp $1 $2 2> /dev/null
  res=$?
  if [ $ok -eq 1 ] ; then
    if [ $res -ne 0 ] ; then
      error "File $1 differs from expected $2."
    fi
  else
    if [ $res -eq 0 ] ; then
      error "File $1 should differs from expected $2."
    fi
  fi
}

trap 'echo ""; clean; exit 1' SIGINT SIGTERM


# One test of compression / uncompression
# cmpr_one [ -v ] <algo> <file>
function cmpr_one {
  export OPT=""

  # Verbose option
  export VERBOSE=0
  if [ "$1" = "-v" ] ; then
    export VERBOSE=1
    shift
  fi

  # Compression algo
  if [ "$1" = "--lzf" ] ; then
    CMPR="azf -s 900"
    shift
  elif [ "$1" = "--lz4" ] ; then
    CMPR="azf --lz4 -s 900"
    shift
  elif [ "$1" = "--snappy" ] ; then
    CMPR="azf --snappy -s 900"
    shift
  elif [ "$1" = "--lz4l" ] ; then
    CMPR="alz4l -s 3072"
    shift
  fi
  local file=$1

  # Compress file
  if [ $VERBOSE -eq 1 ] ; then
    echo -n $CMPR $file 
  fi
  cat $file | $CMPR -c > cmp
  if [ $? -ne 0 ] ; then
    echo
    echo "$CMPR -c $file has failed." 2>&1
    exit 1
  fi

  # Compression rate
  let ISIZE=0+`ls -l $file | cut -d ' ' -f 5` 
  let CSIZE=0+`ls -l cmp   | cut -d ' ' -f 5` 
  if [ $VERBOSE -eq 1 ] ; then
    if [ $ISIZE -eq 0 ] ; then
      echo " 0"
    else
      let PER=\($ISIZE-$CSIZE\)*100/$ISIZE
      echo " "$PER"%"
    fi
  fi

  # Uncompress
  cat cmp | $CMPR -d > res
  if [ $? -ne 0 ] ; then
    echo
    echo "$CMPR -d on $file has failed." 2>&1
    exit 1
  fi

  # Compare
  cmp $file res 2>/dev/null
  res=$?
  if [ $res -ne 0 ] ; then
    echo
    echo "File res differs from original $file." 2>&1
    exit 1
  fi
}

# Specific option to do one compression on several files
if [ \( "$1"  = "--lzf" \) -o \( "$1"  = "--lz4" \) \
  -o \( "$1"  = "--snappy" \) -o \( "$1"  = "--lz4l" \) ] ; then
  algo=$1
  shift
  for file in $* ; do
    cmpr_one -v $algo $file
  done
  clean
  exit
fi

# Specific option to do all compressions on several files
if [ "$1"  = "--all" ] ; then
  shift
  for file in $* ; do
    for algo in lzf lz4 snappy lz4l ; do
      cmpr_one -v --$algo $file
    done
    echo ""
  done
  clean
  exit
fi

# All compressions
if [ \( -z "$1" \) -o \( "$1" = "compress" \) ] ; then
  echo "compression"
  # Azf on lzf, lz4 and snappy, and then lz4l
  for file in `ls *.ads *.adb lib/*` ; do
    echo -n "$file "
    for algo in lzf lz4 snappy lz4l ; do
      cmpr_one --$algo $file
    done
  done
  echo ""
  echo "OK"
  echo ""
fi

# arbipas
if [ \( -z "$1" \) -o \( "$1" = "arbipas" \) ] ; then
  echo arbipas 10
  res=`arbipas 10 | tail -1`
  exp=" 10: 1 10 45 120 210 252 210 120 45 10 1 "
  if [ "$res" != "$exp" ] ; then
    error "arbipas 10 shows $res instead of $exp."
  fi
  echo "OK"
  echo ""
fi

# astat
if [ \( -z "$1" \) -o \( "$1" = "astat" \) ] ; then
  echo astat on a file with '*.adb'
  ls *.adb >cmp
  res=`astat -l cmp | tail -1 | awk '{print $4}'`
  exp=`wc -l *.adb | tail -1 | awk '{print $1}'`
  if [ $res != $exp ] ; then
    error "astat find $res lines instead of $exp."
  fi
  echo astat on '*.*'
  res=`astat *.ad* | tail -1 | awk '{print $4}'`
  exp=`wc -l *.ad* | tail -1 | awk '{print $1}'`
  if [ $res != $exp ] ; then
    error "astat find $res lines instead of $exp."
  fi
  echo "OK"
  echo ""
fi

# comp_vars
if [ \( -z "$1" \) -o \( "$1" = "comp_vars" \) ] ; then
  # Comp_vars with SET_ME set
  echo "comp_vars with SET_ME"
  export SET_ME=Momo
  comp_vars < variables.xml >out 2>err
  cat > expout << EOF
<?xml version="1.1"?>
<Variables>
  <Var Name="V1" Type="Int">5</Var>
  <Var Name="PATH" Type="Str">$PATH:/usr/local/bin</Var>
  <Var Name="V2" Type="Int">125</Var>
  <Var Name="V3" Type="Str">5*125</Var>
  <Var Name="V4" Type="Str"></Var>
  <Var Name="V2" Type="Int">1250</Var>
  <Var Name="Fail" Type="Str">Momo</Var>
</Variables>
EOF
  echo -n > experr
  comp out expout
  comp err experr

  # Comp_vars without SET_ME set
  echo "comp_vars without SET_ME"
  unset SET_ME
  comp_vars < variables.xml >out 2>err
  cat > experr << EOF 
Error: Environ variable SET_ME not found.
Error processing input flow at line 15 on node Var:
Unknown variable while evaluating variable.
EOF
  comp err experr
  echo "OK"
  echo ""
fi

# copy_files
if [ \( -z "$1" \) -o \( "$1" = "copy_files" \) ] ; then
  echo "copy_files"
  # Move files from lib to tmp
  mkdir tmp 2>err
  ls lib/* >expout 2>>err
  cat expout | copy_files -m - tmp >/dev/null 2>>err
  rmdir lib 2>>err
  # Copy them back to lib
  mkdir lib 2>>err
  ls tmp/* | copy_files - lib >/dev/null 2>>err
  ls lib/* >out 2>>err
  # Compare content of lib
  comp out expout
  # No error
  echo -n "" >experr
  cmp err experr
  echo "OK"
  echo ""
fi

echo clean
clean

