Xml_Checker
===========

Parser version: V35.1 +
Generator version: V15.0 +
Xml_checker version: V19.2 +
Dtd_checker version: V4.0

Xml_checker is a XML parser that checks the syntax (versus DTD) and formats the
output.

Syntax
------
...................................................
xml_checker[ { <option> } ] [ { <file> } ]
 <option> ::= <silent> | <progress> | <dump> | <raw> | <width> | <one> |
            | <expand> | <keep> | <namespace> | <canonical> | <normalize>
            | <check_dtd> | <warnings> | <tree> | <update_mix> | <copytree>
            | <help> | <version>
 <silent>     ::= -s | --silent    : No output, only exit code
 <progress>   ::= -p | --progress  : Only show a progress bar
 <dump>       ::= -D | --dump      : Dump expanded Xml tree
 <raw>        ::= -r | --raw       : Put all on one line
 <width>      ::= -W <Width> | --width=<Width>
                                   : Put attributes up to Width
 <one>        ::= -1 | --one       : Put one attribute per line
 <expand>     ::= -E | --expand    : Expand general entities
                                   :  and attributes with default
 <keep>       ::= -k <c|d|n|a> | --keep=<comments|cdata|none|all>
                                   : Keep comments
                                   : Keep CDATA sections unchanged
                                   : Keep none (remove comments and CDATA
                                   :  markers)
                                   : Keep all (default)
 <namespace>  ::= -n | --namespace : Put Namespace^Suffix
 <canonical>  ::= -C | --canonical : Canonicalize xml
 <normalize>  ::= --no-normalize   : Do not normalize attributes and text
 <check_dtd>  ::= -d <Dtd> | --dtd=<Dtd>
                                   : Use a specific dtd or none
 <warnings>   ::= -w | --warnings  : Check for warnings
 <tree>       ::= -t | --tree      : Build tree then dump it
 <update_mix> ::= -m | --mixed     : Update Mixed tag in tree
 <copytree>   ::= -c | --copytree  : Copy the tree and dump the copy
 <help>       ::= -h | --help      : Put this help
 <version>    ::= -v | --version   : Put versions
...................................................
All options except expand, keep, dtd, warnings, namespace, tree and copytree are
exclusive.

Output format
~~~~~~~~~~~~~
anchor:Silent[]-s | --silent: :: for no output at all. The xref:Exit[exit
code] indicates success or failure.

anchor:Progress[]-p | --progress: :: for only output a progress bar like this:

  |-------------------------------------------------|
  |=================================
+
then exit.
+
Note that after the parsing and the completion of the progress bar,
xml_checker performs the check that all the IDREFs are defined as IDs, which
may take a significant time that is not monitored.
+
Note that it is not possible to monitor the progress in "xref:Tree[tree]" mode,
so these options are exclusive.

anchor:Dump[]-D | --dump: :: for a dump of the line numbers, of XML structure and "Mixed"
information, example:

  Prologue:
  00000001 - - xml : version=1.1
  00000002 - -  <!-- Definition of variables for test of program "comp_vars" -->
  00000003 - -  =><=
  00000004 - -  <!-- After Doctype -->
  Elements:
  00000006 - - Variables
  00000007 - -  <!-- Below root -->
  00000008 M -  Var : Name=V1 Type=Int
  00000008 - M   =>5<=
+
A 'M' in first column indicates that the field has Mixed content while in
second column it denotes a field that is part of a Mixed content (they are not
exclusive).
+
Note that this options is incompatible with the xref:Expand[expand] option and
with the xref:Keep[keep] option. Dump implies to keep all as is.

-r | --raw: :: for a XML output, all on one line (no indentation and no line
feed).

-W <Width> | --width=<Width>: :: for limiting the number of attributes per
line to up to <Width> columns. Default format is ''-W 80''.

-1 | --one : :: for a XML output with at most one attribute per line.

Transformations
~~~~~~~~~~~~~~~
anchor:Expand[]-E | --expand: :: for expand general entities and expand
attributes with their default value (if they have).

anchor:Keep[]-k c|d|n|a | --keep=comments|cdata|none|all: :: for keep comments,
or keep CDATA sections unchanged, or keep none (remove comments and CDATA
markers) or keep all unchanged, which is the default.

-n | --namespace: :: for namespace checks and expansion. Add checks that the
input flowflow is namespace-well-formed and namespace-valid (see 
http://www.w3.org/TR/REC-xml-names) and expand namespaces as
'<namespace>^<suffix>.' +
This option always expand, so it is exclusive with option xref:Expand[expand].

anchor:Canonical[]-C | --canonical: :: for canonicalization of the XML (see
http://www.w3.org/TR/xml-c14n). This option only allows options dtd, warnings
and keep-comments. +
It expands, removes CDATA markers, does xref:Normalize[not normalize], does not
expand namespaces and by default removes comments. It is not supported in
xref:Tree[tree] mode.

anchor:Normalize[]--no-normalize: :: for no normalization of attributes and
text. By default the text is normalized and, if the xref:Expand[expand] option
is set, the attributes are normalized as well. +
This option forces no normalization of the text and of the expanded attributes.

Checks
~~~~~~
-d [ <Dtd> ] | --dtd=[<Dtd>]: :: for check with a specific DTD file.
Use this option to set the DTD if the XML file has no DOCTYPE or to overwrite
the DOCTYPE directive. You ca use ''-d ""'' or ''--dtd=""'' to force discarding
the DOCTYPE directive.

anchor:Warnings[]-w | --warnings: :: for check and report warnings. The warnings
that can be reported are:
 * multiple definition of the same ATTLIST (=> definitions are merged),
 * ATTLIST for unknown element (=> not used),
 * multiple definition of the same attribute for an element (=> new definition
is discarded),
 * multiple definition of the same ENTITY (=> new definition is discarded),
 * reference to a child that is not defined (=> child is not useable),
 * inconsistency between the EMPTY definition of an element in DTD and the use of
empty element tag (<element/>) in XML.

Other options
~~~~~~~~~~~~~
anchor:Tree[]-t | --tree: :: By default xml_checker sets a callback that the
XML parser invokes for each element that it finds.
With this option the XML parser builds the complete tree then xml_checker
iterates on the tree and displays its content.
+
Note that this option is not recommended for big files. It is not compatible
with canonical mode or progress bar.
+
Please also consider increasing the process stack size (ulimit -s) to
avoid stack overflow and Storage_Error, especially in this mode.

anchor:CopyTree[]-c | --copytree: :: In xref:Tree[tree] mode, copy the tree
that results from the parsing into a new tree (using the
xref:Generator[generator]) and dump this new tree (usefull to test the
xref:Generator[generator]).

-m | --mixed: :: When there is no Dtd, the XML parser tries to guess if an
element is mixed by checking if its first child is text. This option forces a
global scan of the tree so that this information is updated for each element,
taking into account all its children.
+
Note that the children of an element re-tagged as mixed, have been parsed
without the information that they were part of a mixed element, so line-feeds
and indentation have been skipped. Now they will be displayed with the new
information that the element is mixed, so line-feeds and indentation will not
be generated.

-h | --help: :: for put online help.

-v | --version: :: for put versions of the Xml_Parser, the Xml_Parser.Generator
(see xref:XmlParser[XML parser and generator]) and Xml_checker.

Behavior
--------

Inputs
~~~~~~
Xml_checker takes 0, 1 or several arguments to specify the XML flow to process.

With no argument xml_checker processes stdin. An empty argument ("") also
denotes stdin.

When one or several files are provided xml_checker processes these files one
after another.

Output
~~~~~~
Xml_checker outputs the xref:Dump[dump] or the formatted XML text on stdout.
In xref:Silent[silent] mode there is no output at all. In
xref:Progress[progress] mode there is just a progress bar.

It outputs xref:Warnings[warnings] (if activated) and errors on stderr.

Exit code
~~~~~~~~~
anchor:Exit[]Xml_checker exits with 0 if no error is detected and with 1 otherwise
(xref:Warnings[warnings] don't affect the exit code).

anchor:XmlParser[] Use of XML parser and generator
--------------------------------------------------
.XML parser
Xml_checker uses a standalone package (Xml_Parser) to parse the XML flow.

This parser has the following limitations versus the XML standards 1.0
and 1.1 (see http://www.w3.org/TR/REC-xml and
http://www.w3.org/TR/2006/REC-xml11-20060816):

- Only the System Id of the DOCTYPE and of external parsed ENTITY is used,
Public Id (if any) is skipped.
- Only the local file, the "file://" and the "http://" schemes are supported
in URIs (otherwise it raises parsing error).
- Only UTF-8, UTF-16 and ISO-8859-1 encodings are natively supported.
Some other encodings may be handled by defining the environment variable
XML_PARSER_MAP_DIR to where Byte_To_Unicode can find the mapping file
named <ENCODING>.xml (in uppercase, ex: ISO-8859-9.xml). This file maps each
byte code (from 0 top 255) to a Unicode number and must have the format:

  <?xml version="1.0" encoding="UTF-8"?>
    <Map>
      <Code Byte="16#00#">16#0000#</Code>
      ...
      <Code Byte="16#FF#">16#00FF#</Code>
   </Map>

On option the parser provides partial support for XML namespaces
(see http://www.w3.org/TR/2009/REC-xml-names-20091208). Namespaces are not
checked for validity of URI references.

anchor:Generator[]

.XML generator
Xml_checker also uses a XML generator that is a child package of Xml_Parser
(Xml_Parser.Generator) to build the formatted XML output of the tree or of
each node. The generator is not used in 'Dump' and in 'Canonical' modes. 

With xref:CopyTree[copytree] option, Xml_checker also uses the XML generator to
build the copy of the tree.

.Default behavior
By default xml_checker invokes the XML parser in callback mode (to allow large
files and specific options), and with options that ensure that the output is
the same as the input except the formatting (indentation of elements
and attributes). +
On the other hand the parser by default provides the caller with a tree, where
the comments and CDATA markers are removed, where entities are expanded, and
where attributes are initialized with their default values. This is the most
convenient for an application that wants to process the content of the XML
file. +
The following table summarizes the defaults of Xml_Checker (and Generator) and
of Xml_Parser. The differences are highlighted:
[width="75%", options="header"]
|=========================================================
| Option         | Xml_Parser default   | xml_cheker default
| File name      | None, ("" for stdin) | Stdin
| Comments      s| False               s| True
| Cdata         s| Remove markers      s| Keep markers
| Expand        s| True                s| False
| Normalize      | True                 | True
| Use Dtd        | True                 | True
| Dtd file       | ""                   | ""
| Namespace      | False                | False
| Warnings       | False                | False
| Callback/Tree s| Tree                s| Callback
| Format         | Fill width           | Fill width
| Width          | 80                   | 80
|=========================================================
In order to trigger the default behaviour of the parser, xml_checker shalled
be called with options: +
'--tree --keep=none --expand'

.Canonicalization
As explained about xref:Canonical[canonical] option, xml_checker supports
canonicalization of XML documents. It invokes the XML parser with fixed options:
'remove CDATA makers', 'expand', 'normalize', 'no namespace' and with a
specific 'callback'. This callback performs the XML canonicalization, for which
the output format is fixed. So xml_checker does not use the generator in this
mode.

DTD checker
-----------
Dtd_Checker is a standalone tool that checks a DTD file for errors and on
option for warnings.
...................................................
dtd_checker [ -w | --warnings ] [ <dtd_file> ]
...................................................

By default dtd_checker only checks for errors in the DTD.
With the option "-w" or "--warnings" it also reports the same
xref:Warnings[warnings] as xml_checker (except inconsistencies between EMPTY
definition and empty tag).

If no file or an empty argument is provided then dtd_checker parses stdin.

Dtd_checker exits with 0 if no error is detected and with 1 otherwise
(warnings don’t affect the exit code).

