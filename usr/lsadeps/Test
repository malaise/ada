#!/bin/bash

function error {
  echo "ERROR: $1" 1>&2
  exit 1
}


function check {

  lsadeps $1 > res1
  if [ $? -ne 0 ] ; then
    error "lsadeps $1 has failed"
  fi
  if [ -n "$2" ] ; then
    lsadeps $2 > res2
    if [ $? -ne 0 ] ; then
      error "lsadeps $2 has failed"
    fi
    expected="res2 of $2"
  else
    expected=expected
  fi
  cmp -s res1 res2
  if [ $? -ne 0 ] ; then
    error "Result res1 of $1 differs from $expected"
  else
    echo "lsadeps $1 and $expected OK."
    rm res1 res2
  fi
}

# Simple options
check "lsadeps" "-l"

# Files
check "-f lsadeps" "-laf"

# Dependancy between 2 units
cat << EOF > res2
Lsadeps
  Sort
EOF
check "lsadeps sort"

# Fast dependancy between 2 units
cat << EOF > res2
Lsadeps
  Sourcer
    Sort
EOF
check "-F lsadeps sort"

# Tree dependancy between 2 units
cat << EOF > res2
Lsadeps
  Checker
    Sourcer
      Sort
Lsadeps
  Output
    Sort
Lsadeps
  Output
    Tree_Mng
      Sourcer
        Sort
Lsadeps
  Output
    Sourcer
      Sort
Lsadeps
  Sort
Lsadeps
  Tree_Mng
    Sourcer
      Sort
Lsadeps
  Sourcer
    Sort
EOF
check "-t lsadeps sort"

# Unit that exists
cat << EOF > res2
Lsadeps
EOF
check "-l lsadeps"

# Unit that does no exist
echo -n "lsadeps -l Toto"
lsadeps -l Toto >/dev/null 2>&1
res=$?
if [ $res -ne 1 ] ; then
  echo
  error "Exit code $res differs from expected 1"
fi
echo " exit code OK."

# List files and subunits
cat << EOF > res2
lsadeps.adb
lsadeps-add_paths.adb
EOF
check "-lfa lsadeps"

# List Unit and child units
cat << EOF > res2
Lsadeps
EOF
check "-lC lsadeps"

# Revert dependancies
cat << EOF > res2
Lsadeps
Output
Sort
Sourcer
EOF
check "-r sort"

# Direct
cat << EOF > res2
Sourcer
Tree_Mng
EOF
check "-d tree_mng"

# Check
export CHKDIR=Check.dir
if [ -d $CHKDIR ] ; then
  rm -rf $CHKDIR
fi
mkdir $CHKDIR

cat << EOF | awk -v DIR=$CHKDIR '
  ($1 == "##") {FILE=$2; next}
  {printf $0 "\n" >> DIR"/"FILE}'
## unit1.ads
private with Unit3;
limited with Unit4;
package Unit1 is
  procedure Proc;
end Unit1;

## unit1.adb
with Unit3;
package body Unit1 is
  procedure Proc is
  begin
    null;
  end Proc;

  package Subunit is
  end Subunit;
  package body Subunit is separate;
end Unit1;

## unit1-subunit.adb
with Unit3;
with Unit4;
separate (Unit1)
package body Subunit is
end Subunit;

## unit1-child1.ads
with Unit3;
limited with Unit4;
private package Unit1.Child1 is
end Unit1.Child1;

## unit1-child2.ads
with Unit3;
private with Unit4;
package Unit1.Child2 is
end Unit1.Child2;

## unit1-child3.ads
private package Unit1.Child3 is
end Unit1.Child3;

## unit2.ads
with Unit3;
private with Unit3;
with Unit1.Child2;
package Unit2 is
  procedure Proc;
end Unit2;

## unit2.adb
package body Unit2 is
  procedure Proc is
  begin
    null;
  end Proc;
end Unit2;

## unit2-child.ads
with Unit3;
private with Unit1;
package Unit2.Child is
end Unit2.Child;

## unit3.ads
package Unit3 is
end Unit3;

## unit4.ads
package Unit4 is
end Unit4;

## main.adb
with Unit1, Unit2.Child, Unit3, Unit4;
procedure Main is
begin
  null;
end Main;

EOF

# Check correct compilation
cd $CHKDIR
gnatmake main.adb unit1-child*.ads >/dev/null 2>&1
if [ $? -ne 0 ] ; then
  gnatmake main.adb unit1-child*.ads
  exit 1
fi
cd ..

# Check redundant with
lsadeps -c $CHKDIR > $CHKDIR/res
cat << EOF > $CHKDIR/exp
Unit Unit1.Subunit#SU withes Unit3 already withed by parent Unit1#UB
Unit Unit1.Subunit#SU withes Unit3 already withed by parent Unit1#US
Unit Unit1.Child1#US withes Unit3 already withed by parent Unit1#US
Unit Unit1.Child1#US withes Unit4 already withed by parent Unit1#US
Unit Unit2#US withes twice Unit3
Unit Unit2#US withes twice Unit3
Unit Unit2.Child#US withes Unit1 while its parent Unit2#US withes Unit1.Child2
Unit Unit1#UB withes Unit3 already withed by parent Unit1#US
EOF

cmp -s $CHKDIR/res $CHKDIR/exp
if [ $? -ne 0 ] ; then
  error "Result res of $1 differs from exp"
else
  echo "lsadeps -c OK."
  rm -rf $CHKDIR
fi

