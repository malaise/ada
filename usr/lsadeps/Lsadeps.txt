lsadeps
=======
V15.00

Lsadeps lists ada dependencies between files or units, optionally in reverse
order. +
Alternatively it lists units of a directory +
Alternatively it checks redundant "with" clauses between specs and bodies.

Modes and inputs
----------------
There are three main functions: Show dependencies, list units, and check
redundant "with". +
Usage: lsadeps <version> | <help> | <depend> | <list> | <check>

 <version>     ::= -v | --version
 <help>        ::= -h | --help
 <depend>      ::= <options> <target_unit> [ <path_unit> ]
 <target_unit> ::=  [<path>/]<unit>
 <options>     ::=  [ <specs> | <revert> ] [ <tree> [ <tab> ] | <fast> | <direct> | <once> ] [ <files> ] [ <bodies> ] [ <restrict> ] [ <inclusions> ]
 <specs>       ::= -s | --specs
 <revert>      ::= -r | --revert
 <tree>        ::= -t | --tree
 <tab>         ::= -T <size> | --tab=<size>
 <fast>        ::= -F | --fast
 <direct>      ::= -d | --direct
 <once>        ::= -o | --once
 <files>       ::= -f | --files
 <bodies>      ::= -b | --bodies
 <restrict>    ::= --restrict
 <inclusions   ::= { <include> | <recursive> | <exclude> }
 <dir>         ::= -I <dir_path> | --include=<dir_path>
 <recursive>   ::= -R <dir_path> | --recursive=<dir_path>
 <exclude>     ::= -E <pattern> | --exclude=<pattern>
 <list>        ::= -l | --list  [ <file> ] [ <all> ] [ <children> [ <path_unit> ]
 <all>         ::= -a | --all
 <children>    ::= -C | --children
 <check>       ::= -c | --check  [ <target_dir> ]

Show dependencies
~~~~~~~~~~~~~~~~~
.Modes
This function by default lists the units on which <target_unit> depends,
which are the withed units, their body and subunits, units withed by these
units... recursively. +
This behaviour can be changed by the following mode modifiers (some of them
can be combined):

- 'specs' to show only units withed by specs and standalone bodies.

- 'revert' to show units depending on <target_unit>, which are its child
units, the units that with <target_unit> in their spec or body, the units that
with (in their spec or body) a unit dependant by its spec... recursively.

- 'path_unit' to show dependency paths between <target_unit> and <path_unit>.

.Options
Besides, the following options are available:

- 'tree' to show the full tree of dependencies (instead of a sorted unique
list).

- 'tab' in tree mode to put a vertical tab '|' every <size> level. Default is
3 and 0 disables tabs).

- 'fast' to fast scan and show the first dependency tree between <target_unit>
and <path_unit>.

- 'direct' to show only the units that are directly dependent (no recursion).

- 'once' to show a tree where the dependencies of each unit are expanded only
once.

- 'file' to show the file names (instead of unit names).

- 'bodies', in revert mode to also show the units that depend from each other
by "with" in the body. +
By default, in 'revert' mode, if unit A is withed by the body of B (and
not by its spec), then the units withing B are not dependant from A in term of
compilation, so they are not listed. Option 'bodies' leads to list all the
revert dependencies.

- 'restrict' to skip restricted with ("private with", "limited with" and
"limited private with"), which provides a logical view of the dependencies.

- 'inclusions' to add some directories or some directory trees to the search
path. +
By default, the files are searched only in the current directory, in the
directory of <target_unit>, and in the directory of <path_unit> (if it is set).
The following options allow extending the search path:
  * 'include': adds an individual directory to the search path,
  * 'recursive': adds a directory and each of its subdirectories to the search
path,
  * 'exclude': adds a pattern of directory name (name with possible \'?' and
\'*' wildcards) to the list of exclusions: Any directory in a 'recursive' search
(including the root path provided as argument) that has its name matching an
entry of the exclusion list is skipped, and its subdirectories as well.

+
Individual 'include' paths are not checked for exclusion. +
'include' and 'recursive' must specify directory paths (absolute or
relative), while 'exclude' must specify templates of simple directory names
(no \'/').

.Compatibility of options and modes
'Specs' and 'revert' modes are mutually exclusive. +
'Tree' and 'direct' options are mutually exclusive. +
'Fast' and 'tree' options are mutually exclusive. +
'path_unit' mode and 'direct' option are mutually exclusive. +
'bodies' option is allowed only in 'revert' mode

.Tree optimizations
When the the option 'tree' is set, then the hole the whole tree of
dependancies is built and displayed, which might be very time-consuming.

When the option 'tree' is not set, then the analysis of dependencies
is optimized so that the same unit is not analyzed several times. +
For example, the option 'once' uses this optimization, and the dependencies of
each unit are displayed only once.

When the option 'path_unit' is set: +
 - The 'tree' option leads to build and display the whole tree of dependancies
between target_unit and path_unit, which might be very time-consuming. +
 - The default behaviour triggers internally the 'tree' mode with an
optimization that keeps the shortest ways found so far and does not explore
longer ways, which is far more efficient than building the full tree. This
leads to display all the ways that have the same minimum depth. +
 - The 'fast' option leads to even better optimize the scan so that each unit
is analysed only once. This leads to display the first way found, which is not
necessarily the shortest.

List units
~~~~~~~~~~
This function lists:

 * the units (including child units but not subunits) of the
current directory if no <path_dir> is provided,
 * or the units (same as above) of <path_unit> if it denotes a directory,
 * or only the unit <path_unit> if it denotes a unit.

The possible options are:

 - 'children' to list also the children of the specified unit,
 - 'file' to show the file names (instead of unit names),
 - 'all' to also list the subunits (of all or of the specified unit).

Files are searched only in the directory of <path_dir> (in current directory if
no <path_dir> is provided).

Check redundant "with"
~~~~~~~~~~~~~~~~~~~~~~
This function shows redundant "with" clauses in a dir (default: current
dir), which are:

 - A body that withs a unit while this unit or a child is already withed by
the spec,
 - A subunit that withs a unit while this unit or a child is already withed by
the spec or the body,
 - A child unit that withs a unit while this unit or a child is already withed
by one of its parents. +

The check of redundancy also considers the 'limited' and 'private' "with"
directives. +
For example: if the unit Unit spec contains 'private with U' then a child of
Unit can contain 'with U', but neither the body of Unit, nor its subunits nor a
private child unit of Unit can. +
Other example: if a unit contains 'private with U', then it can also contain
'limited private with U.Child' but not 'with U.Child'.

This function does not support any option (even includes), only one optional
'target' directory.

Ada language selection
~~~~~~~~~~~~~~~~~~~~~~
The files are parsed according to the default Ada language version 'Ada2012',
but the environment variable 'LSADEPS_LANGUAGE' can be set to 'Ada83', 'Ada95'
'Ada2005' or 'Ada2012' to tune the logic of the parsing.

Source file names
~~~~~~~~~~~~~~~~~
Lsadeps relies on GNAT file naming conventions for the names of the Ada source
files:

  <unit>{[("-"|"~")<child_or_subunit>]}".ad"("s"|"b")

Format of output
----------------

Results are put on stdout.

Show dependencies
~~~~~~~~~~~~~~~~~
In the dependency function, local units are listed first, then "remote" ones in
the order of the include directives and they are sorted by alphabetical order.
With the tree and direct options, the units appear in the same order as in the
"with" directives.

A local unit, if any exists, hides all the remote ones.

Example: suppose that a unit U withes a unit W.

- in normal (non revert) mode all remote units W are discarded if there is a
unit W co-located with U.

- in revert mode, a remote unit W withing unit U is discarded if there is
another unit U co-located with W.

- if there is no co-located unit then all the remote units with the same name
are processed identically (they are all considered to depend on, or to be
dependent from the current unit).

Lsadeps exits with 1 on error, and with 0 otherwise.

List units
~~~~~~~~~~
If <path_unit> denotes a directory, then all the units of the directory are
listed, one per line, in alphabetical order (by default not the subunits).
Otherwise the specified unit is listed (by default not its subunits).

If <path_unit> denotes a unit, option -C lists it and its child units.

Optionally the subunits are listed after each unit.

Alternatively, the corresponding files, specification then body (then,
if specified, the files of the subunits), are listed.

Lsadeps exits with 1 on error, including when no unit could be found,
and with 0 otherwise.

Check redundant "with"
~~~~~~~~~~~~~~~~~~~~~~
This function checks that no redundant "with" clause appear in the body and
sub-units of each unit.

It reports redundancy with messages like: +
"'Unit <unit> withes <withed> already withed by parent <unit>'", +
- where <unit> is the path of the unit, followed by '#', then either 'US' (Unit
Spec), 'UB' (Unit Body) or 'SU' (SubUnit) +
- and <withed> is the name of the redundant withed unit.

Example:

  Unit lsadeps/Output#UB withes Sourcer already withed by parent lsadeps/Output#US

Lsadeps exits with 1 if at least one redundant "with" is detected or on
error, and with 0 otherwise.

Examples of use
---------------

What are the local units needed to build (compile and link) 'Unit'
--------------------
  lsadeps Unit (or lsadeps unit)
--------------------

What are the units, including those of the repository, needed to build 'Unit'
--------------------
  lsadeps -I ~/ada/reposit Unit
--------------------

What are all the files needed to build 'Unit'
--------------------
  lsadeps -f -I ~/ada/reposit Unit
--------------------

How does 'Unit1' need 'Unit2'
--------------------
  lsadeps Unit1 Unit2
--------------------

What are all the units that will be re-compiled due to a modification of
'Unit' spec
--------------------
  lsadeps -r -R ~/ada/usr Unit
--------------------

What are all the units that depend, directly or not, on 'Unit', skip
directories containing compilation result
--------------------
  lsadeps -rb -R ~/ada/usr -E 'lib*' Unit
--------------------

Check redundant "with" in the current directory
--------------------
  lsadeps -c
--------------------

Check if the unit 'Unit' exists in current dir
--------------------
  lsadeps -l Unit >/dev/null 2>&1; echo $?
--------------------

List all files of '../ada/Unit' and its subunits
--------------------
  lsadeps -lfa ../ada/Unit
--------------------

List Unit and all its child units
--------------------
  lsadeps -lC Unit
--------------------

High level design
-----------------
Parse and check arguments
~~~~~~~~~~~~~~~~~~~~~~~~~
- in dependency mode, target is a unit (possibly containing a path). An
optional path_unit triggers the path analysis between the target and this unit

- include dirs (recursive or not) must exist

- in check mode it is an optional path that denotes the directory to check

Parse ada sources
~~~~~~~~~~~~~~~~~
List and parse all ada sources in current and included dirs. For each file,
store in a list:

- kind: UnitSpec/UnitBody/SubUnit (US/UB/SU)

- Unit_Name, Mixed_Str.

- Path of the unit (directory where it is located)

- File name

- StandAlone indicator, boolean, if spec without body or body without spec

- Unit_Name of parent (if child spec, child body or subunit)

- List of withed unit names: @\Name@Name...@

- List of used unit names: @\Name@Name...@

- List of subunits names (if body or subunit): @\Name@Name...@

- List of the child units of this unit

"Path/Unit_Name#Kind" is the unique access key.  A spec, its body and its
subunits must be collocated in the same directory.

No check that withed units exist but check that target is listed (as spec or
standalone body). Also store in a list, for each Unit_Name, the list of
paths where such unit exists.

Check redundant "with"
~~~~~~~~~~~~~~~~~~~~~~
For each unit build the tree of its parents (sub-unit -> body -> spec and if
spec is a child, list its praent units) and for each unit make the list of its
withed units.

For each unit U check that no withed unit W is withed twice by U or by a
parent of U, including indirect with of a child of W. Note that a redundant
"with" context clause is necessary (so accepted) in case of a "use" context
clause!

Exit program.

Build dependency tree
~~~~~~~~~~~~~~~~~~~~~
If in normal (not reverse) mode, start from target, process dependencies
recursively in this order:

  unit - ParentUnit
       - WithsOfSpec
       - WithsOfBody
       - WithsOfSububits

If in "specs only" mode don't insert body and subunits.

If in reverse mode, build a tree of:

  unit - WihtingUnit

If not in tree mode, keep a list of the PathUnit found so far and skip the
processing of a unit if it is already known. In shortest mode, keep a list
of units and best level found so far.

Stop recursive search when reaching a non-standalone body or a subunit.

Display output
~~~~~~~~~~~~~~
In unit mode, only show specs and standalone bodies, otherwise (file mode)
show all entries.

Iterate on tree:

In tree mode
^^^^^^^^^^^^
Dump the tree:

  UnitSpec - WithsSpecs - WithsSpecs...
           - ParentSpec - WithsSpecs...
           - UnitBody - WithsSpecs...
                      - Subunits - WithSpecs...

In shortest mode
^^^^^^^^^^^^^^^^
Put only the the branches that have (the same) minimal length.

In direct mode
^^^^^^^^^^^^^^
Dump the first level of tree:

  UnitSpec - WithsSpecs
           - UnitBody

In list mode
^^^^^^^^^^^^
Dump the tree in a list.

Sort it by unit/file path (local first).

In case of file revert mode, list each unit by spec+body+subunits.

In path mode
^^^^^^^^^^^^
Keep track in a list of the units between target and current unit.

When current unit is path_unit then show the current list.

