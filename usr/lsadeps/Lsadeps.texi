\input texinfo.tex    @c -*-Lsadps-*-
@c %**start of header
@setfilename Lsadeps
@settitle Lsadeps
@c %**end of header

@c Constants
@set name lsadeps
@set version V5.0
@set nameversion @value{name} @value{version}

@c General format
@paragraphindent none
@exampleindent 0

@c Title and front page
@node Top
@ifhtml
@center @titlefont{@value{nameversion}}
@end ifhtml
@ifnothtml
@top @center @value{nameversion}
@end ifnothtml

Lsadeps lists ada dependencies between files or units, optionnally in reverse order.@*
Alternatively it checks redundants "with" clauses between specs and bodies.
@menu
* Usage::             Command line arguments.
* Output::            Format of output.
* Design::            High level design.
@end menu

@node Usage, Output, Top, Top
@chapter Command line arguments

@verbatim
Usage: lsadeps [ <display> ] [ <revert> ] [ <file_mode> ] [ <dirs> ] <target>
   or: lsadeps <check> [ <path> ]
   or: lsadeps -v | --version | -h | --help
  <display>       ::= <list> | <tree> // Default: list
    <list>        ::= -l | --list     // List dependencies
    <tree>        ::= -t | --tree     // Tree of dependencies
  <revert>        ::= -r | --revert   // List units depending on target
                                      //   i.o. units withed by target
  <file_mode>     ::= -f | --files    // Show files i.o. units
  <dirs>          ::= { <include_dir> | <recursive_dir> }
  <include_dir>   ::= -I <dir> | --include=<dir>   // Include <dir>
  <recursive_dir> ::= -R <dir> | --recursive=<dir> // Include <dir> and subdirs
  <target>        ::= <unit>
  <check>         ::= -c | --check    // Detects redundant withs in a dir
@end verbatim

@node Output, Design, Usage, Top
@chapter Format of output
There are two main functions: list dependancies and check redundant "with"
@section List dependancies
There are 2 different modes of output of dependancies:
@itemize @minus
@item default mode: list parent units then withed units of target...
@item tree: show tree of dependencies (parents and withed units)
@end itemize

With option "file", lists the files (specs/bodies/sub-units) instead of units.@*
With option "revert", list all the [<path>/]<unit> that with (directly
or not) the <target>, which must be a unit. The search ends when reacing a withing
non-standalone body or a subunit.@*
@sp 1
In list mode local units are listed first, then "remote" ones in the order of the
include directives and they are sorted by alphapbetical order.
In tree mode the units appear in the same order as in the "with" directives.
@sp 1
By default the search is restricted to local directory and target directory, but
additional directories can be added to search path, either individually or
recursively.
@sp 1
A local unit, if any exists, hides all the remote ones.@*
Example: suppose that a unit U withes a unit W.@*
In normal (non revert) mode all remote units W are discarded if there is a
unit W co-located with U.@*
In revert mode, a remote unit W withing unit U is discarded if there is another
unit U co-located with W.@*
If there is no co-located unit then all the remote units with the same name are
processed identically (they are all considered to depend on or to be dependent
from current unit).
@section Check redundant "with"
This funtion checks that no redundant "with" clause appear
in the body and sub-units of each unit.@*
Lsadeps then exits with 1 if at least one redundant "with" is detected
and with 0 otherwise.

@node Design, , Output, Top
@chapter high level design
@section Parse and check arguments
@itemize @minus
@item in non check mode target is a unit (possibly containing a path) 
@item in check mode it is an optional path that denotes the directory to check
@item include dirs (recursive or not) must exist
@end itemize

@section Parse ada sources
List and parse all ada sources in current and included dirs. For each file,
store in a list:
@itemize @minus
@item kind: UnitSpec/UnitBody/SubUnit (US/UB/SU)
@item Unit_Name, Mixed_Str.
@item Path of the unit (directory where it is located)
@item File name
@item StandAlone indicator, boolean, if spec without body or body without spec
@item Unit_Name of parent (if child spec, child body or subunit)
@item List of withed unit names: @@Name@@Name...@@
@item List of used unit names: @@Name@@Name...@@
@item List of subunits names (if body or subunit): @@Name@@Name...@@
@end itemize
@*
"Path/Unit_Name#Kind" is the unique access key.
A spec, its body and its subunits must be colocated.@*
No check that withed units exist but check that target is listed (as spec or
standalone body).
Also store in a list, for each Unit_Name, the list of paths where such unit exists.

@section Check redundant "with"
For each unit build the tree of its parents (sub-unit -> body -> spec) and for
each unit make the list of its withed units.@*
For each unit U check that no withed unit W is withed twice by U or by a parent of U, 
including indirect with of a child of W. Note that a redundant "with" context
clause is acceptable in case of a "use" context clause.@*
Exit program.

@section Build tree
If in normal (not reverse) mode, start from target, process dependancies
recursively in this order:
@verbatim
unit - ParentUnit
     - WithsOfSpec
     - WithsOfBody
     - WithsOfSububits
@end verbatim
If in reverse mode, build a unique list of units that list targets, of units that list these
units. Stop recursive search when reaching a non-standalone body or a subunit.

@section Display output
In unit mode, only show specs and standalone bodies, otherwise (file mode) show
all entries.@*
Iterate on tree:

@subsection In tree mode
Dump the tree:
@verbatim
UnitSpec - UnitBody - Subunits - WithSpecs
                    - WithsSpecs...
         - ParentSpec - WithsSpecs...
         - WithsSpecs - WithsSpecs...
@end verbatim
@subsection In list mode
Dump the tree in a list.@*
Sort it by unit/file path (local first).@*
In case of file revert mode, list each unit by spec+body+subunits.

@bye

