Agite user guide
================
V8.4

General purpose
---------------
Agite (Ada GIT Editor) is a graphical front end of the 'Git' configuration
management tool.
It is directory-oriented.

Major functions are navigation in directories and history, file status and
graphical diff.

It relies on 'git gui' for committing and pushing local changes.

anchor:XCommandLine[]

Command line
------------
  Usage: agite [ -n | --no_history ] [ <path> | -p | --previous ]

By default Agite continuously stores the current directory in its
xref:XConfig[configuration file].
This allows restarting Agite in the same directory as when it stopped by
providing the argument '-p' or '--previous'.

On the other hand this feature is hardly compatible with several instances of
Agite running in parallel. Only one instance of the program shall save the
current directory, which is achieved by providing the argument '-n' or
'--no_history' to all the other instances.

Instead of previous directory the start-up directory can be explicitly
specified in the command line with '<path>'. If no path nor '--previous' is
specified then by default Agite starts in the current directory.

Environment variables
---------------------
AFPX_DATA_DIR::
Agite is based on Afpx screen manager, which reads the configuration files
AFPX.DSC, AFPX.FLD and AFPX.INI. Either theses files are in the current
directory at startup or the environment variable 'AFPX_DATA_DIR' must be
set to the directory containing these files.
+
Note: Agite unsets AFPX_DATA_DIR at start-up so its children don't inherit
from this setting.

AGITE_CONF_FILE::
Agite allows several settings to be defined in a 
xref:XConfig[configuration file]. By default this file is 
'$\{HOME}/.agite/agite.xml' but this can be overridden by setting the
environment variable 'AGITE_CONF_FILE' to the full path and name of the
configuration file. At least 'HOME' or 'AGITE_CONF_FILE' must be set in the
environment.

GIT_DIR::
Agite needs to know the root directory of the current Git sandbox (if any). It
finds it by locating, in current directory or above, the Git technical
directory.
By default it is named '.git' but this can be overridden by setting the
environment variable 'GIT_DIR' to the name of the Git directory.

anchor:XConfig[] 

Configuration file
------------------
User defined configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~
Agite reads at start-up some user-defined configuration parameters:

anchor:XConfXterm[]

xterm::
This defines the command to be launched when the
xref:XXterm[XTerm] button is selected. Example: 'gnome-terminal --zoom=0.9'

anchor:XConfEditor[]

editor::
This defines the command to be launched for editing a file (for example
with the xref:XEdit[Edit] button). A space and the file name will be
concatenated to this string.
+
Note: This command shall start a GUI of editor like 'gedit' or a 'xterm -e vi'.
+
Note: The editor should not return until completion so that Agite
properly refreshes the status of files when it exits.

viewer::
This defines the command to be launched for viewing a file (for example
with the xref:XView[View] button). As the xref:XConfEditor[editor] it must be a
GUI, for example 'xterm -e cat' or 'xterm -e vi -M'.

anchor:XConfDiff[]

differator::
This defines the command to be launched for performing a xref:XDiff[Diff]
between two versions of a file. Agite will launch 'git difftool -y -x
<differator> HEAD -- <file>' for the diff between current file and GIT
repository and 'git difftool -y -x <differator> <ref_rev> <comp_rev> -- <file>'
for the diff between two revisions of a file.

anchor:XConfMake[]

make::
This defines the command to be launched for local compilation with the
xref:XMake[Make] button. It shall launch a GUI. +
Example: '#xterm -e 'sh -c "make; echo -n Done.; read a"'#'

anchor:XConfPeriod[]

period::
Agite refreshes the current status of files in the xref:Xdir[directory] screen
when it starts xref:XGui[Git GUI] or xref:XEdit[Editor] and when they exit.
This is because these tools can modify the current status of local files. Still,
it is possible from a stand-alone program to also modify the list or status of
local files. This is why Agite periodically checks and redisplays the status of
local files. This parameter defines the period in seconds of this automatic
check.
+
Setting the value to 0.0 disables the feature.
+
Note: A manual refresh is always possible with the xref:XReread[Reread] button.

Agite persistent data
~~~~~~~~~~~~~~~~~~~~~
Agite also uses the configuration file to store information from one invocation
to another.

last_dir::
Agite continuously stores the current directory in this entry. See the 
xref:XCommandLine[argument] '-p' ('--previous') for how to use this feature
and the argument '-n' ('--no_history') for how to disable this feature.

bookmarks::
Agite stores the xref:XBook[bookmarks] in this section:

* blank lines have no 'Name' nor content,
* separators have a 'Name' and no content,
* bookmarks have a content and possibly a 'Name'.

*Note: The DTD file 'agite.dtd' must be located according to the ''DOCTYPE''
directive of the Agite XML configuration file.*

Agite screens
-------------
Agite is based on four main menus:

* Directory: This is the first menu at start-up. It shows the content of a
directory.
* Bookmarks:  This menu allows bookmarking directories and quickly jumping
to a bookmark
* History: This shows the Git history of a file or directory, the list of
commits that have modified the file(s).
* Details: This shows information on a commit, including the list of files
modified by the commit.

anchor:XNavigation[]
The navigation is as follows:

                        +-----------+
                /------>| Bookmarks |
  +---------- +/        +-----------+
  | Directory |
  +---------- +\        +---------+       +---------+
                \------>| History |<----->| Details |
                        +---------+       +---------+

All the screen transitions are based on the 'call-return' scheme.
So please note the double arrow between 'History' and 'Details': from the
'History' of a file (or dir) you can select a commit and see its 'Details'.
In this new screen you can select a file and see its 'History'... and so on.
Once this is done you need to "un-stack" all these menus (by clicking on
the 'Back' button in each) in order to go back to the 'Directory' menu.

anchor:XDir[]

Directory status
~~~~~~~~~~~~~~~~
The 'Directory' menu lists the git content, subdirectories and files, of
of current directory. Starting from top, the fields are:

.Environment
Title::
The first line shows in the middle the name and current version of Agite.
+
On the left is the indication of current Git branch.
+
On the right is the indication of current host (which normally is also
indicated in title of the X window of Agite).

.Directories
Root::
This line shows the root directory of the current Git sandbox. Clicking in this
fields moves current directory to the root.

anchor:XGo[]

Go::
This line shows the current directory. It also allows entering a path and going
to it by hitting the key 'Return' or clicking in th 'Go' button.

anchor:XReread[]

Reread::
Normally Agite re-scans the current directory and refreshes the list and status
when necessary, and also periodically if the feature is enabled (see
xref:XConfPeriod[period] configuration option). This button explicitly refreshes
the current display.

Dir Up::
This button allows moving up to parent directory.

Bookmarks::
This button activates the xref:XBook[Bookmarks] menu.

PushD and PopD::
These buttons allows storing the current directory ('PushD') then
allows moving back to it later on ('PopD').
+
How it works: Agite keeps a cache of two paths, D1 and D2.
'PushD' saves D1 as D2 and pushes current directory as D1,
while 'PopD' swaps D1 and D2 and moves to the new D1 (if D2 is empty then 'PopD'
makes a 'PushD' first. Note that PopD is disabled if it would lead to move to
current directory.
+
How to use it: At start-up current directory is automatically pushed and 'PopD'
is disabled. As soon as you move to another directory 'PopD' allows moving
back to the original one. Clicking on 'PusD' allows swapping between the
new pushed and the last pushed.

.List

anchor:XQuickSearch[]

Quick search::
On top of the list is a quick search area on two rows.
Clicking in any character of this area triggers a search of file
starting with this character. If found, the file becomes selected in the list
and at the top of the list area. Otherwise the selection is unchanged. +
A tick box button allows searching for directory (starting with the character
that will be clicked) instead of file.

The list::
The list shows the directories then the files of xref:XGo[current directory],
in alphabetical order.
+
Each directory starts with three spaces then the name then \'/'.
+
Each file is preceded by two characters of its Git status, local and index (see
'man git-status') then a space, then the name. Git status can be:

* ' ' = unmodified
* M = modified
* A = added
* D = deleted
* R = renamed
* C = copied
* U = updated but unmerged

+
After the name a character represents the kind: 

* ' ' fo a file, 
* '@' for a symbolic link, 
* '/' for a directory,
* '?' for other/unknown kind.

+
Only one entry is selected (in green) at a time.
+
A sigle click selects an entry for xref:XEdit[edition], 
xref:XDiff[difference] from Git reference, xref:XHistory[history] or
xref:XRevert[revert] operation.
+
A double click on a directory changes current directory to it. +
A double click on a file launches the xref:XEdit[editor] on it. +
A double click on a symbolic link makes one or the other (or nothing),
depending on the target of the link.

anchor:XNavig[]

Navigation in the list::

The simplest way to navigate in the list is to use the wheel of the mouse.
Combine it with 'Shift' for scrolling one page and with 'Ctrl' for scrolling
ten pages.
+
Another way is to use the navigation buttons 'Top', 'PgUp', 'Up',
'Down', 'PgDown' and 'Bottom'. The 'Center' button scrolls the list so that the
selected entry is as most as possible in the middle of the list area.
+
Another way is to use the keyboard: Up and Down arrows, Page Up, Page Down,
Ctrl + Page Up (for Top) and Ctrl + Page Down (for Bottom).
+
Keep in mind that the xref:XQuickSearch[quick search] is also a good way to
quickly find a file.

.Actions on current list selection
anchor:XEdit[]

Edit::
This button launches the editor (defined in the xref:XConfEditor[editor] entry
of the configuration file) on the file currently selected in the list, as a
double click on this file would do. +
It has no effect if current list selection is a directory.

anchor:XDiff[]

Diff::
*On a file*, this button launches the graphical difference tool (defined in
the xref:XConfDiff[differator] entry of the configuration file) to show the
current modifications (if any) of the selected file. It shows the differences
between the currently modified file and the version in Git HEAD. +
On a un-modified file it shows the last update of the file (the difference
introduced by the last commit involving the file).
+
*On a directory* (including './' but excluding '../'), this button launches the
difference on all the modified files of the selected directory and
of its sub-directories. +
It has no effect if the selected directory is the parent directory entry ('../')
or if there is no modified file under the selected directory.

anchor:XHistory[]

History::
This button switches to the screen that shows the xref:XHist[history] of a
file or directory.

anchor:XAdd[]

Add::
Adds to Git the current directory (its content in fact), the current file or
symbolic link.

anchor:XRevert[]

Revert::
This button reverts the local change on the current list selection. +
First, a simple screen asks to confirm or cancel the operation. +
Then, depending on the selection:

- If it is a directory then it will be deleted, which succeeds only if the
directory is empty.
- If it is a file or a symbolic link,
 * if unknown by Git, then it is removed,
 * if just added to Git, then it becomes unknown by Git,
 * if just deleted from GIT, then it is restored to its last committed content
 * if known by GIT and modified, then it is restored to its last committed
content,
 * if known by GIT and deleted, then it is restored to its last committed
content
 * if known by GIT and renamed, then the original file is restored to its last
committed content and the new one is reset as unknown by GIT

+
The Revert button has no effect on a file known by GIT and not modified.


.Other actions

anchor:XGui[]

GitGUI::
This button launches the 'git gui' command for committing and pushing local
changes.

anchor:XXterm[]

Xterm::
This button starts a X terminal by launching the command defined
in the xref:XConfXterm[xterm] entry of the configuration file.

anchor:XMake[]

Make::
This button makes a local compilation by launching the command defined
in the xref:XConfMake[make] entry of the configuration file.

Exit::
A button makes Agite exit.

anchor:XBook[]

Bookmarks
~~~~~~~~~

Locations (directories) can be bookmarked. To bookmark a directory, first move
to it in the xref:XDir[directory] menu, then go in the 'bookmark' menu, then
click in the button xref:XAdd[AddCur]. This adds the current directory in the list.
Click in xref:XBookBack[Back] to go back to the xref:XDir[directory] menu.
Later on you can open the bookmark menu and double click on the entry, or
select it and click on xref:XGoto[Goto] to go back to this directory.

Bookmarks are saved in the xref:XConfig[configuration file] so that they 
are persistent from one session to another.

The bookmark menu shows the current directory and lists the known bookmarks.
This list can contain four kinds of entry:

* Anonymous bookmarks don't have name. They contain only the path to a
directory. Example:

 /home/user/ada

* Named bookmarks are created like anonymous ones but with a name set in the
'Name to add' field when clicking in xref:XAdd[AddCur]. The name appears in
parentheses before the path of the bookmark. Example:

 (Reposit) /home/user/ada/reposit

* Separators are created by setting a name (in 'Name to Add') and clicking
in xref:XAdd[AddSep]. This creates a line with dashes and the name. Example:

 ----- Ada -----

* Blank lines can also be used to separate bookmarks. They are anonymous 
separators, created by clicking in xref:XAdd[AddSep] with no name set.

anchor:XAdd[]
The buttons 'AddCur' and 'AddSep' insert a named or anonymous entry (depending
on the field 'Name to add') below current entry.

anchor:XGoto[]
The 'Goto' button allows changing current dir to the bookmark currently
selected and switches back to the xref:XDir[directory] menu.
Double clicking on the entry has the same effect. It has no effect on a
separator.

Bookmarks and separators can be organised with the buttons 'MovUp', 'MovDwn' and
can be deleted with the button 'Del', with no confirmation.

Navigation in the list is the same as the xref:XNavig[navigation] in the
directory menu, with the mouse wheel, the keyboard and buttons.

anchor:XBookBack[]
The button 'Back' switches back to  the xref:XDir[directory] menu without
changing current directory.


History
~~~~~~~

anchor:XHist[]
This menu shows the name of the selected file and lists the history of all the
commits on current branch that have affected this file. +
The newest release (Head) is on top.

In case of a directory the menu shows the name of the directory (relative to
root) and lists the history of the commits of all the files in the directory
and in its sub-directories.

This lists follows the renamings of the file or directory.

.List
The list shows for each entry the date of the commit (format YYMMDD:HHMM)
a space then the comment of the commit.

Navigation in the list is the same as the xref:XNavig[navigation] in the
directory menu, with the mouse wheel, the keyboard and buttons.

The list can be very long, so there are several extra features on the history
list:

* The position of current page, in term of percentage of the history, is
displayed above the list,

* The indexes of left and right selection are also displayed above the list,

* A hyphen ('-') on the left side of the list indicates the current position
of the current page, as a scroll bar would do,

* You can click at a given row in this "scroll bar". The list will be moved
at the page corresponding to where you *release* the mouse button (and the
hyphen be will at this position).

anchor:XView[]

.View
Double click on an entry (a commit) or select an entry and click on the 'View'
button to view the version of the file that was committed.

When the current history is on a directory this feature is de-activated.
Still it is possible to list and view one by one the files of a commit with the
xref:XDetails[Details] menu.

anchor:XDiff1[]

.Diff
The 'Diff' button shows the differences between commits. When the history is on
a directory it applies to all the files of the directory and sub-directories
that were affected by the commit(s).

'Diff' can compare two arbitrary commits or show the changes of one commit:

* Diff between two commits. 
** Left click on an a entry of the list. It becomes green and the 'LeftSel'
above  the list shows the index of this entry from the Head.
** Right click on an a entry of the list. It becomes black and the 'RightSel'
above the list shows the index of this entry from the Head.
** Click on the 'Diff' button. This starts the xref:XConfDiff[differator] 
with the right (black) selection as reference and the left (green) selection
as the target of the difference. If the history is about a directory several
differators may be started.

* Diff of a commit.
** Ensure that there is no right selection (no entry on black and
'RightSel'= 0).
If there is one then find it and de-select it (by a right click). Alternatively 
you can right-select any entry and de-select it with a second right click on it.
** Left click on an the entry of the list. It becomes green and the 'LeftSel'
above the list shows the index of this entry from the Head.
** Click on the 'Diff' button. This starts the xref:XConfDiff[differator]
with the version before the selection as reference and the selection
as the target of the difference. If the history is about a directory several
differators may be started.

anchor:XDetail[]

.Detail
This button switches to a screen that shows the xref:XDetails[details] of the
commit currently (left-)selected in the history.

.Back
This button allows to return to xref:XDir[directory] menu.

*Note:* The history follows the the renamings of the file or directory but the
reference name (that is displayed above the history list) is used for the
xref:XView[view] and xref:XDiff1[Diff] operations.
As a consequence, Agite will fail to show a
file or a difference from a file if the entry in the history is before a
renaming. Still, it is possible to view a file that has been renamed with the
following operations:

* Select the file in the history
* Show the xref:XDetail[Details] of this commit
* Select the file in the xref:XDetails[details] of the commit
* Click on xref:XView[View] the file.

It is not possible to do a xref:XDiff1[Diff] between two versions of a file if
the file has been renamed or moved between the versions.

anchor:XDetails[]

Details
~~~~~~~
The 'Details' menu shows the details of a commit:

* The SHA-1 hash of the commit, that you can copy in the clipboard,
* The date and comment (up to three lines) of the commit, that you can
also alternatively copy in the clipboard,
* The list of all the files in the commit, each preceded by a letter:
** M Modified,
** A Added,
** D Deleted.

A specific entry '/' is added on top of the list, which represents the root of
the current sandbox. When it is selected you can click on the button 'History'
to get the full history of the sandbox or click on the button 'Diff' to get
the differator called on all the files of the commit (differences brought by
the commit).

For all other entries (files) of the list:

* Double click on the entry or select the entry and click on 'View' allows 
viewing the file as it was committed,
* Clicking on 'Hist' allows viewing the full history of the file,
* Clicking on 'Diff' allows viewing the differences between the version before
and after the commit.

Note: Clicking on 'Hist' calls a new function to show the history, as explained
in the section on xref:XNavigation[navigation].

Interfaces with Git
-------------------
This section lists the commands and arguments passed to Git. This requires git
version 1.7.0 or above:

* A function get Git version by calling 'git --version',

* A function list local files by calling 'git ls-files' and
'git status \-- porcelain .',

* A function lists the commits on local dir by calling
'git log --date=iso --topo-order \-- <pwd>',

* A function gets the details of a commit by calling
'git log --name-status --date=iso -n 1 <HSA1_hash>',

* A function extracts a given version of a file (in a commit by calling
'git show <HSA1_hash>:<file>',

* A function launches the differator on a modified file (versus Head) by
calling 'git difftool -y -x <differator> HEAD \-- <file>',

* A function lauches the differator between two versions of a file (or dir) by
calling 'git difftool -y -x <differator> <ref_HSA1> <comp_HSA1> \-- <file>',

* A function reverts the local changes of a file by calling
'git checkout HEAD \-- <file>' or 'git reset \-- <file>',

* A function gets the name of current branch by calling 'git branch',

* Finally, Agite also launches 'git gui'.

