Agite user guide
================
V17.27

General purpose
---------------
Agite (Ada GIT Editor) is a graphical front end of the 'Git' configuration
management tool.
It proposes a view directory-oriented of the files and history.

The major functions are the navigation in directories, history, file status, 
graphical diff, commit, push, pull, tags and stash.

anchor:XCommandLine[]

Command line
------------
  Usage: agite [ -n | --no_history ] [ <path> | -p | --previous ]

By default Agite continuously stores the current directory in its
xref:XConfig[configuration file].
This allows restarting Agite in the same directory as when it was stopped, by
providing the argument '-p' or '--previous' at start-up.

On the other hand this feature is not compatible with several instances of
Agite running in parallel. Only one instance of the program shall save the
current directory, which is achieved by providing the argument '-n' or
'--no_history' to all the other instances.

Instead of the previous directory, the start-up directory can be explicitly
specified in the command line with '<path>'. If no path nor '--previous' is
specified, then by default Agite starts in the current directory.

Environment variables
---------------------
AFPX_DATA_DIR::
Agite is based on Afpx screen manager, which reads the configuration files
AFPX.DSC, AFPX.FLD and AFPX.INI. Either theses files are in the current
directory from which Agite is launched, or the environment variable
'AFPX_DATA_DIR' must be set to the directory containing these files.
+
NOTE: Agite unsets AFPX_DATA_DIR at start-up, so its children don't inherit
from this setting.

AGITE_CONF_FILE::
Agite allows several settings to be defined in a 
xref:XConfig[configuration file]. By default this file is 
'$\{HOME}/.agite/agite.xml' but this can be overridden by setting the
environment variable 'AGITE_CONF_FILE' to the full path and name of the
configuration file.
+
NOTE: At least the variable 'HOME' or 'AGITE_CONF_FILE' must be set in the
environment, otherwise Agite won't start.

GIT_DIR::
Agite needs to know the root directory of the current Git worktree (if any). It
finds it by locating, in the current directory or above, the Git technical
directory.
By default it is named '.git' but this can be overridden by setting the
environment variable 'GIT_DIR' to the name (without path) of the Git directory.

anchor:XConfig[] 

Configuration file
------------------
User defined configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~
At start-up Agite reads some user-defined parameters from its configuration
file:

anchor:XConfXterm[]

xterm::
This defines the command to be launched when the
xref:XXterm[XTerm] button is selected. Example: 'gnome-terminal --zoom=0.9'. +
The default name for this button is "Xterm", but you can set the 'Name'
attribute of the XML element in order to specifiy another name for the button
(8 characters max).

anchor:XConfEditor[]

editor::
This defines the command to be launched for editing a file (for example
with the xref:XEdit[Edit] button). A space and the file name will be
concatenated to this string.
+
NOTE: This command shall start a GUI editor like 'gedit' or a 'xterm -e vi'. +
The editor should not return until completion, so that Agite
can properly refresh the status of files when the editor exits.

viewer::
This defines the command to be launched for viewing a file (for example
with the xref:XView[View] button). As the xref:XConfEditor[editor] it must be a
GUI, for example 'xterm -e cat' or 'xterm -e vi -M'.

anchor:XConfDiff[]

differator::
This defines the command to be launched for performing a xref:XDiff[Diff]
between two versions of a file. Agite will launch 'git difftool -y -x
<differator> HEAD \-- <file>' for the diff between current file and the Git
repository and 'git difftool -y -x <differator> <ref_rev> <comp_rev> \-- <file>'
for the diff between two revisions of a file.

anchor:XConfMake[]

make::
This defines the command to be launched for the local compilation with the
xref:XMake[Make] button. It shall launch a GUI. Example:
'#xterm -e 'sh -c "make; echo -n Done.; read a"'#' +
The default name for this button is "Make" and, as for the 'xterm' button,
you can set the 'Name' attribute  of the XML element in order to specify 
another name for the button (8 characters max).

anchor:XConfPeriod[]

period::
Agite refreshes the current status of files in the xref:XDir[directory] menu
when it starts the xref:XEdit[editor] and when the editor exits.
This is because the edition can modify the current status of local files. Still,
it is also possible that a stand-alone program modifes the status of
local files. This is why Agite periodically checks and redisplays the status of
local files in the xref:XDir[directory] and in the xref:XCommit[commit]
menus. This parameter defines the period in seconds of this automatic check.
+
Setting the value to 0.0 disables the feature.
+
NOTE: A manual refresh is always possible with the xref:XReread[Reread] button.

anchor:XListTags[]

list_tags::
By default, when starting the xref:XTags[tags] menu and if no template is
specified, Agite does not list all the tags and lets you enter a template.
This prevents spending to much time in the reading of all the tags of the
repository.
+
Setting the value to true instructs Agite to list all the tags by default when
entering this menu.

Agite persistent data
~~~~~~~~~~~~~~~~~~~~~
Agite also uses the configuration file to store information from one invocation
to another.

last_dir::
Agite stores the current directory (each time it changes) in this entry. See the
xref:XCommandLine[argument] '-p' ('--previous') for how to use this feature
and the argument '-n' ('--no_history') for how to disable this feature.

bookmarks::
Agite stores the xref:XBook[bookmarks] (each time you change them) in this
section:

* blank lines have no 'Name' nor content,
* separators have a 'Name' and no content,
* bookmarks have a content and possibly a 'Name'.

NOTE: The DTD file 'agite.dtd' must be located according to the ''DOCTYPE''
directive of the Agite XML configuration file. +
You may modify these persistent values, providing that: +
* Agite is not running (it would overwrite your changes), +
* You don't add comments (Agite would remove them), +
* The file 'agite.xlm' complies with the DTD 'agite.dtd'.

NOTE: In case of problem (crash), a backup of the configuration file may be
found at the same location and name as the configuration file, with the suffix
".tmp".

Ergonomy
--------
Agite implements a succession of menus in a series of screens. All the screens
have the same fixed size.

In each screen you can use the keyboard, the three buttons and the wheel of
the mouse in order to interact with agite lists, get fields and buttons.

List
~~~~
.Selecting item(s) in the list

* The left mouse button is used to define the main selection. The selected item
becomes green. Any new main selection replaces the previous.

* On most lists, a double click with the left mouse button triggers a
pre-defined action on the selected item.

* The right mouse button is used on some lists (xref:XHist[history] and
xref:XCherry[cherry pick]) to make a second selection. The selected item
becomes black. +
Any main selection on the second selection makes it becomming the main
selection. Any second re-selection of the second selection itself un-selects it.
Any new second selection replaces the previous.
+
This dual selection is used either to compare some items, or to activate a
range of items.

Clicking on an item and releasing on another has no effect.

.Scrolling the list

* Scrolling by one line up/down can be done by either:
 - up and down arrow keys
 - mouse wheele
 - Up and Down buttons

* Scrolling by one page up/down can be done by either:
 - shift + up and down arrow keys
 - page-up and page-down keys
 - shift + mouse wheele
 - PgUp and PgDown buttons

* Scrolling by ten pages up/down can be done by either:
 - control + up and down arrow keys
 - shift + page-up and page-down keys
 - control + mouse wheele

* Moving to top/bottom can be done by either:
 - control + page-up and page-down keys
 - Top and Bottom buttons

* Scroll bar +
Besides the xref:XHist[history] list (which can be long) is a scroll-bar that
indicates the relative position of the items currently displayed in the list
window, versus the whole list. Clicking and releasing in this scroll-bar
scrolls the list so that it matches the release position.

* Quick search +
On top of the xref:XDir[directory] list are special buttons that allow
searching an entry of the list by its first letter. The item becomes selected
and the list is scrolled to move the item on top of the list window.

Get fields
~~~~~~~~~~~
Get fields are identified by their background in white. +
Each get field is on one row only.

* Selection +
When several get fields are defined in a screen, it is possible to select a get
field by clicking in it. +
Alternatively the keyboard keys Tab and Shift-Tab allow changing to the next or
to the previous get field. +
Finally, contiguous get fields (like the comment of a xref:XCommit[commit])
allow continuous input: when the cursor reaches the end of a field it moves to
the next field, and vice versa.

* Edition +
In a get field, the following actions are possible with the keyboard keys. +
Note that some get fields (target xref:XDir[directory] and xref:XBook[bookmark]
edition) allow a string wider than the get area in the screen.

 - Clicking somewhere in the field moves the cursor at this position
 - Home and End: move to the boundaries of the get area
 - Left/right arrows: navigate in the string
 - A character input, Backspace and Suppr edit the string 
 - Shift+Suppr clears the string from the current position to the end
 - Ctrl+Suppr clears the whole string (and moves to the beginning of it)
 - Insert: toggles the insert/replace mode (in Insert mode the cursor becomes
a \'^')
 - Ctrl+Right/Left arrow: move to the the first/last significant character of
the string
 - Shift+Right/Left arrow: move to the the first/last character of the string.

Buttons
~~~~~~~~

Several buttons are defined in each screen. Clicking and releasing on one button
triggers an action that can:

* apply to the list selection,
* scroll the list,
* use or change the content of get fields...

Whole screen
~~~~~~~~~~~~
.Keys
Only the following keyboard keys can trigger an action with a wider scope
than the input of strings:

* Return: usually makes a predefined action for the screen, like validating
the content of the get fields, or launching an action on the list selection.


* Escape: cancels the current action or returns to the previous screen.

* Ctrl-C: requests agite to exit (as the \'X' button in the title of the X
window of Agite, or as clicking in the 'Exit' button of the
xref:XDir[directory] menu).

Agite screens
-------------
Agite is based on the following main menus:

* xref:XDir[Directory]: This is the \'root' menu and the initial menu at
start-up. It shows the content of the current directory.
* xref:XBranches[Branches]: This menu allows managing local branches.
* xref:XBook[Bookmarks]: This menu allows bookmarking directories and quickly
jumping to a bookmark.
* xref:XHist[History]: This shows the Git history of a file or directory, the
list of commits that have modified the file(s).
* xref:XTag[Tag]: This allows tagging a commit.
* xref:XDetail[Detail]: This shows information on a commit or a tag,
including the list of files modified by the commit.
* xref:XCheckout[Checkout]: This allows checking out a commit or a tag.
* xref:XTags[Tags]: This lists the tags and allows managing them.
* xref:XCherry[CherryPick]: This menu allows performing a cherry pick of
commits from a local branch.
* xref:XCommit[Commit]: This shows all the local modifications of the
worktree and allows staging and commiting them.
* xref:XPush[Push]: This allows pushing a branch or tag into a remote
repository.
* xref:XStash[Stash]: This allows stashing the local worktree and managing
the list of stashes.
* xref:XPull[Pull]: This allows fetching or pulling a branch from a
remote repository.

anchor:XNavigation[]
The navigation between the screens is as follows:


                                +----------+        +------------+
                            /-> | Branches |------->| CherryPick |--+
                           /    +----------+        +------------+  |
                          /     +-----------+                       |
                         /----->| Bookmarks |                       |
                        /       +-----------+       +-----+         |
                       /                  /-------->| Tag |         |
                      /                  /          +-----+         |
                     /          +-------+-+         +--------+      |
                    /---------->| History |<-----+->| Detail |<-----+
                   /            +-------+-+     /   +--------+
                  /             +------+ \     /    +----------+
                 /--------------| Tags |--+---+---->| Checkout |
                /               +------+   \        +----------+
  +---------- +/                +-------+   \       +------+
  | Directory |---------------->| Commit|----+----->| Push |
  +---------- +\                +-------+           +------+
                \               +-------+
                 \------------->| Stash |
                  \             +-------+
                   \            +------+
                    \---------->| Pull |
                                +------+

There are also a confirmation screen and an error screen that are called when
necessary.

NOTE: The 'history' and 'tags' menus call the 'detail' and 'checkout' menus. +
The 'tags' and 'commit' menus call the 'push' menu. +
The 'cherryPick' menu calls the 'detail' menu, but without allowing it to call
the 'history' menu.

NOTE: All the screen transitions are based on the 'call-return' scheme. +
So please note the double arrow between 'history' and 'detail': from the
'history' of a file (or dir) you can select a commit and see its 'detail'.
In this new screen you can select a file and see its 'History', and so on...
Once this is done you need to "un-stack" all these menus (by clicking on
the 'Back' button in each) in order to go back to the 'directory' menu. +
Also please note that sometimes a successuful action in a menu leads to
automatically go back to the ancestor of this menu, sometimes directly back to
the Directory menu.

Directory
~~~~~~~~~
anchor:XDir[]
The 'directory' menu lists the content, subdirectories and files, of
the current directory. Starting from top, the areas and fields are:

.Environment
Title::
The first line shows in the middle the name and current version of Agite.

Branch::
On the left is the indication of the current Git branch. Clicking on the branch
name launches the xref:XBranches[branches] menu.

Host::
On the right is the indication of current host (which normally is also
indicated in the title of the X window of Agite).

.Directories
Root::
This line shows the root directory of the current Git worktree. Clicking in this
field changes the current directory to the root.

anchor:XGo[]

Go::
This line shows the current directory. This field can be modified by:

* changing / entering a new path with the keyboard (you can use Ctrl + Suppr to
clear the field),
* clicking on xref:XReread[Reread] to restore it to the current directory,
* clicking on xref:XPushD[PopD] to restore it to a path previously pushed.

+
Then it is possible to change to the new path by hitting the key 'Return' or
by clicking on the 'Go' button. +
This text field can scroll horizontally to accomodate to long paths.

anchor:XReread[]

Reread::
Normally Agite re-scans the current directory and refreshes the list and status
when necessary, and also periodically if the feature is enabled (see
xref:XConfPeriod[period] configuration option). This button explicitly refreshes
the current list and status of files and also resets the xref:XGo[Go] field to
the current directory.

Dir Up::
This button allows moving up to parent directory.

Bookmarks::
This button launches the xref:XBook[bookmarks] menu.

anchor:XPushD[]

PushD and PopD::
The 'PushD' button allows storing the current directory, and later on the
'PopD' button allows moving back to it.

* [underline]#How it works#: Agite keeps a cache of two paths, D1 and D2.
'PushD' saves D1 as D2 and pushes the current directory as D1. 'PopD' swaps D1
and D2 (if D2 is not empty) and copies the new D1 into the xref:XGo[Go] field.

* [underline]#How to use it#: At start-up, the current the directory is
automatically pushed. As soon as you move to another directory, clicking on
'PopD' then on xref:XGo[Go] allows moving back to the original one. Once two
directories have been pushed, clicking on 'PopD' then on xref:XGo[Go] allows
swapping between both directories (so, in fact, 'PopD' does not pop).

* [underline]#Warning#: Keep in mind that only the first directory (where Agite
starts) is automatically pushed. Changing to a new directory
doesn't make it automatically pushed. Popping doesn't lead to push
the current directory either. For example, if you 'PushD' the directory
A, then change to B (and do not explicitly push it), then change to C, then
'PopD', then Agite will change to directory A (not B).

* [underline]#Warning#: Keep in mind that 'PopD' swaps D1 and D2 before
copying D1 into xref:XGo[Go].  For example, if you start in directory A, then
change to B, then push it, then change to C, then 'PopD', Agite will copy the
path of directory A (not B). A second 'PopD', will copy the path of B.

.List

anchor:XQuickSearch[]

Quick search::
On top of the list is a quick search area on two rows.
Clicking in any character of this area triggers a search of the first file
starting with this character. If found, the file becomes selected in the list
and at the top of the list area. Otherwise the selection is unchanged. +
A tick box button allows searching for the directory (starting with the
character that will be clicked) instead of a file. You need to tick the box
first, then click on a character.

The list itself::
The list shows the directories then the files of the
xref:XGo[current directory], in alphabetical order.
+
Each directory starts with three spaces then the name then a \'/'.
+
Each file is preceded by two characters of its Git index and local status (see
'man git-status') then a space, then the name. Git status can be:

* ' ' = unmodified
* ? = unknown
* M = modified
* A = added
* D = deleted
* R = renamed
* C = copied
* U = updated but unmerged

+
After the name, a character represents the kind of entry:

* ' ' fo a file, 
* '@' for a symbolic link, 
* '/' for a directory,
* '?' for other or unknown kind (of a deleted entry).

+
Only one entry is selected at a time (in green).
+
A single click selects an entry for xref:XEdit[edition], 
xref:XDiff[difference] from the Git reference, xref:XHistory[history],
xref:XAdd[add] or xref:XRevert[revert] operation.
+
A double click on a directory changes the current directory to it. +
A double click on a file launches the xref:XEdit[edition] on it. +
A double click on a symbolic link makes one or the other (or nothing),
depending on the target of the link.

anchor:XNavig[]

Navigation in the list::

The simplest way to navigate in the list is to use the wheel of the mouse.
Combine it with 'Shift' for scrolling by one page and with 'Ctrl' for scrolling
by ten pages.
+
Another way is to use the navigation buttons 'Top', 'PgUp', 'Up',
'Down', 'PgDown' and 'Bottom'. The 'Center' button scrolls the list so that the
selected entry is as most as possible in the middle of the list area.
+
Another way is to use the keyboard: Up and Down arrows, Page Up, Page Down,
Ctrl + Page Up (for Top) and Ctrl + Page Down (for Bottom).
+
All the lists of Agite screens have the same means for navigation.

NOTE: Keep in mind that the xref:XQuickSearch[quick search] is also a good way to
quickly find a file or directory.

.Actions on the current selection in the list
anchor:XEdit[]

Edit::
This button launches the editor (defined in the xref:XConfEditor[editor] entry
of the configuration file) on the file currently selected in the list, as a
double click on this file would do. +
It is not active if the current entry is a directory.

anchor:XDiff[]

Diff::
*On a file*, this button launches the graphical difference tool (defined in
the xref:XConfDiff[differator] entry of the configuration file) to show the
current modifications (if any) of the selected file. It shows the differences
between the currently modified file and the version in Git HEAD. +
On a un-modified file it shows the last update of the file (the difference
introduced by the last commit involving the file).
+
*On a directory* (including './' but excluding '../'), this button launches the
difference on all the modified files of the selected directory and
of its sub-directories. +
It is not active if the selected directory is the parent directory entry ('../')
and it has no effect if there is no modified file under the selected directory.

anchor:XHistory[]

History::
This button activates the xref:XHist[history] menu that shows the history of
the current file or directory.

anchor:XAdd[]

Add::
Adds to Git the current directory (its content in fact), the current file (new,
modified or manually merged) or symbolic link. +
If a merge leads to conficts, then you have to fix one by one each unmerged file
(with status 'U'):

* xref:XEdit[Edit] the file, manually solve the conflicts (look for sequences
like '<<<<<<<', '=======' and '>>>>>>>') and save,

* Use the 'Add' function to add this changes to the index for the next commit.

anchor:XRevert[]

Revert::
This button reverts the local change on the current entry. +
First, a simple screen asks to confirm or cancel the operation. +
Then, depending on the type of the current entry:

- If it is \'./' then Agite performs a 'git reset --hard', which resets the
local changes in the *whole worktree* (root and subtree), not only the current
directory.
- If it is a subdirectory (not \'./') then it is deleted, which
succeeds only if it is empty.
- If it is a file or a symbolic link,
 * if unknown by Git, then it is removed,
 * if just added to Git, then it becomes unknown by Git,
 * if just deleted from Git, then it is restored to its last committed content
 * if known by Git and modified, then it is restored to its last committed
content,
 * if known by Git and deleted, then it is restored to its last committed
content
 * if known by Git and renamed, then the original file is restored to its last
committed content and the new one is reset as unknown by Git
 * if up to date in Git, then it is removed from Git

+
Note: The Revert button has no effect on a file known by Git and not modified,
and is not active on \'../'.

.Other actions

anchor:XXterm[]

XTerm::
This button starts a X terminal by launching the command defined
in the xref:XConfXterm[xterm] entry of the configuration file.

anchor:XMake[]

Make::
This button makes a local compilation by launching the command defined
in the xref:XConfMake[make] entry of the configuration file.

Commit::
This button launches the xref:XCommit[commit] screen that allows
commiting the the local modifications.

Pull::
This button launches the xref:XPull[pull] screen that allows fetching or 
pulling a branch from a remote repository;

Tags::
This button launches the xref:XTags[tags] screen that allows managing the
tags.

Stash::
This button launches the xref:XStash[stash] screen that allows managing the
the list of stashes.

Exit::
This button makes Agite exit.

Branches
~~~~~~~~
anchor:XBranches[]
This menu works on the global worktree, not on the local directory. +
It allows adding, modifying, checking out a branch or merging a branch into
current. +

.Current branch and root

This shows the current branch and path of the root of current worktree.

.Actions

The possible actions on the list of local branches are the following (all
these actions except 'Merge' lead to return to the xref:XDir[directory]
menu in case of success):

Checkout::

Click in the 'Checkout' button to checkout, after confirmation, the HEAD of
the branch selected in the list. Double clicking on an entry of the list has
the same effect.

Merge::

anchor:XMerge[]
Click in the 'Merge' button to merge, after confirmation, the
branch selected in the list into the current branch. +
If the merge does not lead to 'fast forward', then a new commit is
automatically generated with the comment "Merge branch \'<branch>'".

CherryPk::

Click on the 'CherryPk' button to launch the xref:XCherry[cherry pick] menu
from the branch selected in the list into the current branch.

Create::

Enter a name in the text field and click in the 'Create' button, or hit
Return, to create a new branch.

Rename::

Enter a new name in the text field and click in the 'Rename' button to rename
the branch selected in the list.

Delete::

Click in the 'Delete' button to delete, after confirmation, the branch selected
in the list.


.Back

This button returns to the xref:XDir[directory] menu.

Bookmarks
~~~~~~~~~
anchor:XBook[]

.General presentation
Locations (directories) can be bookmarked. To bookmark a directory, first move
to it through the xref:XDir[directory] menu, then go in the 'bookmark' menu,
then click in the button xref:XAddCurr[AddCur]. This adds the current directory
in the list. Click in xref:XBookBack[Back] button to go back to the
xref:XDir[directory] menu. Later on you can open the bookmark menu and double
click on the entry, or select it and click on xref:XGoto[Goto], in order to go
back to this directory.

Bookmarks are saved in the xref:XConfig[configuration file] so that they 
are persistent from one session to another.

.List
The bookmark menu shows the current directory and lists the known bookmarks.
This list can contain four kinds of entry:

* Anonymous bookmarks don't have name. They contain only the path to a
directory. Example:

 /home/user/ada

* Named bookmarks are created like anonymous ones but with a name set in the
'Name to add' field when clicking in xref:XAddCurr[AddCur]. The name appears in
parentheses before the path of the bookmark. Example:

 (Reposit) /home/user/ada/reposit

* Separators are created by setting a name (in 'Name to add') and clicking
in xref:XAddSep[AddSep]. This creates a line with dashes and the name. Example:

 ----- Ada -----

* Blank lines can also be used to separate bookmarks. They are anonymous 
separators, created by clicking in xref:XAddSep[AddSep] with no name set.

.Buttons
anchor:XAddCurr[]
anchor:XAddSep[]
The buttons 'AddCur' and 'AddSep' insert a named or anonymous entry (depending
on the field 'Name to add') below the current entry. +
This text field 'Name to add' can scroll horizontally to accomodate to long
paths.

anchor:XGoto[]
The 'Goto' button allows changing the current directory to the bookmark
currently selected, and retruns back to the xref:XDir[directory] menu.
It is de-activated on a separator. +
Double clicking on the entry has the same effect.

Bookmarks and separators can be organised with the buttons 'MovUp', 'MovDwn'.

The current bookmark or separator can be edited as follows:

* To modify the name, then first set the new name in the field 'Name
to add', otherwise leave it empty,
* Click in the 'Edit' button,
* Enter or modify the path in the field 'Name to add',
* Click in the 'OK' button or hit the 'Return' key. +
The edition can be cancelled by clicking in the 'Cancel' button or with the
'Esc' key.

NOTE: As a consequence, it is possible to change a separator into a bookmark
and reverse, but it is not possible to clear the name of an existing
bookmark or separator.

The current bookmark or separator can be deleted with the button 'Del',
after confirmation if it is a bookmark.

Navigation in the list is the same as the xref:XNavig[navigation] in the
directory menu, with the mouse wheel, the keyboard and buttons.

anchor:XBookBack[]
The button 'Back' returns to the xref:XDir[directory] menu without
changing the current directory.

.Variables
A bookmark path can reference some Environment variables or some predefined
variables that Agite maintains automatically. 

The predefiend variables are:

* 'AGITE_START_DIR': The current directory from which Agite was started (constant).

* 'AGITE_INIT_DIR': The initial directory where Agite started (constant).

* 'AFPX_DATA_DIR': The directory where AFPX configuration files where found (constant).

* 'GIT_ROOT_DIR': The root directory of the current worktree (updated).

* 'AGITE_CUR_DIR': The current directory (updated).

Variable references must be set by editing an exiting bookmark.
Modify the bookmark path with any combination of a reference to an environment
variable, a reference to a predefined variable, or any fixed string. For
example:

  <bookmark Name="Agite">/home/${BUILD}/agite>
  <bookmark Name="Afpx">${AFPX_DATA_DIR}</bookmark>

You can prevent Agite from expanding a variable by backslashing the delimiters
"${" *and* "}". Example:

  <bookmark Name="Afpx">\${AFPX_DATA_DIR\}</bookmark>

History
~~~~~~~
anchor:XHist[]
On a file, this menu shows the relative path of the selected file,
and lists the history of all the commits on current branch that have affected
this file. +
The newest release (Head) is on top.

In case of a directory the menu shows the relative path of the directory
and lists the history of the commits of all the files in the directory
and in its sub-directories.

This lists follows the renaming of files and directories.

.List
The list shows, for each entry, the date of the commit (format YYMMDD:HHMM),
a space then the comment (up to two lines, separated by \'$\') of the commit. +
If the entry is a merge (which is possible only when showing the history of
the root of the worktree), then the separator between the date and the comment
becomes a \'>'.

Navigation in the list is the same as the xref:XNavig[navigation] in the
directory menu, with the mouse wheel, the keyboard and buttons.

The list can be very long, so there are several extra features on the history
list:

* The position of the current page, in term of percentage of the history, is
displayed above the list,

* The indexes of the left and right selection (see the xref:XDiff1[Diff]
feature) are also displayed above the list,

* A hyphen (\'-') on the left side of the list indicates the position
of the current page, as a scroll bar would do,

* You can click at a given row in this "scroll bar". The list will move
at the page corresponding to where you *release* the mouse button (and the
hyphen will be set to this position).

anchor:XView[]

.View
Double click on an entry (a commit) or select an entry and click on the 'View'
button to view the version of the file that was committed.

When the current history is on a directory this feature is de-activated.
Still it is possible to list and view one by one the files of a commit with the
xref:XDetail[detail] menu.

anchor:XDiff1[]

.Diff
The 'Diff' button shows the differences between commits. When the history is on
a directory it applies to all the files of the directory and sub-directories
that were affected by the commit(s).

'Diff' can compare two arbitrary commits or show the changes of one commit:

* Diff between two commits. 
** Left click on an entry of the list. It becomes green and the 'LeftSel'
above  the list shows the index of this entry from the Head.
** Right click on an entry of the list. It becomes black and the 'RightSel'
above the list shows the index of this entry from the Head.
** Click on the 'Diff' button. This starts the xref:XConfDiff[differator] 
with the right (black) selection as reference and the left (green) selection
as the target of the difference. If the history is about a directory several
differators may be started.

* Diff of a commit.
** Ensure that there is no right selection (no entry on black and
'RightSel'= 0).
If there is one then find it and de-select it (by a right click). Alternatively 
you can right-select any entry and de-select it with a second right click on it.
** Left click on an entry of the list. It becomes green and the 'LeftSel'
above the list shows the index of this entry from the Head.
** Click on the 'Diff' button. This starts the xref:XConfDiff[differator]
with the version before the selection as reference and the selection
as the target of the difference. If the history is about a directory several
differators may be started.

anchor:XDetailBut[]

.Detail
This button activates the xref:XDetail[detail] menu on the
commit currently (left-)selected in the history.

anchor:XRestore[]

.Restore
This button causes Agite to check that the current file is not locally
modified. If not, Agite asks for confirmation then checkouts the file in the
version currently (left-)selected in the history. The file will be tagged as
\'M' (modified) if this version differs from the Git HEAD one. +
This function is not active on the history of a directory.

.Checkout
This button button launches the xref:XCheckout[checkout] menu that allows
checking out the selected commit (either in a new branch or as detached from
HEAD).

NOTE: There is a major difference between the 'Restore' and the 'Checkout'
operations. +
- 'Restore' overwrites the file with the content that it had in the given
commit. +
- 'Checkout' checks out the whole workspace in the state that it had when the
commit was performed.

.Tag
This button button launches the xref:XTag[tag] menu that allows tagging the 
selected commit.

.Back
This button returns to the xref:XDir[directory] menu.

NOTE: The history follows the renaming of the file or directory but the
reference name (that is displayed above the history list) is used for the
xref:XView[view] and xref:XDiff1[diff] operations.
As a consequence, Agite will fail to show a file, or a difference from a file,
if the entry in the history is before a renaming. Still, it is possible to view
a file that has been committed then renamed later on, with the following
operations: +
* Select the commit in the history +
* Show the xref:XDetailBut[detail] of this commit +
* Select the file in the xref:XDetail[detail] of the commit (previous name) +
* Click in the xref:XView[View] button to view the file.

It is not possible to do a xref:XDiff1[diff] between two versions of a file if
the file has been renamed or moved between the versions.

Tag
~~~
anchor:XTag[]
The 'tag' menu allows tagging a commit. It shows the details of the commit, as
in the xref:XDetail[detail] menu:

* The SHA-1 hash of the commit,
* The date and comment (up to seven lines) of the commit,
* The list of all the files in the commit, each preceded by a letter M, A or
D.

You can:

* Enter the tag name in the 'Tag name' field.
* If you want to create an annotated tag, then enter the tag comment in the
'Comment' field.
* Click either in the 'Tag Annotated' or in the 'Tag Simple' to create a tag
on the current commit (and go back to the xref:XHist[history] menu).

Detail
~~~~~~
anchor:XDetail[]
The 'detail' menu shows the details of a commit or a tag:

.Title
In case of a tag, the title recalls the name of the tag (in case of a commit
the title is simply "Commit").

.Tag information
Then, in case of an annotated tag, the title is followed by the tag
information:

* The date when the tag was created,
* The first line of the comment of the tag.

.Tag and commit information
Then, in any case, there is the information on the commmit:

* The SHA-1 hash of the commit, that you can copy into the X11 selection
buffer,
* If the entry is a merge, this is indicated by the word "Merge",
* The date and the comment of the commit (up to seven lines), that you can
also alternatively copy into the X11 selection buffer, 
* The list of all the files in the commit, each preceded by a letter:
** M Modified,
** A Added,
** D Deleted.

anchor:XX11Selection[]

NOTE: You can paste the X11 selection buffer by using the middle mouse button).
This X11 selection buffer is different from the clipboard of the window manager
(accessed in some applications by Ctrl-C, Ctrl-V and with the right mouse
button opening a pop-up menu), which is not available in Agite, neither for copy
nor for paste.

A specific entry, "/", is added on top of the list, which represents the root of
the current worktree.

.Actions

For all file entries of the list (not "/"):

* double clicking on the entry or select the entry and click on 'View' allows 
viewing the file as it was committed,
* clicking on the button 'Hist' shows the full history of the file,
* clicking on the button 'Diff' shows the differences between the version
before and in the commit,
* clicking on the button 'Restore' restores the file from the commit.
As in the xref:XRestore[restore] from the 'history', there is first a check
that the file is not locally modified, then a confirmation.

When the "/" entry is selected:

* clicking on the button 'History' shows the full history of the
worktree,
* clicking on the button 'Diff' launches the differator on each file of
the commit (differences brought by the commit),
* clicking on the button 'Restore' restores all the files of the commit,
if none of them is locally modified, and after a confirmation.

NOTE: Clicking on 'Hist' leads to call a new function that shows the history, as
explained in the section on xref:XNavigation[navigation].

Checkout
~~~~~~~~
anchor:XCheckout[]
The 'checkout' menu allows checking out a commit or a tag.

NOTE: the checkout operation will be rejected if it leads to overwrite a local
modification in the worktree.

In case of a commit, the date and comment of the commit are indicated. In case
of a tag, the tag name and, if any (annotated tag), the date and the comment of
the tag are indicated.

You can (should) enter the name of a new branch into with the checkout is
performed. Otherwise the current worktree then becomes in 'detached HEAD' state.
"You can look around, make experimental changes and commit them, and you can
discard any commits you make in this state without impacting any branches by
performing another checkout" (another commit earlier in the same branch,
or the HEAD of any xref:XBranches[branch], including the current branch,
master...).

.Checkout

This button launches the checkout of the tag or commit, in a branch or detached,
and returns to the xref:XDir[directory] menu.

.Cancel

This button cancels the checkout (and the branch creation).

Tags
~~~~
anchor:XTags[]
The 'tags' menu lists the tags of the workdir that match a criteria.

.Criteria
The criteria is intially empty, which means "all tags". When the 'tags'
menu is launched (from the xref:XDir[directory] menu), the criteria is used as
follows:

* Either there is a criteria already set (from a previous invocation of the
'tags' menu), then this criteria applies and the matching tags are listed,

* Or the criteria is empty but the xref:XListTags[list_tags] has been set
to true (any casing) in the xref:XConfig[configuration file], then all the
tags are listed,

* Otherwise no search is performed by default. This is to prevent spending to
much time in searching and sorting all the tags.

You can enter a name or a template (like V1.*) in the get area besides the
'List' button or leave it empty (for all the tags). Then you can hit the Return
key or click in the 'List' button, which updates the list.

As soon as it is used for searching, the criteria is memorized for further
invocations of the menu, until you quit Agite.

.List

The list contains the matching tags, sorted by date:

* Annotated tags are shown with the tag name, tagging date and comment,
* Non annotated tags are shown with only the tag name,


.Actions

The possible actions on a tag are:

Detail::

This button activates the xref:XDetail[detail] menu on the
tag currently (left-)selected in the list.

Checkout::

This button button launches the xref:XCheckout[checkout] menu that allows
checking out the selected tag.

Delete::

This button button asks for confirmation, then deletes the selected tag.

Push::

This button button launches the xref:XPush[push] menu that allows pushing
the selected tag into a selected remote repository.

.Back

This button returns to the xref:XDir[directory] menu.

Cherry pick
~~~~~~~~~~~
anchor:XCherry[]
This menu works on the global worktree, not on the local directory. +
It allows selecting some commits of the selected branch and it
merges them into the current branch. +
It shows:

.Current branch
On the top left is recalled the name of the current branch, into which the
selected commits will be merged.

.Title
The title recalls the name of the 'reference branch' from which the commits are
selected.

.Root
The third line recalls the root of the current worktree.

.List
The list shows the result of \'git cherry', which is the list of commits in the
'reference branch' that are not merged into the current branch.

* Entries starting with \'=' are identified as already merged. +
They cannot be picked or discarded.

* Entries starting with \'+' are 'picked', which means that they are selected 
for merge.

* Entries starting with ' ' are 'discarded', which means that they are not
selected for merge. +
By default, all the non-merged commits are not selected.

Double-clicking on an entry of the list toggles its selection for merge
(if this entry is not already merged).

NOTE: The commits that have already been merged through the \'fast forward'
mechanism are not listed at all.

.Detail
Click on the 'Detail' button to see the xref:XDetail[details] of a commit,
including viewing a file or seeing the differences introduced by this commit,
but excluding launching the 'history' menu and excluding restoring files.

.Add
When there is only a left selection in the list, clicking on the 'Add' button
adds it to the 'picked' commits (if the commit is currently discarded). +
When there is a right and a left selection in the list, clicking on this
button adds all the commits between the selections that are currently
discarded.

.Remove
When there is only a left selection in the list, clicking on the 'Remove' button
removes it from the 'picked' commits (if the commit is currently picked). +
When there is a right and a left selection in the list, clicking on this
button removes all the commit between the selections that are currently
picked.

.Reset
Click on this button to discard all the commits currently selected for merge.

.Done
Click on this button when the selection is completed. +
If some commits have been selected, then they are listed in a confirmation
screen. +
If confirmed, then these commits are merged into the current branch. Any error
is reported in a specific screen. +
After success, Agite returns back on the xref:XDir[directory] menu, otherwise
it returns in the xref:XBranches[branches] menu.

NOTE: To cancel a cherry pick, simply ensure that no commit is selected (click
on the 'Reset' button) and click on the 'Done' button.

Commit
~~~~~~
anchor:XCommit[]
This menu works on the global worktree, not on the local directory. +
It shows the list of all the local changes, allows (un)staging them and allows
entering a comment for the commit:

.Current branch and root

This shows the current branch and the path of the root of the current worktree.

.Sign

Append the user name and email address to the comment.

.Clear

Clear the comment fields. You can use Ctrl + Suppr to clear the current line
of the comment.

.Copy
Copy the text of the comment in the xref:XX11Selection[X11 selection buffer].

.Comment

You can enter up to 7 lines of comment. +
You can paste the content of the xref:XX11Selection[X11 selection buffer] into
a line of the comment, by middle-clicking on this line. +
You can clear a line by hitting Ctrl + Suppr, clear the end of line by hitting
Shift Suppr, move to the last character of a line by hitting Ctrl
+ RightArrow...

NOTE: The comment must not be empty when committing.

.List of changes

This list shows all the current changes in the worktree, with 3 letters of
status for each file:

* The first column ('S') shows the summary of the status:
 - a '''+''' if all the changes of the file are staged,
 - a '''*''' if some changes are staged and some others are not,
 - empty if no changes are staged (e.g. locally modified or new).
* The second column ('I') shows the changes in the index (that will be
committed),
* The third column ('L') shows the changes local to the worktree (that will not
be committed).

You can select a file and show its local differences, stage or unstage its
changes.

.Actions

The possible actions on the list of changes or the comment are:

Double click::

A double click on a change toggles the stage status of the entry:
 - if all the modifications of the file are staged (S='''+''') then unstage
these changes,
 - otherwise stage all the changes.

Reread::

Normally Agite re-scans the current directory and refreshes the list and status
when necessary, and also periodically if the feature is enabled (see
xref:XConfPeriod[period] configuration option). This button explicitly refreshes
the current list and status of changes.

Stage::

Stage (add/rm) the current file (selected in list) or change, and move to next.

Unstage::

Unstage (reset) the current file (selected in list) or change and move to next.

StageAll::

Stage all the changes that are unstaged. Also proposes to add the untracked
(new) files.

NOTE: The Stage, and StageAll buttons do not stage the files that are in the
status 'U' (updated but unmerged), see the xref:XAdd[Add] function.

NOTE: The Stage, Unstage and StageAll buttons are active only if there are local
changes.

Diff::

Show the difference between the current change and the HEAD for the current file
(selected in list).

.Commit

Commit the staged changes.

NOTE: Ensure to enter a comment before committing.

If the commit succeeds then the list of changes is updated, otherwise
the error is reported through a specific screen.

NOTE: The Commit button is active only if there are staged changes.

.Push

This button activates the xref:XPush[push] menu to push the last commits into
a selected remote reference.

.Back

This button returns to the xref:XDir[directory] menu.

Push
~~~~
anchor:XPush[]
The 'push' menu allows pushing the local commits of the current
branch or to push a tag into a selected remote repository. +
It shows:

.Title

In case of a tag the title recalls the name of the tag.

.Current branch and root

This shows the current branch and the path of the root of the current
workstree.

.List of references

This lists the known remote repositories, from which you can select the
target. +
If the remote ''orign'' is defined then it is selected by default.

.Push

Pushes the local commits of current branch or the tag to the selected remote
repository. +
After pushing the current branch, Agite returns back to the
xref:XDir[directory] menu, while after pushing a tag it returns back to the
xref:XTags[tags] menu. +
Any error is reported through a specific screen.

.Push Upstream
Only active when pushing the current branch, allows the creation of the
current branch in the remote repository. (If the branch has already been pushed
upstream into this repository, then this button has the same effect as
'Push'.) +
After pushing the branch, Agite returns back to the xref:XDir[directory]
menu. +
Any error is reported through a specific screen.

.Back

Moves back to the xref:XCommit[commit] menu without pushing.

anchor:XSelBranch[]

Stash
~~~~~
anchor:XStash[]
The 'stash' menu works on the global worktree, not on the local directory. +
The screen shows the list of stashes. Each entry has a stash number,
the branch on which the stash was done and the text of the message.

.Current branch and root

This shows the current branch and the path of the root of the current worktree.

.Actions

The possible actions on the list of stashes are:

Add::

Enter a message (or name) for the stash and click in the 'Add' button or press
the Return key. Agit stashes the current worktree (which performs a 'git reset
--hard'), then applies this stash, then returns to the xref:XDir[directory]
menu. +
The new stash has been inserted in the list. +

NOTE: You can un-apply this stash ('git reset --hard') by selecting the entry
'/' of the xref:XDir[directory] list and cliking on the xref:XRevert[revert]
button.


Apply::

Applies the stash currently selected in the list and returns to the
xref:XDir[directory] menu. A double click on an entry has the same effect.

Pop::

After confirmation, applies the stash currently selected in the list, removes
it from the list and returns to the xref:XDir[directory] menu.

Del::

After confirmation, deletes (drops) the stash currently selected in the list.

.Back

This button returns to the xref:XDir[directory] menu.


Pull
~~~~
anchor:XPull[]
The 'pull' menu allows pulling the current branch (fetching and merging) or
fetching only another branch from a remote repository. +
This is achieved through two successive screens.

Branch selection
^^^^^^^^^^^^^^^^
anchor:XSelBranch[]
This screen allows selecting the branch to pull. +
It shows:

.Current branch and root

This shows the current branch and the path of the root of the current workspace.

.List of remote branches

This lists all the known remote branches, from which you can select the branch
to fetch. +
The current branch is selected by default and will be pulled. If you select
another branch it will only be fetched and you will have to xref:XMerge[merge]
it explicitly if you want.

.OK

Validates the branch selection and activates the 
xref:XSelReference[reference selection] for selecting the remote reference and
pulling from it.

.Back

Moves back to the xref:XDir[directory] menu without pulling.

Reference selection
^^^^^^^^^^^^^^^^^^^
anchor:XSelReference[]
This screen allows selecting the remote repository from which to pull. +
It shows:

.Current branch and root

This shows the current branch and the path of the root of the current workspace.

.Selected branch to pull

Below the title is displayed the branch (previously selected) that will be
pulled.

.List of references

This lists the known references from which you can select the one to pull the
branch from. +
If the remote ''orign'' is defined then it is selected by default.

.Pull or Fetch

This button shows 'Pull' if the selected remote branch is the same as current
branch, otherwise it shows 'Fetch'. It pulls or fetches the remote branch from
the selected remote repository. +
If there is no error then Agite returns back to the xref:XDir[directory] menu,
otherwise the error is reported through a specific screen.

.Back

Moves back to the xref:XSelBranch[branch selection] menu without pulling.

Scope of the operations
-----------------------
Each of the operations described above operates on a given scope, which is
summarized hereafter.

Current directory
~~~~~~~~~~~~~~~~~
The following functions and screens apply to the current directory or to the
selected file or directory:

* 'Reread' button rereads the current directory

* 'Search' button searches a file or a directory in the current directory

* 'Make' button launches make in the current directory

* 'Edit' button edits the selected file

* 'Diff' button shows the differences on the selected file or directory

* 'Hist' button shows the history of the selected file or directory

* 'Add' and 'Revert' buttons add or remove the selected file or directory

* 'Restore' button (of the detail menu) retrieves the selected file or all the
files of the commit

Current workspace
~~~~~~~~~~~~~~~~~
The following functions and screens apply to the current workspace:

* 'Branch' screen allows several operations on branches on the the current
workspace, including 'Merge' and 'Cherry pick'

* 'Root' button moves to the root directory of the current workspace,

* 'Commit' screen allows commiting the files modified within the current
workspace

* 'Push' screen allows allows pushing commits on the current workspace

* 'Pull' screen pulls branches of the current workspace

* 'Tags' screen lists the tags of the current workspace

* 'Checkout' button (of the history menu or of the tags menu) checks out the
commit in the current workspace

* 'Stash' screen saves and restore stashes on the current workspace

* 'Tag' tags a commit of the current workspace

* 'Detail' shows the details of a commit on the current workspace

Anywhere
~~~~~~~~
The following operations allow changing the current directory with no
limitation:

* 'Go' button moves to the specified directory

* 'Dir Up' button moves to parent directory

* 'Bookmarks' menu handles bookmarks of directories

* 'PushD' and 'PopD' buttons push and pop directories

* 'Xterm' button starts a terminal in the current directory, then one can
change its current directory

Interfaces with Git
-------------------
This section lists the commands and arguments passed to Git. This requires git
version 1.7.0 or above:

* A function gets Git version by calling 'git --version',

* A function lists local files by calling 'git ls-files' and
'git status \-- porcelain .',

* A function lists all changes by calling 'git status \-- porcelain .',

* A function lists the status of a file by calling 'git status \-- porcelain
<file>',

* A function lists the commits on a dir by calling
'git log --date=iso --topo-order \-- <dir>', +
and on a file by calling 'git log --follow --date=iso --topo-order \-- <file>',

* A functions gets the hash of the last commit by calling 'git log
--pretty=format:"%H" -n -1 -- <pwd>'

* A function gets general information on a commit by calling 'git log
--date=iso -n 1 <HSA1_hash> \--',

* A function gets the details of a commit by calling
'git log --name-status --date=iso -n 1 <HSA1_hash> \--',

* A function lists the remote repositories by calling 'git remote',

* A function extracts a given version of a file (in a commit by calling
'git show <HSA1_hash>:<file> > <file>',

* A function launches the differator on a modified file (versus Head) by
calling 'git difftool -y -x <differator> HEAD \-- <file>',

* A function lauches the differator between two versions of a file (or dir) by
calling 'git difftool -y -x <differator> <ref_HSA1_hash> <comp_HSA1_hash>
\-- <file>',

* A function reverts the local changes of a file by calling
'git checkout HEAD \-- <file>',

* A function resets the staged sgtatus of a file by calling 'git reset \--
<file>',

* A function resets the repository by calling 'git reset \--hard',

* A function globally checks out a given commit or branch by calling
'git checkout [ -b <branch> ] <ref>',

* A function stages a change of a file by calling 'git add \-- <file>',

* A function removes a file from the index by 'git rm \-- <file>',

* A function commits the local changes by calling 'git commit -m
"<comment>"',

* A function pushes the local commits of current branch or a tag by calling
'git push [ --set-upstream ] <remote> [ <tag> ]',

* A function fetches or pulls the current branch by calling
'git fetch --tags <remote> <branch>:<branch>' or
'git pull --tags <remote> <branch>:<branch>',

* A function gets the name of current branch by calling 'git branch',

* A function lists the local branches by calling 'git branch' or lists the
remote branches by calling 'git fetch' then 'git branch -r',

* Three functions create/rename/delete a branch by calling 'git branch
[ -m | -d ] <name> [<new_name>]',

* A function merges a branch into current by calling 'git merge -m <comment> 
<branch>',

* A function gets the user name and email by calling 'git config user.name'
and 'git config user.email',

* A function gets the list of stashes by calling 'git stash list',

* A function saves the current stash by calling 'git stash save <message>',

* Three functions apply/pop/drop a stash by calling 'git stash apply/pop/drop
-q stash@{<num>}',

* A function shows a tag by calling 'git show --date=iso --quiet -s <tag> \--',

* A function lists the tags by calling 'git tag [ -l <template> ]',

* A function deletes a tag by calling 'git tag -d <tag>',

* A function adds a tag by calling 'git tag [ -a -m <comment> ] <tag> <ref>'.

* A function lists the cherry commits of reference branch versus a target
branch by calling 'git cherry <target> <reference>'

* A function cherry picks some commits by calling 'git cherry-pick --ff {
<HSA1_hash> }'
