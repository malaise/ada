with Ada.Text_Io;
with Argument;
with Points, Point_Str, File;

procedure Export is

  Ascii_File : Ada.Text_Io.File_Type;

  procedure Error (Msg : in String)  is
  begin
    Ada.Text_Io.Put_Line ("ERROR: " & Msg);
    Ada.Text_Io.Put_Line ("Usage: " & Argument.Get_Program_Name & " <src_approx_file> <dst_ascii_file>");
  end Error;

begin

  if Argument.Get_Nbre_Arg /= 2 then
    Error ("Invalid arguments");
    return;
  end if;

  begin
    begin
      Ada.Text_Io.Open (Ascii_File, Ada.Text_Io.In_File, Argument.Get_Parameter(Occurence => 2));
      Error ("File " & Argument.Get_Parameter(Occurence => 2) & " exists");
      return;
    exception
      when Ada.Text_Io.Name_Error =>
        Ada.Text_Io.Create (Ascii_File,  Ada.Text_Io.Out_File, Argument.Get_Parameter(Occurence => 2));
    end;
  exception
    when others =>
      Error ("Cannot create file " & Argument.Get_Parameter(Occurence => 2));
      return;
  end;

  declare
    The_Points : constant Points.P_T_The_Points
               := File.F_Read(Argument.Get_Parameter(Occurence => 1));
  begin

    Ada.Text_Io.Put_Line (Ascii_File, "# Generated by approx export");
    for I in The_Points'Range loop
      Ada.Text_Io.Put_Line (Ascii_File, Point_Str.Coordinate_Image(The_Points(I).X) & "  "  &
                                    Point_Str.Coordinate_Image(The_Points(I).Y));
    end loop;
    Ada.Text_Io.Close (Ascii_File);
    Ada.Text_Io.Put_Line ("Done.");

  exception
    when File.F_Access_Error =>
      Error ("Cannot open file " & Argument.Get_Parameter(Occurence => 1));
      Ada.Text_Io.Delete (Ascii_File);
      return;
    when File.F_Io_Error =>
      Error ("Reading file " & Argument.Get_Parameter(Occurence => 1));
      Ada.Text_Io.Delete (Ascii_File);
      return;
  end;

end Export;

