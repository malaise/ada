#!/bin/bash

# Precision, in fraction of dregree, depending of encoding precision
EPSILON[0]="2.5E-4"
EPSILON[1]="5.0E-5"
EPSILON[2]="7.5E-6"

# Defaults
export DEBUG=""
export PRECISION=2

function usage {
  echo "Usage: `basename $0` [ -p <prec> | --precision=<prec> ] [ -d | --debug ]"
  echo "    or `basename $0` [ -h | --help ]"
  echo " Default precision: $PRECISION"
}

function error {
  echo "ERROR: $1" 1>&2
  exit 1
}

# Parse arguments
while [ -n "$1" ] ; do
  case "$1" in
    ("-h"| "--help")
      usage
      exit 0
    ;;
    ("-d"|"--debug")
      export DEBUG="-d"
    ;;
    ("-p")
      export PRECISION=$2
      shift
    ;;
    (--precision=*)
      export PRECISION=${1#*=}
    ;;
    (*)
      error "Invalid arguments"
    ;;
  esac
  shift
done
echo Precision $PRECISION
PRECISION=P${PRECISION}

# Read field $3 of line $2 of file $1
function readarg {
res="`awk -vLINE=$2 -vFIELD=$3 '
  BEGIN {
    NL=0
  }
  (NF == 0 || $1 ~ /^#/) {
    # Skip empty lines and comment
    next
  }
  {
    # Count significant lines
    NL=NL+1
    if (NL == LINE) {
      printf "%s",$FIELD
      exit 0
    }
  } 
' $1`"
echo "$res"
}

# Check that $2 = $3
# if $1 is -d then compare floats modulo EPS ($4) (1.0E-4, 1.0E-5, 1.0E-6)
# Echo 0 if OK and 1 otherwise
function check {
  if [ "$1" = "-d" ] ; then
    echo $2 | awk -v EXPECT="$3" -v EPS=${EPSILON[$4]} '
    function abs(v) {return v < 0 ? -v : v}
    {
      NEXPECT=split(EXPECT, EXPECTS)
      NOUTPUT=split($0, OUTPUTS);
      if (NEXPECT != NOUTPUT) {print "1"; exit}
      for (i = 1; i < NEXPECT+1; i++) {
        E = 0.0+EXPECTS[i]
        O = 0.0+OUTPUTS[i]
        D = abs(E - O)
        if (D > EPS) {
          if (E < 0.0) E += 360.0
          if (O < 0.0) O += 360.0
          D = abs(E - O)
          if (D > EPS) {
            print "1"
          }
        }
      }
      print "0"
    }
    '
  else
    if [ "$2" = "$3" ] ; then
      echo 0
    else
      echo 1
    fi
  fi
}

# Play Scenario.txt
echo Scenario:
# For each line
let L=1
while true ; do
  # Read line until end of file
  let I=1
  INPUT=""
  OUTPUT=""
  let ININ=1
  CMD=""
  while true ; do
    arg=`readarg Scenario.txt $L $I`
    if [ "$arg" = "" ] ; then
      # End of line
      break
    fi
    if [ -z "$CMD" ] ; then
      CMD=$arg;
    fi
    if [ "$arg" = "=>" ] ; then
      # Switch to output
      let ININ=0
    elif [ $ININ -eq 1 ] ; then
      INPUT=$INPUT$arg" "
    else
      OUTPUT=$OUTPUT$arg" "
    fi
    let I=$I+1
  done
  if [ "$INPUT" = "" ] ; then
    break
  fi
  # Do test and save exit status
  export result=`t_mapcode $INPUT`
  export code=$?
  # Check exit status
  if [ $code -ne 0 ] ; then
    error "mapcode has exited with code $code"
    exit 1
  fi
  # Skip up to "=> " included and append a space (cause OUTPUT has one)
  result=`echo $result | cut -d ">" -f 2 | cut -d " " -f 2-`" "
  # Check that result is expected
  res=`check "$CMD" "$result" "$OUTPUT" 0`
  if [ "$res" = "0" ] ; then
    if [ -n "$DEBUG" ] ; then
      echo "$INPUT => $OUTPUT"
    fi
  else
    error "$INPUT => $result instead of $OUTPUT"
  fi
  let L=$L+1
done
echo OK.

# Check Territory failures
echo Failure on territory:
# Info on  $1 in context $2 shall lead to error (exit 1)
function territory_failure {
  if [ -n "$DEBUG" ] ; then
    echo -t "$1" "$2"
  fi
  t_mapcode -t "$1" "$2" > /dev/null 2>&1
  res=$?
  if [ $res -ne 1 ] ; then
    error "t_mapcode -t \"$1\" "$2" has exited with code $res i.o. 1"
  fi
}
territory_failure ""
territory_failure " "
territory_failure USA " "
territory_failure " " "US "
territory_failure "Toto"
territory_failure AL Toto
# For each line
let L=1
while true ; do
  ctx=`readarg TerritoryFailures.txt $L 1`
  if [ -z "$ctx" ] ; then
    break;
  fi
  ter=`readarg TerritoryFailures.txt $L 2`
  if [ -z "$ter" ] ; then
    ter=$ctx
    ctx=""
  fi
  territory_failure $ter $ctx
  let L=$L+1
done
echo OK.

# Check decoding failures
echo Failure to decode:
# Decoding $1 in context $2 shall lead to error (exit 1)
function decode_failure {
  if [ -n "$DEBUG" ] ; then
    echo -d "$1" "$2"
  fi
  t_mapcode -d "$1" $2 > /dev/null 2>&1
  res=$?
  if [ $res -ne 1 ] ; then
    error "t_mapcode -d \"$1\" $2 has exited with code $res i.o. 1"
  fi
}
decode_failure ""
decode_failure "QD3CL.PX8J-K3'"
decode_failure "QD3CL.P'X8J-K3"
# For each line
let L=1
while true ; do
  ctx=`readarg DecodeFailures.txt $L 1`
  if [ -z "$ctx" ] ; then
    break;
  fi
  cod=`readarg DecodeFailures.txt $L 2`
  if [ -z "$cod" ] ; then
    cod=$ctx
    ctx=""
  fi
  decode_failure $ctx $cod
  let L=$L+1
done
echo OK.

# Encode
echo Encode
# For each line
let L=1
while true ; do
  # Read lat and lon
  lat=`readarg EncodeOk.txt $L 1`
  if [ -z "$lat" ] ; then
    break;
  fi
  lon=`readarg EncodeOk.txt $L 2`
  # Encode
  result=`t_mapcode -c $lat $lon $PRECISION`
  if [ $? -ne 0 ] ; then
    error "t_mapcode -t $lat $lon $PRECISION has failed"
  fi
  # Parse result:
  # lat lon => Short Code, then either 'Code Short' or 'Long', then num
  result=`echo $result | awk '
    (substr($6, 1, 1) == "'\''") && (substr($6, length($6), 1) == "'\''") {
      print substr($6, 2, length($6)-2)
      exit
    }
    {
      print substr($6, 2) " " substr($7, 1, length($7)-1)
    }
  '`
  ctx=`echo $result | awk '{print $1}'`
  cod=`echo $result | awk '{print $2}'`
  if [ -z "$cod" ] ; then
    cod=$ctx
    ctx=""
  fi
  # Decode
  dec=`t_mapcode -d $ctx $cod`
  if [ $? -ne 0 ] ; then
    error "t_mapcode -d $cod $ctx has failed"
  fi
  dec=`echo $dec | cut -d ">" -f 2 | cut -d " " -f 2-`
  # Check decoded lat lon versus origin
  res=`check "-d" "$dec" "$lat $lon" $PRECISION`
  if [ "$res" != "0" ] ; then
    error "$lat $lon $PRECISION => $result => $dec"
  else
    if [ -n "$DEBUG" ] ; then
      echo "$lat $lon => $result => $dec"
    fi
  fi

  let L=$L+1
done
echo OK.

# Decode
echo Decode:
# Count line ("=>") of output
function count {
  echo "$*" | awk '
    BEGIN {FS="=>"}
    {print NF - 1}
  '
}

# Decoding in context $1 the mapcode $2 shall lead to lat lon $3 and $4
# Ecoding lat lon $3 and $4 in context $1 shall lead to $5 mapcodes
# Ecoding lat lon $3 and $4 without context $1 shall lead to $6 mapcodes
# Encoding lat lon $3 and $4 in context $1 with $PRECISION then decoding
#  shall lead to $3 and $4
function decode {
  if [ -n "$DEBUG" ] ; then
    echo -d "$1" "$2"
  fi
  result=`t_mapcode -d $1 $2`
  result=`echo $result | cut -d ">" -f 2 | cut -d " " -f 2-`
  res=`check "-d" "$3 $4" "$result" 0`
  if [ "$res" != "0" ] ; then
    error "t_mapcode -d $1 $2 => $result instead of $3 $4"
  fi
  # Count number of all local codes
  res=`t_mapcode -c $3 $4 $1 all`
  let nloc=0+`count $res`
  if [ $nloc -ne $5 ] ; then
    error "t_mapcode -c $3 $4 $1 all => $nloc results instead of $5"
  fi
  # Count number of all global codes
  res=`t_mapcode -c $3 $4 all`
  let nloc=0+`count $res`
  if [ $nloc -ne $6 ] ; then
    error "t_mapcode -c $3 $4 all => $nloc results instead of $6"
    exit 1
  fi
  # Check decoded lat lon versus provided
  enc=`t_mapcode -c $3 $4 $1 $PRECISION`
  enc=`echo $enc | cut -d ">" -f 2 | cut -d " " -f 2-3`
  dec=`t_mapcode -d $enc`
  dec=`echo $dec | cut -d ">" -f 2`
  res=`check "-d" "$dec" "$3 $4" $PRECISION`
  if [ "$res" != "0" ] ; then
    error "$3 $4 $1 $PRECISION => $enc => $dec"
  fi

}
# Theses one have no context
decode "" "ZH0H0.H1HG"    "90" "0" 1 1
decode "" "ZZ0X0.B16G-4K" "90" "179" 1 1
decode "" "Z0000.010G"    "90" "-179.999999" 1 1
decode "" "ZZ0Z0.Z1YG"    "90.000000000000" "179.999999999999" 1 1

# Play scenario
# For each line
# Read ctx cod lat lon loc glo
let L=0
while read -r ctx cod lat lon loc glo || [[ -n "$ctx" ]]; do
  if [ \( -z "$ctx" \) -o \( "$ctx" = "#" \) ] ; then
    continue
  fi
  decode $ctx $cod $lat $lon $loc $glo

  R=$((L % 100))
  if [ $R -eq 0 ] ; then
    echo -n "."
  fi
  let L=$L+1
done < DecodeOk.txt
echo
echo OK.
