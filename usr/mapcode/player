#!/bin/bash
#set -vx
if [ "$1" = "" ] ; then
  echo "Usage: `basename $0` <scenario>"
  exit 1
fi
export SCENARIO=$1

# Read field $2 of line $1
function readarg {
res="`awk -vLINE=$1 -vFIELD=$2 '
  BEGIN {
    NL=0
  }
  (NF == 0 || $1 ~ /^#/) {
    # Skip empty lines and comment
    next
  }
  {
    # Count significant lines
    NL=NL+1
    if (NL == LINE) {
      printf "%s",$FIELD
      exit 0
    }
  } 
' $SCENARIO`"
echo "$res"
}

function check {

  if [ "$1" = "-c" ] ; then
    if [ "$2" = "$3" ] ; then
      echo 0
      return
    fi
  else
    echo $2 | awk -v EXPECT="$3" '
    BEGIN {EPS=1.0E-4}
    {
      NEXPECT=split(EXPECT, EXPECTS)
      NOUTPUT=split($0, OUPUTS);
      if (NEXPECT != NOUTPUT) {print "1"; exit}
      for (I = 0; I < NEXPECT; I++) {
        if ( (EXPECTS[i] > OUTPUTS[I] + EPS) \
          || (EXPECTS[i] < OUTPUTS[I] - EPS) ) {
          print "1";
          exit
        }
      }
      print "0"
    }
    '
    return
  fi
  echo 1
}
  

# For each line
let L=1
while true ; do
  # Read line until end of file
  let I=1
  INPUT=""
  OUTPUT=""
  let ININ=1
  CMD=""
  while true ; do
    arg=`readarg $L $I`
    if [ "$arg" = "" ] ; then
      # End of line
      break
    fi
    if [ -z "$CMD" ] ; then
      CMD=$arg;
    fi
    if [ "$arg" = "=>" ] ; then
      # Swith to output
      let ININ=0
    elif [ $ININ -eq 1 ] ; then
      INPUT=$INPUT$arg" "
    else
      OUTPUT=$OUTPUT$arg" "
    fi
    let I=$I+1
  done
  if [ "$INPUT" = "" ] ; then
    break
  fi
  # Do test and save exit status
  export result=`t_mapcode $INPUT`
  export code=$?
  # Check exit status
  if [ $code -ne 0 ] ; then
    echo "Error: mapcode exited with code $code"
    exit 1
  fi
echo ">"$result"<"
  # Skip up to "=> " included and append a space
  result=`echo $result | cut -d ">" -f 2 | cut -d " " -f 2-`" "
  # Check that result is expected
  res=`check $CMD "$result" "$OUTPUT"`
  if [ "$res" = "0" ] ; then
    echo "$INPUT => $OUTPUT"
  else
    echo "Error: $INPUT => $result instead of $OUTPUT"
    exit 1
  fi
  let L=$L+1
done
echo OK.
exit 0

