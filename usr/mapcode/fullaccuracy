#!/bin/bash

function usage {
  echo "Usage: `basename $0` [ -w | --warnings ] [ -n <nb> | --nb=<nb> ] "
  echo "    or `basename $0` [ -h | --help ]"
}


export WARN=""
export NB=1

while [ -n "$1" ] ; do
  case "$1" in
    ("-h"| "--help")
      usage
      exit 0
    ;;
    ("-w"| "--warnings")
      WARN="-w"
    ;;
   ("-n")
      export NB=$2
      shift
    ;;
    (--nb=*)
      export NB=${1#*=}
    ;;
    (*)
      usage
       exit 1
    ;;
  esac
  shift
done

echo Encode
while read -r lat lon || [[ -n "$lat" ]]; do
  if [ \( -z "$lat" \) -o \( "$lat" = "#" \) ] ; then
    continue
  fi
  t_accuracy $WARN $lat $lon >/dev/null
  res=$?
  if [ $res -ne 0 ] ; then
    if [ $res -eq 1 ] ; then
      exit 1
    else
      echo "Occured with " $lat " " $lon 1>&2
    fi
  fi
done < EncodeOk.txt

echo Decode
let L=0
let C=1
while read -r ctx cod lat lon loc glob || [[ -n "$ctx" ]]; do
  if [ \( -z "$ctx" \) -o \( "$ctx" = "#" \) ] ; then
    continue
  fi

  # Async launch
  t_accuracy $WARN $ctx:$cod >/dev/null &
  pids[${C}]=$!
  comm[${C}]="$ctx:$cod"

  # Each NB, wait for all to end, check result
  R=$((C % NB))
  if [ $R -eq 0 ] ; then
    let i=1
    for pid in ${pids[*]}; do
      wait $pid
      res=$?
      if [ $res -ne 0 ] ; then
        if [ $res -eq 1 ] ; then
          exit 1
        else
          echo "Occurred with " ${comm[${i}]} 1>&2
        fi
      fi
      let i=$i+1
    done
  fi
  let C=$C+1

  # Show a dot each 100
  R=$((L % 100))
  if [ $R -eq 0 ] ; then
    echo -n "."
  fi
  let L=$L+1

done < DecodeOk.txt
echo

echo "Done."
