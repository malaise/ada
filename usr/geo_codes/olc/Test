#!/bin/bash
if [ "$1" = "clean" ] ; then
  exit 0
fi

# Default values for local test
export TDIR=test
export SEP=" "
export TRUNC=0
export ENCODE_FILE="$TDIR/Encode"
export DECODE_FILE="$TDIR/Decode"
export STATUS_FILE="$TDIR/Status"
export SHORT_FILE="$TDIR/Status"
if [ -n "$1" ] ; then
  export TDIR="$1"
  export SEP=","
  export TRUNC=1
  export ENCODE_FILE="$TDIR/encoding.csv"
  export DECODE_FILE="$TDIR/decoding.csv"
  export STATUS_FILE="$TDIR/validityTests.csv"
  export SHORT_FILE="$TDIR/shortCodeTests.csv"
fi

# Report an error
function error {
  echo "ERROR: $1." 1>&2
  exit 1
}

# Check that $2 = $3
# if $1 is -d then compare floats modulo Espilon
# Echo 0 if OK and 1 otherwise
function check {
  if [ "$1" = "-d" ] ; then
    echo $2 | awk -v EXPECT="$3" -v EPS="1.0E-7" '
    function abs(v) {return v < 0 ? -v : v}
    {
      NEXPECT=split(EXPECT, EXPECTS)
      NOUTPUT=split($0, OUTPUTS);
      if (NEXPECT != NOUTPUT) {print "1"; exit}
      for (i = 1; i < NEXPECT+1; i++) {
        E = 0.0+EXPECTS[i]
        O = 0.0+OUTPUTS[i]
        D = abs(E - O)
        if (D > EPS) {
          if (E < 0.0) E += 360.0
          if (O < 0.0) O += 360.0
          D = abs(E - O)
          if (D > EPS) {
            print "1"
          }
        }
      }
      print "0"
    }
    '
  else
    if [ "$2" = "$3" ] ; then
      echo 0
    else
      echo 1
    fi
  fi
}

# Adjust lat and long
function adj_lat {
  echo $1 | awk '
  ($1 > 90) {
    printf 90
    next
  }
  ($1 < -90) {
    printf -90
    next
  }
  {
    printf $1
  }
  '
}

function adj_lon {
  echo $1 | awk '
  {
    while ($1 >= 180) {
      $1-=360
    }
    while ($1 < -180) {
      $1+=360
    }
    if (int($1) == $1) {
      printf $1
    } else {
      printf "%.9f", $1
    }
  }
  '
}

# Stop loop on Ctrl-C
export CPID=0
function stop_loop {
  if [ "$CPID" != 0 ] ; then
    kill $CPID
    CPID=0
  fi
}
trap 'echo "Aborted"; stop_loop; exit 1' SIGINT SIGTERM

# 5s of loop of random tests
echo "5s of random tests"
./LoopRndTest&
export CPID=$!
sleep 5
stop_loop
res=$?
if [ $res -ne 0 ] ; then
  error "Random test failed"
fi
sleep 1
echo ""

# Encode
echo Encode
# For each line, read code precision lat lon precision code
while IFS="$SEP" read -r lat lon prec code ; do
  if [[ $lat =~ ^#|^$ ]] ; then
    continue
  fi
  if [ $TRUNC -eq 1 ] ; then
    lat=`adj_lat $lat`
    lon=`adj_lon $lon`
    code=${code:0:16}
    if [ $prec -gt 15 ] ; then
      prec=15
    fi
  fi
  # Encode
  result=`t_olc -c $lat $lon $prec`
  if [ $? -ne 0 ] ; then
    error "t_olc -c $lat $lon $prec has failed"
  fi
  # Parse result: Code
  if [ "$result" != "$code" ] ; then
    error "t_olc -c $lat $lon $prec returned $result instead of $code"
  fi
  echo "t_olc -c $lat $lon $prec => $result"
done <"$ENCODE_FILE"

# Decode
echo Decode
# For each line, read code precision lat1 lon1 lat2 lon2
while IFS="$SEP" read -r code prec lat1 lon1 lat2 lon2  ; do
  if [[ $code =~ ^#|^$ ]] ; then
    continue
  fi
  if [ $TRUNC -eq 1 ] ; then
    code=${code:0:16}
  fi
  # Decode
  result=`t_olc -d $code`
  if [ $? -ne 0 ] ; then
    error "t_olc -d $code has failed"
  fi
  # Parse result: lat1 lon1 lat 2 lon2
  res=`check "-d" "$result"  "$lat1 $lon1 $lat2 $lon2"`
  if [ "$res" != "0" ] ; then
    error "t_olc -d $code => $result instead of $lat1 $lon1 $lat2 $lon2"
  fi
  echo "t_olc -d $code => $lat1 $lon1 $lat 2 $lon2"
done <"$DECODE_FILE"
echo OK.

# Size and Full status
echo Size
# For each line, read code precision
while IFS="$SEP" read -r code prec tail ; do
  if [[ $code =~ ^#|^$ ]] ; then
    continue
  fi
  if [ $TRUNC -eq 1 ] ; then
    code=${code:0:16}
  fi
  # Get status
  result=`t_olc -S $code`
  if [ $? -ne 0 ] ; then
    error "t_olc -S $code has failed"
  fi
  # Parse result: precision status
  res=`check "-s" "$result"  "$prec Full"`
  if [ "$res" != "0" ] ; then
    error "t_olc -S $code => $result instead of $prec Full"
  fi
  echo "t_olc -S $code => $prec Full"
done <$DECODE_FILE
echo OK.

# Various status 
echo Status
# For each line, read code and status ((2 fields max)
while IFS="$SEP" read -r code stat1 stat2 stat3 ; do
  if [[ $code =~ ^#|^$ ]] ; then
    continue
  fi
  if [ $TRUNC -eq 1 ] ; then
    tcode=${code:0:16}
    if [ $stat1 = false ] ; then
      stat1="Invalid"
    elif [ $stat2 = true ] ; then
      stat1="Short"
    elif [ $stat3 = true ] ; then
      stat1="Full"
    else
      stat1="No_Full"
    fi
  else
    tcode=${code}
  fi
  # Get status
  result=`t_olc -S $tcode`
  if [ $? -ne 0 ] ; then
    error "t_olc -S $tcode has failed"
  fi
  # Parse result: status
  if [ "$stat1" = "Invalid" ] ; then
    res=`check "-s" "$result"  "$stat1"`
  else
    if [ $TRUNC -eq 1 ] ; then
      result=`echo -n $result | cut -d ' ' -f2`
      res=`check "-s" "$result"  "$stat1"`
    else
      res=`check "-s" "$result"  "$stat1 $stat2"`
    fi
  fi
  if [ "$res" != "0" ] ; then
    if [ ${#code} -le 16 ] ; then
      # After truncation, test can be OK despite input code was invalid
      error "t_olc -S $tcode => $result instead of $stat1 $stat2"
    fi
  fi
  echo "t_olc -S $tcode => $stat1"
done <$STATUS_FILE
echo OK.

# Short
echo Short
# For each line, read code lat, Lon Short and Kind (R, S or B)
while IFS="$SEP" read -r code lat lon short kind ; do
  if [[ $code =~ ^#|^$ ]] ; then
    continue
  fi
  # Test shorten
  if [ \( "$kind" = "S" \) -o \( "$kind" = "B" \) ] ; then
    result=`t_olc -s $code $lat $lon`
    if [ $? -ne 0 ] ; then
      error "t_olc -s $code $lat $lon has failed"
    fi
    # Parse result: short
    res=`check "-s" "$result" "$short"`
    if [ "$res" != "0" ] ; then
      error "t_olc -s $code $lat $lon => $result instead of $short"
    fi
    echo "t_olc -s $code $lat $lon => $short"
  fi
  # Test nearest
  if [ \( "$kind" = "R" \) -o \( "$kind" = "B" \) ] ; then
    result=`t_olc -n $short $lat $lon`
    if [ $? -ne 0 ] ; then
      error "t_olc -n $short $lat $lon has failed"
    fi
    # Parse result: full code
    res=`check "-s" "$result" "$code"`
    if [ "$res" != "0" ] ; then
      error "t_olc -n $short $lat $lon => $result instead of $code"
    fi
    echo "t_olc -n $short $lat $lon => $short"
  fi
done <$SHORT_FILE
echo OK.

