Enigma
======

Enigma is a simulator of the cypher machine used by the Germans during 2nd
world war. This typing machine was based on switches and rotors that
translated letters.

The rotors are statically defined off line in a XML file. The choice of
rotors, their initial position and the switches are provided as arguments to
the simulator.


Definitions in configuration
----------------------------
All rotors and reflectors are defined in a XML configuration file (name from
ENV ENIGMA_CONF_FILE, default "enigma.xml"). They must all have different names.

A definition like:

     BCDEFGHIJKLMNOPQRSTUVWXYZA

means that A->B, N->O, Z->A...

     ABCDEFGHIJKLMNOPQRSTUVWXYZ
     |            |           |
     V            V           V
     BCDEFGHIJKLMNOPQRSTUVWXYZA

Rotor carries are the offsets at which next rotor will turn together with
current. Rotors with no carry can only appear at first position in the command
line (slowest). Rotors with no carry don't turn except if they are alone
(the only rotor defined).

For a reflector, the definition must be symmetrical and with no identity.

Enigma command line
-------------------
Syntax: enigma <reflector_def> [ <rotor_defs>  ] [ <rotor_inits> ]
               [ <switches> ] [ <first_index> ] [ <last_index> ]

   <reflector_def> ::= <reflector_name>[@<upperletter>]
   <rotor_defs>    ::= -r{ [#]<rotor_name>@<ring_offset>[#] }
   <rotor_inits>   ::= -i{ <upperletter> }
   <switches>      ::= -s{ <upperletter><upperletter> }
   <first_index>   ::= -f<positive>       (default 1)
   <last_index>    ::= -l<positive>       (default none)
   <ring_setting>  ::= <upperletter>
   <upperletter>   ::= A .. Z

Semantic:

- The reflector is defined by its name and the optional letter of offset
(constant).

- Up to 4 rotors can be defined (and one reflector must be defined). They
must all have different names.
+
The rotors (optional) definition consists in
<rotor_defs> (rotor name @ ring setting, separated by #) and
<rotor_inits>, the initial position of each rotor.
+
The first rotor on the command line is the slowest and is the one crossed just
before the reflector. It is called the last rotor. Reversely the last rotor
on the command line is the one that turns at each character and is called the
first rotor.
+
So for command line "I IV V", the coding will go through V, IV, I, the
reflector, then back through I, IV and V.
+
Only the last rotor can have no carry.

- Rotor initial offsets is optional. If it is set it must define an offset
for each rotor defined.

- The switches definition follows the same logic but defines only the
letters that change in the coding (all other letters are kept
unchanged), ex: AZBJMGYC. Note that 13 pairs maximum can be defined, with no
identity and each letter can appear at most once (implicit symmetry).

- The first_index number defines the offset of input text from which the
decoding starts (default 1).

- The last_index number defines the offset of input text after which the
decoding stops (default none, offset of last character of input).

Examples:

For reflector Cthin offset B:
--------------------------------
Cthin@B
--------------------------------
For rotors I (fastest) offset F, IV offset Q and Beta (slowest) offset A:
--------------------------------
-rBeta@A#IV@Q#I@F.
--------------------------------
For initial position of the rotors above:
--------------------------------
-iDIV
--------------------------------
For switches a<-->L, B<-->E and C<-->W:
--------------------------------
-sALBECW
--------------------------------
Valid command lines:
--------------------------------
A@A -rIX@M#IV@N#V@G -iAHD -sALBICTDJEMFOGU
A@A -rI@A -s -f55
Cthin
--------------------------------

Enigma behaviour
----------------
Data flows:;;
     The program reads from stdin a flow of bytes to code and outputs the
     corresponding coded flow on stdout. Uppercase letters are coded the
     standard enigma way (see xref:XCodingRule[coding rule] below). Lower
     letters are converted to uppercase, codded, then converted to lowercase.
     Other bytes are not coded (they are output unchanged on stdout).

Stepping rules:;;
     Rotors turn before the coding. The Enigma double stepping behavior
     applies except:

 * on the first rotor, which always turns one step,
 * on the last rotor, if not alone and has no carry, which never turns,
 * on the one but last rotor if the last rotor has no carry, which turns only
if the previous rotor was on a carry.

anchor:XCodingRule[]

Coding rule:;;
     The input letter (uppercase) is encoded through the switches, through all
     the rotors, then through the reflector (this is called encoding). It is
     then encoded the other way through all the rotors and the switch (this
     is called decoding). The complete cycle is called coding.

      + <------ +-----+ <- +-----+ <- +--------+ <- Input
 |Reflector|    |Rotor|    |Rotor|    |Switches|
      + ------> +-----+ -> +-----+ -> +--------+ -> Output

Coding and decoding algorithm
-----------------------------
Letters are represented by a modulus 0 .. 25, which is called the Id (A->0,
B->1, .. Z->25).  Coding X through a rotor or through the reflector means:

- The current offset O of the rotor is the 'number of increments' - 'ring
setting' and the offset O of the reflector is constant

- Input I is X + O

- Output U from I is got from the scrambler definition of the rotor

- The final result R is U - O

Decoding is similar except that I = X - O, the scrambler is inverted and then
R is U + O.

A scrambler is made of an array of 26 different Ids.

General Design
--------------
The software is decomposed into the following components:

- A Definition that checks and loads the configuration file, and initializes
the machine from it.

- The Io_Manager, that reads and writes bytes. It supports:

  Skip (Nb_Bytes);  -- From input flow
  Read -> Byte;     -- Or raises End_Error
  Write (Byte);

- The Coder, that encodes uppercase characters. It supports:

  Init;   -- Using the Definition to init the enigma
  Encode (Upper_Char) -> Upper_Char;

- The main inits the scrambler factory then the Coder, then run the scheduler.

  Io_Manager.Skip (Nb_Bytes);  -- From the command line
  loop
    Byte := Io_Manager.Read;
    case Byte_Kind is
      when Upper_Char =>
        Byte := Coder.Encode (Byte);
      when Lower_Char =>
        Byte := Lower_Char (Coder.Encode (Upper_Char (Byte)));
      when others =>
        null;  -- Byte unchanged
    end case;
    Io_Manager.Write (Byte);
  end loop;

Coder Design
------------
The initialization consists in getting the definitions, making the coders
through the factory and storing them.

Encoding an upper character consists in:

- Turning the rotors (double stepping applies)

- Encoding through the switches

- Encoding through the rotors (right to left, fastest to slowest)

- Encoding through the reflector

- Decoding through the rotors (left to right, slowest to fastest)

- Encoding through the switches

- Returning the coded upper character.

Compatibility
-------------
Enigma can simulate Enigma M3 and M4 machines, but it also allows more
combinations than the physical machines (rotors are from 0 to 4, no
restriction on the combination of the first (slowest) rotor and the reflector,
on the offset of the reflector...).

M3 compatible configurations shall use a reflector from A to C with no offset
and three rotors from I to VIII.

M4 compatible configurations shall use a reflector Bthin or Cthin with no
offset, then the rotor Beta or Gamma, and then three rotors from I to VIII.

Tools
-----
Automatic configuration with def_enigma
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Def_enigma is a tool that automatically generates enigma settings, either
randomly or based on a date.

  Usage: def_enigma [ -text ]   <date> | today | rnd | <text_key> | <enigma_setting>
    date ::= dd/mm/YYyy
    <enigma_setting> ::= <reflector> [ <rotors> <rotors_init> ] [ <switches> ]

If rnd, generates a random switch sequence, 3 or 4 rotors ("I" to "X") and a
random reflector ("A" to "C").

If <date>, generates a switch sequence, 3 rotors and the reflector from the
date.

If "today", same with current date.

If <text_key>, parses the text key and displays the corresponding settings (see
xref:XT-TextKey[Text Key]).

If <enigma_setting>, check and displays these enigma arguments.

If -text, also generates text key (see xref:XT-TextKey[Text Key]).

Rotors ("I", "II" .. "X") and reflectors ("A", "B" and "C") must be defined 
defined in a XML file, as for enigma.

Normal generation
^^^^^^^^^^^^^^^^^
The date is either provided or is current date.

The date that is considered is DAYNAME DAYNUM MONTHNAME.

There are 3 rotors.

Reflector
+++++++++
The Reflector num is 1 to 3, computed from DAYNUM: +
01->1, 02->2, 03 -> 3, 04 -> 1... +
The reflector name is "A" for 1, "B" for 2 and "C" for 3.

Its offset is 0 (A).

Rotors
++++++
There are 3 rotors:

- The first rotor number is the unit of DAYNUM, with 1->1 .. 10->10, 11->1.

- The second rotor number is the tenth of DAYNUM, with 0..9->1, 10..19->2,
20..29->3 and 30..31 ->4. If used by first rotor, then add 1.

- The third rotor number is the month num rem 10 with 1->1 .. 10->10, 11->1...  If
used by first or second rotor, then add 1.

The rotor names are "I" for 1, "II" for 2 .. "X" for 10.

The rotor ring offsets are the first three letters of DAYNAME respectively.

The rotor initial offsets are the first three letters of MONTHNAME
respectively.

Switches
++++++++
The switches definition is got from the letters of DAYNAME and MONTHNAME, with
criteria of uniqueness, no identity and even number (and max 26 letters).

Ex MONDAY DECEMBER -> MONDAYECBR.

Random generation
^^^^^^^^^^^^^^^^^
The reflector num is random from 1 to 3. +
"C". +
It has no offset (A).

The rotors are a random number (3 to 4 included) of random rotors (1 to 10),
each with a random ring offset letter and a random initial offset letter.

The switch is a random list (1 to 12 included) of random pairs of letters

Text key
^^^^^^^^
anchor:XT-TextKey[]
The default output format is a valid set of arguments for enigma.

If optional -text option is provided, the setting (given as argument,
given in text, computed from random, computed from current date or from
provided date) is also translated to text:

- The switch definition is displayed, followed by a random letter repeated
(a letter cannot appear twice in switch definition).

- Then the rotors are displayed but their number in letters instead of
name, each with the ring offset then the initial offset.

- Then the reflector number in letters and its offset, then the reflector offset
is repeated (so that, like a rotor, it is a number in letters then two letters),

- Then a ''Z'' (which cannot start a digit in letters), which marks the end.

Example:
--------------------------------------
C@A -rI@H#VII@R#II@U -iUAQ -sAEBM -> AEBMPPONEHUSEVENRATWOUQTHREEAAZ
--------------------------------------

This format of text key is also supported as argument, then it is parsed and
displayed as normal enigma settings.

Handling punctuation with letterator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Letterator is a tools that ecodes each ASCII chararacter from stdin into a
unique pair of uppercase letters on stdout, and vice versa (ex: \'a' <--> "GL").

  Usage: letterator -c | -d    [ -f<first_index> ] [ -l<last_index> ]
  Use -c for coding and -d for decoding
  Use -f and -l to specify the range of characters from stdin to process (like for enigma)

Random encoding with enigmacode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Enigmacode is a tool that encodes stdin with a random key.

This key is itself encoded with the given date or with today, and prepended at
the beginning of the output file.

Similarly, given a date or with today it decodes from stdin a string that it has
encoded.

  Usage: enigmacode -c | -d  [ <date> ]
    <date> ::= jj/mm/YYyy

Exemples:

--------------------------------------
echo "This is a test." | enigmacode -c
--------------------------------------
encodes "This is a test." (appending a line feed), using the current date as
key, and outputs

  JEVKZFGWZDWHVDYXFETLZFAWJKQCWWXNEDSVIVGDCFZDWKEWVFLYVSAYEQQ.

--------------------------------------
echo -n JEVKZFGWZDWHVDYXFETLZFAWJKQCWWXNEDSVIVGDCFZDWKEWVFLYVSAYEQQ | enigmacode -d 24/12/2014
--------------------------------------
decodes this string if it was encoded with the date 23/12/2014 and outputs

  This is a test.

(with the line feed)

NOTE: It is important to use the '-n' option of echo when providing the key to
enigmacode, otherwise echo would append a line feed.


Coding
^^^^^^
A random key is generated in arguments and text:
--------------------------------------
def_enigma -text rnd
--------------------------------------
This generates 'key_num' and 'key_text'.

The key in text is coded, with a key generated from the given date or today,
at the beginning of the coded file:

--------------------------------------
echo -n $key_text" | enigma `def_enigma <date>  > <coded_file>
--------------------------------------

The input file is coded with the random key and appended to the coded file
--------------------------------------
letterator -c | enigma $key_num >> <coded_file>
--------------------------------------

Decoding
^^^^^^^^
Extract temporarily the 67 first characters from the coded file, (67 because
26 for switch, 2 for separator, 4 * 7 + 3 (5 is longest number in letters
e.g. SEVEN) for the 4 max rotors, 5 + 3 (number+offset twice+"Z") for the
reflector.

Use the key generated from the provided date or today:
--------------------------------------
datekey=`def_enigma <date>`
txtkey=`enigma $datekey -l67 < <coded_file>`
--------------------------------------

Look in the temporary result for a valid text key. Note the offset 'start' of
the first letter following this sequence.
--------------------------------------
numkey=`def_enigma $textkey` ; start=$?
--------------------------------------

Decode the remaining text with the key:
------------------------------------------
enigma <numkey> -f$start  < <coded_file> | letterator -d > <decoded_file>
------------------------------------------

