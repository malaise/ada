Complex coding
--------------
A random key is generated in arguments and text:
def_enigma rnd -text
This displays <key_args> and <key_text>.

The key in text is coded, with a key generated from the current day, at the
beginning of the coded file:
echo -n "<key_text>" | enigmadef  > <coded_file>
Enigmadef can also be provided a <date> argument:
echo -n "<key_text>" | enigmadef <date>  > <coded_file>

The input file is coded with the random key and appended to the coded file
enigma <key_args>  < <input_file>  >> <coded_file>

Complex decoding
----------------
Extract temporary in the decoded file the 117 first characters from the coded
file, with the key generated from the current or a known date:
enigma `def_enigma [ <date> ]` -l123  < <coded_file>  > <decoded_file>
(123 because 26*2 for swich, 3 for JJJ, 8 * 7 (5 is longest number in letters
e.g. SEVEN) for the 8 max jammers, 6 * 2 for the back.

Look in the temporary file for the "JJJ" then read the key in text, until
<num_in_text><letter><letter><num_in_text>. Note the offset <offset> of the
first letter following this sequence.

Display the key in text:
enigma `def_enigma [ <date> ]` -l<offset-1>  < <coded_file>
Translate the text key into the enigma key <key> (-s<switch> -j<jammers>
-b<back>):
<switch> is before the "JJJ", jammers and back follow, back scrambler is
last <num_in_text>.

Decode the remaining text with the key:
enigma <key> -f<offset>  < <coded_file>  > <decoded_file>

