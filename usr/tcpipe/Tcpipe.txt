Tcpipe
======

Tcpipe is a program that relays TCP connections.

Typical usage is to start two tcpipe instances on different hosts: a server and
a client that connects to this server.

When a user application connects to one tcpipe instance, the other tcpipe
instance connects to another user application and both instances relay the
data from one user application to another.


Syntax
------
...................................
Usage: tcpipe <mode> [ <ports> ] [ <target> ]
<mode>     ::= <client> | <server>
<client>   ::= -c <host>:<port> | --client="<host>:<port>"
<server>   ::= -s <port> | --server="<port>"
<ports>    ::= -p <port_list> | --ports="<port_list>"
<portlist> ::= <port>[{,<port>}]
<target> ::= -t <host> | --target="<host>"
...................................

The <client> and <server> options define the connection between two tcpipe
instances. Each client conects to one and only one server, and each server
accepts only one connection at a time.

The ports are the ones on which tcpipe accepts connections from user
applications.

The target host is the one to which tcpipe attempts to connect to user
applications.

NOTE: The only constraintes is that, for one pair of tcpipe, all the user
'server' applications must be on the same node.

Goal
----
Tcpipe can be useful for multiplexing several TCP connections between several
user applications within one TCP connection, especially through a firewall.

 * This reduces the number of TCP connections through the firewall,
 * This allows connections between user applications to be established
despite the filters of the firewall (allowed ports, direction of connection...).

Usage - Example
---------------
On the host host1 start "tcpipe -s 50000 -p 40000,40001" +
On the host host2 start "tcpipe -c host1:50000 -t appli2" +
-> tcpipe on host2 connects to tcpipe on host1, port 50000 +
On the host appli2 that can be reached by host2, start a user application that
accepts connections on port 40000 +
On a host appli1 that can reach host1, start a user application that connects
to host1 on port 40000 +
-> tcpipe on host1 accepts the connection from the user application in
appli1 +
-> tcpipe on host2 connects to the user application on appli2 +
-> data sent by any of the user applications is relayed to the other +
On the host appli2 start a user application that accepts connections on port
40001 +
On a host appli3 that can reach host1, start a user application that connects
to host1 on port 40001 +

Behaviour
---------
.Connection
The client tcpipe instance T1 tries to connect the the server tcpipe instance
T2.
Once connected it accepts connections from user applications on all the
specified ports.

When a user application connects to a port of T1 and T1 accepts the connection,
then:

* T1 stops accepting connections on this port (so there is at most one
connection at a time on each port)
* T1 transmits a connection request to its partner T2 (if any)
* the partner T2 tries to connect to the target on the same port

If any of these steps fails (no partner or failure to connect to target) then
the tcpipe T1 closes the connection from its user application.

.Disconnection
Any disconnection between both tcpipe instances leads these instances to close
all the connections with their local user applications. The client tcpipe T1
instance then tries to reconnect the the server tcpipe instance.

Any disconnection of a user application from an instance leads the other
instance to close the corresponding connection with its user application.

Protocol
--------
Messages exchanged between tcpipe instances are either transfer of data or
service messages.

These messages are made of:

* a Kind: Connect, Disconnect or Data
* a Port: port number concerned
* a Local: boolean indicator (Local=True means a connection from a user
application, otherwise it means a connection to a user application).
Connect message is always not Local.
* a String: the data when kind is Data

