# Convert several kinds:
# km <-> Nm    0 decimal, the default
# cm  -> in    Inches + fraction
# C  <-> F
# hP <-> Hg    0 / 2 decimals
# ms  -> kt
# €  <-> f     2 decimals
# m  <-> ft
# l  <-> gal   0 / 1 decimal
# mi  -> Nm
# Process inputs one by one
# Each input is a string made of an inte or a real, and a unit

# Error handling
[
  "Error. Invalid argument " put putl
  "Expecting strings of <num><unit>, where <num> is an inte or a real" putl
  " and <unit> is one of: km Nm cm C F hPa Hg ms € f m ft l gal" putl
  1 setexit ssize popn retall
] Z popr

# Format a real number, rounding at 1 digits
0 format
[
dup isneg [ "-" put absv ] ifcall
10.0 *
round dup
1 format 10 / strof "." strcat swap
# Display frac (1 digits) and unit
10 % 1 True "0" normal
strcat
] Y popr

# Format a real number, rounding at 2 digits
0 format
[
dup isneg [ "-" put absv ] ifcall
100.0 *
round dup
1 format 100 / strof "." strcat swap
# Display frac (2 digits) and unit
100 % 2 True "0" normal
strcat
] X popr

# Check that ToS (real) is >= 0.0
[ dup isneg Z pushr ifcall ] W popr

# Conversions depending on unit.
# Stored in registers a to o and A to O
"km" a popr [ W pushr call 1.852 / round put "Nm" putl ] A popr
"Nm" b popr [ W pushr call 1.852 * round put "km" putl ] B popr
"cm" c popr
[ W pushr call
  # Convert into inches and round to 1/8th
  0.393701 * 8.0 * round
  # Extract integer and reminder parts
  dup 8 / pope 8 %
  # Format tail (reduce fraction)
  # Replace 0:1 by "" otherwise replace x:y by "x/y"
  toarbi @8 mkfrac dup @0:1 =
  [ pop "" ] [ strof 3 5 strsub 2 "/" strovw ] ifte call
  1 format pushle put """" put putl
] C popr
"C" d popr [ 1.8 * 32.0 + round put "F" putl ] D popr
"F" e popr [ 32.0 - 1.8 / round put "C" putl ] E popr
"hPa" f popr [ W pushr call 0.029529983071445 * X pushr call
put "Hg" putl ] F popr
"Hg" g popr [ W pushr call 0.029529983071445 / round put "hP" putl ] G popr
"ms" h popr [ W pushr call 1000.0 / 3600.0 * 1.852 / round
put "kt" putl ] H popr
"€" i popr [ W pushr call 6.55957 * X pushr call put "f" putl ] I popr
"f" j popr [ W pushr call 6.55957 / X pushr call put "€" putl ] J popr
"m" k popr [ W pushr call 3.28084 * round put "ft" putl ] K popr
"ft" l popr [ W pushr call 3.28084 / round put "m" putl ] L popr
"l" m popr [ W pushr call 3.785411784 / Y pushr call put "gal" putl ] M popr
"gal" n popr [ W pushr call 3.785411784 * round put "l" putl ] N popr
"mi" o popr [ W pushr call 0.8684210526 * round put "Nm" putl ]
O popr

"" p popr
# Registers up to t and T included are available

# Loop on each argument
[
  ssize 0 = ifret
  x copyr
  # Check syntax: int or real, then 1, 2 or 3 letters of unit
  dup "^-?[0-9]+(\.[0-9]+)?[a-zA-Z€]{1,3}$" regmatch isnull Z pushr ifcall
  # Extract val and unit
  dup "[a-zA-Z€]" regmatch u popr
  dup 1 u pushr 1 - strsub dup
  caninte [ strinte toreal ] [ strreal ] ifte call v popr
  dup strlen u pushr swap strsub u popr
  # Loop: search for matching unit, error if not found
  a
  [
    # End of list of units => no match
    dup pushr "" = [ pop x pushr Z pushr call ] ifcall
    # Check if match
    dup pushr u pushr =
    # If unit matches => call conversion and switch to next input
    [ v pushr swap regind 26 - indreg pushr call 2 retn ] ifcall
    # Else try next unit
    nextr
  V pushr retacal ] V copyr call
U pushr retacal ] U copyr call

