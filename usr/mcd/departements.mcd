# Select a random departement number
# 1..19 2A 2B 21..95 971..974 976
# Put it for some seconds then put its name, its prefecture and its region,
#  then wait for Enter, loop

# Input key will not echo
isstdio ~ [ false inecho ] ifcall
# Delay before putting the answer
6.0 a popr
# Delay between two questions
2.0 b popr

# Function that waits during some seconds (ToS) or any input
# If in flow is stdio, then only wait (no input)
[ isstdio [ sleep ] [ inkeytim pop ] ifte call ] I popr

# Load the file with numbers and names
"departements.dat" readlins
dup isinte ~ [ "ERROR: data file not read" putl pop retall ] ifcall
# Number of entries must be multiple of 4 and > 0
4 f popr
dup 0 = [ "ERROR: empty data file" putl pop retall ] ifcall
dup f pushr % 0 = ~ [ "ERROR: invalid data file" putl ssize popn retall ] ifcall
f pushr / N popr

# Store a department: number in n[Index], name in N[Index]
#  prefecture in P[Index] and region in R[Index]
# Stop after storing Index = N
# Input stack is: Index "Num" "Name", output stack is Index + 1
1
[
# Save index
i copyr
# Store num
n swap popa
# Store name
i pushr
N swap popa
# Store prefecture
i pushr
P swap popa
# Store region
i pushr
R swap popa
# Stop after inserting Nth pair
i pushr copye N pushr = ifret
# Increment index
i pushr 1 +
# Loop
S pushr retacal
] S copyr call

# Dump: Index Number Name Prefecture Region (used for debug)
3 format
[
dup put " " put dup n swap pusha put " " put dup N swap pusha put " " put
dup P swap pusha put " " put dup R swap pusha putl
# Stop loop after putting index N
dup N pushr = ifret
# Increment index
1 +
D pushr retacal ] D popr
# Call dump if debug
# 1 D pushr call pop

# Now the game: infinite loop
[
# Take a random number from 1 to N
rnd N pushr toreal * trunc 1 +
# Put its Num during some seconds or any input
dup n swap pusha put ": " put a pushr I pushr call
# Put its Name, Prefecture and Region
dup N swap pusha put " -> " put
dup P swap pusha put " -> " put dup R swap pusha putl
# Wait for some seconds or any input
b pushr I pushr call

# Loop
M pushr retacal ] M copyr call

