# Conversion of labour into cost
# Input is "<amount><unit>"
#  Amont is inte or real
#  Unit is:
#  my : man x year
#  mm : man x month
#  md : man x day
#   h : hour
#  em : kilo Euros for management / architects
#  ei : kilo Euros fo engineers
# Output is a table with all the avlues above (including input)

# True debugall

# Function to abort
[ ssize popn 1 setexit retall ] A popr

# Function to check an argument
[ "ERROR: Invalid argument." putl
"Usage: colab { ""<amount><unit>"" }" putl
"<unit> ::= my | mm | md | h | kem | kei" putl
A pushr call
] E popr

# Function to check a rate: skip empty line and comment
# Check it is the string of a real or inte, pope the real
[
dup strnull [ pop 2 retn ] ifcall
dup 1 1 strsub "#" = [ pop 2 retn ] ifcall
dup dup canreal [ strreal v popr ] ifcall
dup caninte [ strinte toreal v popr ] ifcall
v emptyr [ "ERROR: Invalid rate " put put "." putl A pushr call ] ifcall pop
v pushr pope v clearr ] R popr

# Read rates from file in Env var COLAB_RATES
#  Check env var
"COLAB_RATES" e copyr getenv dup isbool
[ "ERROR: Env variable " put e pushr put " is not set." putl
A pushr call ] ifcall
#  Read file
e copyr readlins i copyr isbool
[ "ERROR: Cannot read rates from file " put e pushr put "." putl
A pushr call ] ifcall
#  Parse rates, (pope them)
[
i pushr isnull ifret i pushr 1 - i popr
R pushr call
P pushr retacal ] P copyr call
esize 5 /= [ "ERROR: Invalid file content." A pushr call ] ifcall

# Store factors versus 1 hour: my mm md em ei
# Hours in 1 (man) year
pushfe y popr
# Hours in 1 (man) month
pushfe m popr
# Hours in 1 (man) day
pushfe d popr
# Cost of one hour Mng
pushfe a popr
# Cost of one hour Eng
pushfe i popr

# For putting the title once
False t popr

# String image with 7 digits of int part and 1 digit of fraction
[ 10 8 "0" normal 1 1 strdel ] I popr

# Once hours are set, display table and add to total
[
# Conversion occured
True r popr
# Title, once
t pushr ~ [
"+------------------------------------------------------------------------+" b copyr putl
"| man year | man month |   man day |  hours | k€ Mng/Archi | k€ Engineer |" putl
"|----------+-----------+-----------+--------+--------------+-------------|" l copyr putl
] ifcall True t popr
"|" put
dup y pushr / I pushr call put " |" put
dup m pushr / I pushr call " " put put " |" put
dup d pushr / round 10 True " " normal put " |" put
dup           round  7 True " " normal put " |" put
dup a pushr * I pushr call "    " put put " |" put
dup i pushr * I pushr call  "   " put put " |" putl
s pushr + s popr
n pushr 1 + n popr
] D popr

# Reverse order of arguments
[
ssize 0 = ifret
pope
O pushr retacal ] O copyr call

# Main loop on all arguments
# Sum of hours
0.0 s popr
0 n popr
[
# 1 arg string
esize 0 = ifret
pushle
dup isstr ~ E pushr ifcall
# Split val and unit
"([0-9]+)(\.[0-9]+)?(.*)" 4 a regsplit
3 /= E pushr ifcall
# Save unit and val
a 3 pusha u popr
a 1 pusha a 2 pusha strcat dup caninte [ strinte toreal ] [ strreal ] ifte call

# Convert into hours depending on unit, then display table
False r popr
u pushr "my"  = [ y pushr * D pushr call ] ifcall
u pushr "mm"  = [ m pushr * D pushr call ] ifcall
u pushr "md"  = [ d pushr * D pushr call ] ifcall
u pushr "h"   = [           D pushr call ] ifcall
u pushr "kem" = [ a pushr / D pushr call ] ifcall
u pushr "kei" = [ i pushr / D pushr call ] ifcall

# No convertion occured?
r pushr ~ E pushr ifcall
# End loop on all arguments
M pushr retacal ] M copyr call

# Separator and total
n pushr 1 > [ l pushr putl s pushr D pushr call ] ifcall

# Tail
t pushr [ b pushr putl ] ifcall

