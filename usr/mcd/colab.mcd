# Conversion of labour into cost
# Input is "<amount><unit>"
#  Amont is inte or real
#  Unit is:
#  my : man x year
#  mm : man x month
#  md : man x day
#   h : hour
#  em : kilo Euros for management / architects
#  ei : kilo Euros fo engineers
# Output is a table with all the avlues above (including input)

# True debugall

# Check args
[ "ERROR: Invalid argument." putl
"Usage: colab { ""<amount><unit>"" }" putl
"<unit> ::= my | mm | md | h | kem | kei" putl
1 setexit
retall
] E popr

# Store factors versus 1 hour
1600.0 y popr 134.0 m popr 7.77 d popr 0.156 a popr 0.106 i popr

# For title once
False t popr

# String image with 7 digits of int part and 1 digit of fraction
[ 10 8 "0" normal 1 1 strdel ] I popr

# Once hours are set, display table
[
# Conversion occured
True r popr
# Title, once
t pushr ~ [
"+------------------------------------------------------------------------+" b copyr putl
"| man year | man month |   man day |  hours | k€ Mng/Archi | k€ Engineer |" putl
"|----------+-----------+-----------+--------+--------------+-------------|" putl
] ifcall True t popr
"|" put
dup y pushr / I pushr call put " |" put
dup m pushr / round 10 True " " normal put " |" put
dup d pushr / round 10 True " " normal put " |" put
dup           round  7 True " " normal put " |" put
dup a pushr * I pushr call "    " put put " |" put
    i pushr * I pushr call  "   " put put " |" putl
] D popr

# Reverse order of arguments
[
ssize 0 = ifret
pope
O pushr retacal ] O copyr call


# Main loop on arguments
[
# 1 arg string
esize 0 = ifret
pushle
dup isstr ~ E pushr ifcall
# Split val and unit
"([0-9]+)(\.[0-9]+)?(.*)" 4 a regsplit
3 /= E pushr ifcall
# Save unit and val
a 3 pusha u popr
a 1 pusha a 2 pusha strcat strreal

# Convert into hours depending on unit, then display table
False r popr
u pushr "my"  = [ y pushr * D pushr call ] ifcall
u pushr "mm"  = [ m pushr * D pushr call ] ifcall
u pushr "md"  = [ d pushr * D pushr call ] ifcall
u pushr "h"   = [           D pushr call ] ifcall
u pushr "kem" = [ a pushr / D pushr call ] ifcall
u pushr "kei" = [ i pushr / D pushr call ] ifcall

# No convertion occured?
r pushr ~ E pushr ifcall
# Loop
M pushr retacal ] M copyr call

# Tail
t pushr [ b pushr putl ] ifcall

