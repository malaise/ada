# Test register ordering and double indirection
# (no arg)
# Note: Registers a to z are reserved

# Generic loop to iterate function in F on registers a .. z
[
F pushr pushr call
dup z = [ pop 2 retn ] ifcall
nextr L pushr retacal
] L popr


# To iterate: store rnd in reg at top of stack and sum in T
[ dup rnd dup T pushr + T popr swap popr ] S popr

# To iterate: put content of reg at top of stack, sum in T, show it
[ dup pushr dup T pushr + T popr putl ] P popr

# Iterate on S, keep total on stack
0.0 T popr
S F popr
a L pushr call
"Sigma: " put T pushr dup putl

# Iterate on P, keep total on stack
0.0 T popr
P F popr
a L pushr call
"Sigma: " put T pushr dup putl

# Check both sigma
/= [ "Error, both sums differ" putl 1 setexit ] ifcall

