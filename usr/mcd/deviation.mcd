# Compute the standard deviation and the variance of a set of values

# Function to handle error
[ "Usage: deviation { <distance> }" putl ssize popn retall ] E popr

# Even number of arguments
ssize 0 = E pushr ifcall

# Function to check and normalize (set it to real) top of stack
[ dup isreal ifret dup isinte [ toreal 2 retn ] ifcall E pushr call ] N popr

# Initialise results
ssize toreal n popr  # Number
0.0 s popr           # Sum
0.0 v popr           # Variance

# Loop on all arguments: compute sum store in estack
[
# Exit when no more arg
ssize 0 = ifret

# Check value and store in extra stack
N pushr call copye

# Update the sum
s pushr + s popr

# Loop
S pushr retacal
] S copyr call

# Compute Average = Sum / Number
s pushr n pushr / a popr

# Loop to compute sum of (Val - Average) ** 2
[
esize 0 = ifret

# Add (Val - Average) ** 2 to Variance
pushle a pushr - dup * v pushr + v popr

# Loop
V pushr retacal
] V copyr call

# Divide Variance by Number
v pushr n pushr / v popr

# Put results
3.010 format
"Number: " put n pushr round putl
"Average: " put a pushr putl
"Variance: " put v pushr putl
"Deviation: " put v pushr sqrt putl

