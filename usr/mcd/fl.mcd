# Compute flight log (add hours.minutes together)

# Can top of stack be assimilated to 0.0
[ absv 1.0e-10 <= ] Z popr

# Error, replace by 0.0 exit
[ "Invalid entry: " put v pushr putl pop 0.0 1 setexit ssize popn 1 setexit
retall ] E popr

# Check that top of stack is valid
[
# Make a real if needed
dup [ toreal ] swap isinte swap ifcall
# * 100, Frac should be 0
dup 100.0 * frac Z pushr call ~ E pushr ifcall
# Frac < 60
dup frac 100.0 * 60.0 >= E pushr ifcall
msd
] C popr

# Loop
[
# Return if no more data in stack
ssize isnul  ifret
# Store value for error tracing
v copyr
# Check
C pushr call
# Add
s pushr + s popr
# Loop
L pushr retacal ] L popr

# Init sum and format
0.0 s popr
3.003 format

# Loop on data
L pushr call

# Display result
s pushr dms dup Trunc 5 format put "h" put
frac 100.0 * round
dup 10 < [ "0" put 1 format putl ] [ 2 format putl ] ifte call

