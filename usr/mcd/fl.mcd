# Can top of stack be assimilated to 0.0
[ absv 1.0e-10 <= ] Z popr

# Error, replace by 0.0 exit
[ "Invalid entry: " put v pushr putl pop 0.0 ] E popr

# Check that top of stack is valid and fix it
# Replace it by mn, hh
[
# Make a real if needed
dup [ toreal ] swap isinte swap ifcall
# * 100, Frac should be 0
dup 100.0 * frac Z pushr call ~ E pushr ifcall
# Frac < 60
dup frac 100.0 * 60.0 >= E pushr ifcall
# Push minutes then hours
dup frac 100.0 * round
swap int round
] C popr

# Loop
[
# Return if no more data in stack
ssize 0 =  ifret
# Store value for error tracing
v copyr
# Check 
C pushr call
# Add
h pushr + h popr
m pushr + m copyr
# Propagate the carry
60 >= [ m pushr 60 - m popr h pushr 1 h popr ] ifcall
# Loop
L pushr retacal ] L popr

# Init sum and format
0 h popr
0 m popr
3.003 format

# Loop on data
L pushr call

# Display result
h pushr 5 format put "h" put m pushr
dup 10 < [ "0" put 1 format putl ] [ 2 format putl ] ifte call

