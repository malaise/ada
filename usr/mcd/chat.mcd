# Display random cats activities
# File chat.dat must contain sentences made of
# - one letter C (for Circé), F (for Fada) or R (for random)
# - a space
# - the activity, e.g.: mange ses croquettes
# Empty lines and comments (lines starting by '#') are skipped
ssize 0 /=
[ "Error: no argument supported." putl ssize popn 1 setexit retall ] ifcall

# Init sentence start: the cat
# ###################
# Stored in registers C and F, themselves stored in b[1..2]
2 M popr F b 1 popa C b 2 popa
"Le petit chat Fada" b 1 pusha popr
"La petite chatte Circé" b 2 pusha popr

# Init sentence end: the activity, stored in a[1..N]
# #################
# Function for error in data format
[ "Error in data file" putl ssize popn 1 setexit retall ] E popr

# Function to process an activity: skip, check and store
[ t copyr
# skip comment or empty line
strlen 0 = ifret
t pushr 1 1 strsub "#" = ifret
# Check format at least 2 chars
t pushr strlen 2 < E pushr ifcall
# First char is C, F or R
t pushr 1 1 strsub dup "C" /= pope dup "F" /= pope "R" /= pope
pushle pushle pushle & & E pushr ifcall
# Second char is space
t pushr 2 2 strsub " " /= E pushr ifcall
# Update counter and store activity in array a[1..N]
t pushr a N pushr 1 + N copyr popa
] T popr

# Read activities
"chat.dat" readlins
isbool [ "Error: cannot read data file" putl ssize popn 1 setexit retall ]
ifcall
# Check all the activities in the stack
0 N popr
[ ssize isnul ifret
T pushr call
S pushr retacal ] S copyr call

# Init time
# #########
# Function to format elapsed time
"format_time.mcd" readfile
dup isbool [ "Error: cannot read time formating sub-program" putl
ssize popn 1 setexit retall ] ifcall
strprog D popr

# Function to be called on break: show total and elapsed time
[ i pushr 3 format put " attitudes vues en " put
clock t pushr - D pushr call put "." putl ] callbrk

# Get start time
clock t popr

# Begin
# #####
# Display number of activities read
"Il y a " put 2 format N pushr put " attitudes:" putl

# Main loop
0 i popr
[
# Set random end of sentence and put num
rnd N pushr toreal * trunc 1 +
2 format dup put " " put
# Get first letter of sentence,
dup a swap pusha 1 1 strsub strregi
# If corresponding register is R then set random
dup R = [ pop b rnd M pushr toreal * trunc 1 + pusha ] ifcall
# Display start of sentence, in Y + offset
pushr put " " put
# Display end of sentence
a swap pusha 1 2 strdel put "." putl
# Increment counter
i pushr 1 + i popr
# Wait a bit
1 sleep
# Loop
pushle copye retacal ]
copye call

