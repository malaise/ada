# Hanoi towers

# Start time
clock z popr
# Error and quit
4 format
[ "Error, 3 arguments: <nb_disks> <from_column> <to_column> expected" putl
  "   nb_disks must be > 0," putl
  "   columns must be a, b or c and different." putl
ssize popn retall ] E popr

# Check 3 args
ssize 3 /= E pushr ifcall

# Store args j=dest, i=origin, n=nb_disks
j popr i popr n popr

# Init total moves
0 t popr

# Check arguments  a <= i j <= c  and  i /= j  and 1 <= n 
i pushr isreg ~ E pushr ifcall
j pushr isreg ~ E pushr ifcall
n pushr isinte ~ E pushr ifcall
i pushr a < E pushr ifcall i pushr c > E pushr ifcall
j pushr a < E pushr ifcall j pushr c > E pushr ifcall
i pushr j pushr = E pushr ifcall
n pushr 1 < E pushr ifcall

# Compute other axis from i, j and push it instead
[ dup a = [ pop b = c b ifte 2 retn ] ifcall
b = [ c = a c ifte 2 retn ] ifcall b = a b ifte ] K popr

# M(i, j, d) Move a disk: display
[ t pushr 1 + t popr "move disk" put put swap " from " put strof put
" to " put strof putl ] M popr

# Move disk 1: Move and return
[ M pushr call 2 retn ] T popr

# H(i, j, d): H(i, k, d-1), M(i, j, d), H(k, j, d-1)
# Stack of arguments: d j i
# H(i, j, 1): T(i, j, 1)
[ dup 1 = T pushr ifcall
# Save arguments in registers
d popr j popr i copyr j pushr d pushr
# Compute K(i, j)
j pushr i pushr K pushr call
k copyr
# Save
# H(i, k, d-1)
i pushr k pushr d pushr 1 - H pushr call
# Restore registers: k d j i
k popr d popr j popr i popr
# M(i, j, d)
i pushr j pushr d pushr M pushr call
# H(k, j, d-1)
k pushr j pushr d pushr 1 - H pushr call
] H popr

# H(i, k, n)
i pushr j pushr n pushr H pushr call

# Done
7 format
" Nb moves: " put t pushr put
1 format
", in " put clock z pushr - daysof putl

