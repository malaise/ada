# Put prime numbers (up to an optional positive inte or arbi or infinite)

# Error Handling
[ "Usage: prime [ <max_number> ]" putl ssize popn 1 setexit retall ] E popr

# Store max in m if set
ssize isnull [ 0 ] ifcall
ssize 1 /= E pushr ifcall
dup isinte [ toarbi ] ifcall
dup isarbi ~ E pushr ifcall
dup dup isneg E pushr ifcall
m popr

# Compute Sqrt of n and store it in s
# and store s + 1 in t and t * t in c
# So s already contains sqrt(n) as long as n < c
# Init with 1 2 and 4
@1 dup s popr dup + dup t popr dup * c popr
[
# If n < c then sqrt(n) is s
n pushr c pushr < ifret
# So it is t=s+1, update s t and c
t pushr dup s popr @1 + dup t popr dup * c popr
] S popr

# Loop on all extra stack
#  j has to be initialised to @0
#  Top of stack has to be true and is replaced by false if i not prime
[
# Done (j = n)?
esize j pushr tointe = ifret
# Check next
j pushr @1 + j popr
# Check sqrt(i) < fe => prime
pushfe copye e copyr
s pushr > dup [ j pushr tointe rotle ] ifcall ifret
# Check i % fe. 0 => not prime
i pushr e pushr % isnull
# Not prime, restore estack (rotate j times from last)
dup [ j pushr tointe rotle swap pop false swap ] ifcall ifret
L pushr retacal ] L popr


# Loop on all numbers
[
# Check current i (store sqrt(i))
i pushr n popr S pushr call
@0 j popr true L pushr call
# I prime?  Put it and insert in estack, incr j
[ i pushr copye putl k pushr @1 + k popr ] ifcall
# Next i
i pushr @1 + i popr
# Stop loop if m /= 0 and then m < j
m pushr dup isntnull swap i pushr < & ifret
# Infinite loop or up to m
P pushr retacal ] P popr

# Function to display elapsed time
"format_time.mcd" readfile
dup isbool [ "Error: cannot read time formating sub-program" putl
ssize popn 1 setexit retall ] ifcall
strprog D popr
clock v popr

# Function to be called on break
[ k pushr strof 1 2 strdel put " prime numbers found in " put
clock v pushr - D pushr call put "." putl ] callbrk

# Start
# 1 is prime
@1 putl
@1 k popr
m pushr @1 = ifret

# First number to check
@2 i popr
P pushr call
pop

