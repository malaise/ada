# Compute the percentages between 2 positive numbers (real or inte) A and B
# B = 1 + x%
# B = A * x%
# A * B% = x
# A + B% = x
# A - B% = x

# Output format
2.004 format

# Error message
[ "Error, 2 positive numbers, ref then val, expected." putl
ssize popn 1 setexit retall ] E popr
ssize 2 /= E pushr ifcall

# Check the content of a reg
[ pushr dup isinte [ toreal ] ifcall
dup isreal ~ E pushr ifcall
ispos ~ E pushr ifcall
] C popr

# A
a popr a C pushr call
# B
b popr b C pushr call

# Format a result (2 digits)
[ toreal 11 8 "0" normal 1 1 strdel put ] P popr

# A is B + x % of B, so x = (A / B) - 1
a pushr toreal b pushr toreal / 1.0 - 100.0 *
0 format
a pushr P pushr call " = " put b pushr P pushr call " " put
# Format result
dup 0.0 <  "-"  "+" ifte put " " put
absv P pushr call "%" putl


# A is x % of B, so x = A / B
a pushr toreal b pushr toreal / 100.0 *
0 format
a pushr P pushr call " = " put b pushr P pushr call " * " put
# Format result
P pushr call "%" putl

# If A < 1000
a pushr toreal 1000.0 <
[

# A% of B (A * B / 100)
a pushr toreal b pushr toreal 100.0 / * p popr
0 format
b pushr P pushr call " * " put a pushr P pushr call "% = " put
p pushr P pushr call newl

# B + A%
b pushr P pushr call " + " put a pushr P pushr call "% = " put
b pushr toreal p pushr + P pushr call newl

# B - A%
b pushr P pushr call " - " put a pushr P pushr call "% = " put
b pushr toreal p pushr - P pushr call newl

] ifcall

