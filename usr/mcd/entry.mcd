# Compute the time when to leave work, according to arrival time and breaks

# Arg error
[
"Error. Usage: entry <entry_time> { [ <leave_time> <entry_time> ] | [ <delta> ] }"
putl
"<delta> ::= :~<time>:" putl
"<time> ::= h[.mn]    and times must be crescent" putl
ssize popn 1 setexit retall
] E popr

# Function to check a time (tos), leave it at tos if OK
#  second of stack is a boolean: true if negative value allowed
[
# Arg must be int or real, 0.0 <= Arg < 24 and frac < 0.60
dup isinte [ toreal ] ifcall
dup isreal ~ E pushr ifcall
swap ~ [ dup isneg E pushr ifcall ] ifcall
dup absv 24.0 >= E pushr ifcall
dup frac absv 0.60 >= E pushr ifcall
] C popr

# Init sum, current oper (entry=true, leave=false)
# Sum is the negative sum of all the deltas
0.0 s popr
true e popr
24.0 p popr

# Loop to parse arguments
[

# Check if arg is a delta, check if arg is a string
false d popr dup isstr
[
# Check for leading '~'
dup 1 1 strsub "~" /= ifret
# If yes, set d
true d popr
# Check it appears after an entry
e pushr ~ E pushr ifcall
# Remove leading '~'
dup strlen 2 swap strsub
# And locate '.' to convert into int or real
dup 1 "." strloc 0 = [ strinte ] [ strreal ] ifte call
] ifcall

# Check time
d pushr swap C pushr call

# Current time must be < previous if not a delta
d pushr ~ [ dup p pushr >= E pushr ifcall dup p popr ] ifcall

# Convert dms to real
msd
# Either substract to s if entry, add to s if leave, switch oper
# Or add delta value
d pushr ~ [ s pushr swap [ - ] [ + ] e pushr dup ~ e popr etfi call s popr ]
[ s pushr swap - s popr ] ifte call

# Exit when no more arg
ssize 0 = ifret

# End Loop
L pushr retacal ] L copyr call


# Check not finishing with a leave
e pushr E pushr ifcall

# Convert 8.0 - s and check validity (0 <= s < 24)
8.0 s pushr - s copyr 0.0 < s pushr 24.0 >= |
[ "Invalid result " put s pushr putl ssize popn 1 setexit retall ] ifcall

# Convert in millisecs
s pushr 3600.0 * 1000.0 * round
# Convert to " days-hh:mm:ss.mmm" and keep hh:mm
daysof 7 11 strsub
# Replace : by h and put
3 "h" strovw "Leave at " put put "." putl

