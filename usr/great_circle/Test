#!/bin/bash

# Error message
function error {
  echo "ERROR: $1." 1>&2
  exit 1
}

# Cleanup
function clean {
  rm -f cmp res out err expout experr
}
trap 'echo ""; clean; exit 1' SIGINT SIGTERM

if [ "$1" = "clean" ]  ; then
  clean
  exit 0
fi

# Regenerate interception scenario
if [ "$1" = "generate_intercept" ] ; then
  awk '
    ( ($0 == "") || ($1 == "#") ) {
      print
      next
    }
    {
      cmd="intercept -s "$1" "$2
      cmd | getline RES
      close(cmd)
      print RES
    }
  ' interceptions.txt > interceptions.gen
  exit
fi

# Play gc scenario
./player Scenario
ret=$?
if [ $ret -ne 0 ] ; then
  exit 1
fi

# Some hp_gc tests
echo "hp_gc"
function t_hp_gc {
  if [ $# -eq 3 ] ; then
    res="`hp_gc $1 $2`"
    ret=$?
    exp="$3"
  elif [ $# -eq 4 ] ; then
    res="`hp_gc $1 $2 $3`"
    ret=$?
    exp="$4"
  elif [ $# -eq 5 ] ; then
    res="`hp_gc $1 $2 $3 $4`"
    ret=$?
    exp="$5"
  elif [ $# -eq 6 ] ; then
    res="`hp_gc $1 $2 $3 $4 $5`"
    ret=$?
    exp="$6"
  else
    error "Invalid arguments"
  fi
  if [ $ret -ne 0 ] ; then
    error "hp_gc has exited with code $ret"
  fi
  if [ "$res" != "$exp" ] ; then
    error "hp_gc $1 $2 $3 $4 $5 has returned $res instead of $exp"
  fi
  echo "hp_gc $1 $2 $3 $4 $5"
  echo " -> $res"
}

# High precision computation of great circle route
# New York -> Melbourne
t_hp_gc -c 40.786251000 -73.961418000 -37.827455000 145.045353500 \
  "H:  262.731750558, D:  9001.410427Nm 16670.612111km."
t_hp_gc -c S93HM.RVB8 AU-VIC:KJ.HX5 \
  "H:  262.731750558, D:  9001.410427Nm 16670.612111km."
# Durban <-> Perth (airports)
t_hp_gc -c ZAF:WHWW.J3X-64 AU-WA:MF.RRB-1T \
  "H:  116.555345690, D:  4255.880430Nm  7881.890557km."
t_hp_gc -c AU-WA:MF.RRB-1T ZAF:WHWW.J3X-64 \
  "H:  246.400504997, D:  4255.880430Nm  7881.890557km."

# One mapcode precision digit in each direction
t_hp_gc -c FRA:FTGC.R3T-K3 FRA:FTGC.R3T-K4 \
  "H:   89.999998869, D:     0.000134Nm     0.000247km   0.247m 247mm."
t_hp_gc -c FRA:FTGC.R3T-K3 FRA:FTGC.R3T-K2 \
  "H:  270.000001131, D:     0.000134Nm     0.000247km   0.247m 247mm."
t_hp_gc -c FRA:FTGC.R3T-K3 FRA:FTGC.R3T-DW \
  "H:  179.994818765, D:     0.000146Nm     0.000271km   0.271m 271mm."
t_hp_gc -c FRA:FTGC.R3T-K3 FRA:FTGC.R3T-K9 \
  "H:    0.000000000, D:     0.000146Nm     0.000271km   0.271m 271mm."
# Fonsorbes -> Acuncagua
t_hp_gc -c FRA:FTGC.R3T-1N 79GMS.VQFW-7R \
  "H:  234.076573125, D:  6010.080418Nm 11130.668935km."
# A short distance (some km) around New York
t_hp_gc -c 40.786251000 -73.961418000 40.686251000 -73.961418000 \
  "H:  179.999974659, D:     6.004054Nm    11.119508km."
# Comparisons
# Fonsorbes -> Acuncagua
t_hp_gc -c FRA:FTGC.R3T 79GMS.VQDX \
  "H:  234.076598617, D:  6010.085394Nm 11130.678149km."
t_hp_gc -c 43.5318 001.2354 -32.6532 -070.0108 \
  "H:  234.076573582, D:  6010.080449Nm 11130.668992km."
# New York <-> Melbourne
t_hp_gc -c 40.784758117 -73.963754417 -37.820099500 144.983584217 \
  "H:  262.772168040, D:  9003.942671Nm 16675.301827km."
t_hp_gc -c US-NJ:Y0.XJ1-KL AU-VIC:PM.N3-8N \
  "H:  262.772168040, D:  9003.942671Nm 16675.301827km."
t_hp_gc -c -37.820099500 144.983584217 40.784758117 -73.963754417 \
  "H:   71.970594843, D:  9003.942671Nm 16675.301827km."
t_hp_gc -c AU-VIC:PM.N3-8N US-NJ:Y0.XJ1-KL \
  "H:   71.970594844, D:  9003.942671Nm 16675.301827km."

# High precision computation of destination
# New York <-> Melbourne
t_hp_gc -a 40.786251000 -73.961418000 262.731751000 16671km \
  " -37.828534510  145.041153828"
t_hp_gc -a -37.827455000 145.045353500 71.968389000 16671km \
  "  40.786692409  -73.956847793"
# Durban <-> Perth (airports)
t_hp_gc -a 8L5DK.GH6X-LT 116.555346000 7881.890557km \
  "7TGTW.TWD6-2Q"
t_hp_gc -a 7TGTW.TWD6-2Q 246.400505000 7881.890557km \
  "8L5DK.GH6X-LM"

# Small step in each direction around 43.531828717 1.235420533
t_hp_gc -a FRA:FTGC.R3T-K3   0.0 1m \
  "THM1V.2TLY-SC"
t_hp_gc -a FRA:FTGC.R3T-K3  90.0 1m \
  "THM1V.2TMY-BY"
t_hp_gc -a FRA:FTGC.R3T-K3 180.0 1m \
  "THM1V.2TLY-9R"
t_hp_gc -a FRA:FTGC.R3T-K3 270.0 1m \
  "THM1V.2TLY-FX"

# Various precisions
t_hp_gc -a AU-WA:NP.D0J-7DX8Y1VS 246.400547894 7882.119197km \
  "8L5DK.GH60-K3MYWX7N"
t_hp_gc -a AU-WA:NP.D0J-7DX8Y1V  246.400547894 7882.119197km \
  "8L5DK.GH60-K3MYWX8"
t_hp_gc -a AU-WA:NP.D0J-7DX8Y1   246.400547894 7882.119197km \
  "8L5DK.GH60-K3MYWX"
t_hp_gc -a AU-WA:NP.D0J-7DX8Y    246.400547894 7882.119197km \
  "8L5DK.GH60-K3MYX"
t_hp_gc -a AU-WA:NP.D0J-7DX8     246.400547894 7882.119197km \
  "8L5DK.GH60-K3MX"
t_hp_gc -a AU-WA:NP.D0J-7DX      246.400547894 7882.119197km \
  "8L5DK.GH60-K4N"
t_hp_gc -a AU-WA:NP.D0J-7D       246.400547894 7882.119197km \
  "8L5DK.GH60-K3"
t_hp_gc -a AU-WA:NP.D0J-7        246.400547894 7882.119197km \
  "8L5DK.GH60-L"
t_hp_gc -a AU-WA:NP.D0J          246.400547894 7882.119197km \
  "8L5DK.GH60"

# Open location codes
t_hp_gc -c 8F000000+        8FP3R47X+X98 \
  "H:  309.307533427, D:   486.928182Nm   901.790992km."
t_hp_gc -c 8FM30000+        8FP3R47X+X98 \
  "H:  349.264324475, D:    80.386949Nm   148.876630km."
t_hp_gc -c 8FM3G600+        8FP3R47X+X98 \
  "H:  357.589289661, D:    77.517161Nm   143.561783km."
t_hp_gc -c 8FM3G6GP+        8FP3R47X+X98 \
  "H:  357.232845290, D:    77.464309Nm   143.463900km."
t_hp_gc -c 8FM3G6GP+P5      8FP3R47X+X98 \
  "H:  357.257217693, D:    77.428875Nm   143.398277km."
t_hp_gc -c 8FM3G6GP+P5J     8FP3R47X+X98 \
  "H:  357.258640306, D:    77.427278Nm   143.395319km."
t_hp_gc -c 8FM3G6JP+P5JQ    8FP3R47X+X98 \
  "H:  357.247594915, D:    77.127145Nm   142.839473km."
t_hp_gc -c 8FM3G6JP+P5JQ2   8FP3R47X+X98 \
  "H:  357.247691791, D:    77.127259Nm   142.839683km."
t_hp_gc -c 8FM3G6JP+P5JQ25  8FP3R47X+X98 \
  "H:  357.247669499, D:    77.127284Nm   142.839731km."
t_hp_gc -c 8FM3G6JP+P5JQ252 8FP3R47X+X98 \
  "H:  357.247675457, D:    77.127289Nm   142.839739km."

echo
echo "5s of random high precision tests"
./LoopRndHpgc &
export CPID=$!
sleep 5
kill $CPID
res=$?
if [ $res -ne 0 ] ; then
  error "Random test failed"
fi
sleep 1

# Intercept
# ---------
# Compare 2 files
function comp {
  local ok=1
  if [ $1 = "-n" ] ; then
    ok=0
    shift
  fi
  cmp $1 $2 2> /dev/null
  res=$?
  if [ $ok -eq 1 ] ; then
    if [ $res -ne 0 ] ; then
      error "File $1 differs from expected $2."
    fi
  else
    if [ $res -eq 0 ] ; then
      error "File $1 should differs from expected $2."
    fi
  fi
}


# Read field $3 of line $2 of file $1
function readarg {
res="`awk -vLINE=$2 -vFIELD=$3 '
  BEGIN {
    NL=0
  }
  (NF == 0 || $1 ~ /^#/) {
    # Skip empty lines and comment
    next
  }
  {
    # Count significant lines
    NL=NL+1
    if (NL == LINE) {
      printf "%s",$FIELD
      exit 0
    }
  } 
' $1`"
echo "$res"
}

# Get constant Intercept DME
INTER_DME=`intercept --dme | cut -d ' ' -f1`
# Manually use the second output field to set Beta DME
export BETA_DME=21
echo -n "" > experr
let L=1
while IFS=' ' read -r QFU HEADING KIND a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 ; do
  if [[ $QFU =~ ^#|^$ ]] ; then
    continue
  fi
  case "$KIND" in
    ("Final")
      KIND="Final"
      echo  "You are in final heading $QFU." > expout
    ;;
    ("Direct")
      TD1=$a4
      HD1=$a5
      TA1=$a6
      HA1=$a7
      MA2=$a8
      TA2=$a9
      HA2=$a10
    cat > expout << EOF
Direct interception
At DME $INTER_DME turn $TD1 heading $HD1 to intercept final heading $QFU.
Alternate indirect interception
At DME $INTER_DME turn $TA1 heading $HA1,
at DME $BETA_DME QDM $MA2 turn $TA2 heading $HA2 to intercept final heading $QFU.
EOF
    ;;  
    ("Indirect")
      TI1=$a4
      HI1=$a5
      MI2=$a6
      TI2=$a7
      HI2=$a8
      TA1=$a9
      HA1=$a10
      MA2=$a11
      TA2=$a12
      HA2=$a13
    cat > expout << EOF
Indirect interception
At DME $INTER_DME turn $TI1 heading $HI1,
at DME $BETA_DME QDM $MI2 turn $TI2 heading $HI2 to intercept final heading $QFU.
Alternate indirect interception
At DME $INTER_DME turn $TA1 heading $HA1,
at DME $BETA_DME QDM $MA2 turn $TA2 heading $HA2 to intercept final heading $QFU.
EOF
    ;;
    (*)
      echo "Invalid kind $KIND" 1>&2
      exit 1
    ;;
  esac
  echo -n $QFU $HEADING $KIND | awk '
    {
       printf "intercept %3d %3d %s\n", $1, $2, $3
    } '
  intercept $QFU $HEADING >out 2>err
  comp out expout
  comp err experr
  let L=$L+1
done <interceptions.txt

# Intercept debug Fpl
function debug {
  echo "intercept $*"
  intercept $* | tail -4 >out 2>err
  comp out expout
  comp err /dev/null
}


# Positive and negative lat and lon
# Innsbruck
cat <<EOF >expout
28 APP1 DRCT 8905.000000 47.723221 11.065650
28 APP2 DRCT 6905.000000 47.412667 11.808439
28 APP3 DRCT 4905.000000 47.308265 11.680265
1 ADES ADES 1905.000000 47.260277 11.343889
EOF
debug 255 155 --debug 1905.000000  47.260277  11.343889 E3

# Antananarivo
cat <<EOF >expout
28 APP1 DRCT 11198.000000 -18.299177 47.433022
28 APP2 DRCT 9198.000000 -18.659974 47.139067
28 APP3 DRCT 7198.000000 -18.760310 47.235662
1 ADES ADES 4198.000000 -18.796944 47.478889
EOF
debug 114 190 --debug 4198.000000 -18.796944  47.478889 W15

# Boston
cat <<EOF >expout
28 APP1 DRCT 7019.000000 42.572471 -70.391455
28 APP2 DRCT 5019.000000 42.015086 -71.055597
28 APP3 DRCT 3019.000000 42.143780 -71.113947
1 ADES ADES 19.000000 42.362944 -71.006389
EOF
debug 035 260 --debug   19.000000  42.362944 -71.006389 W15

# Rio de Janeiro
cat <<EOF >expout
28 APP1 DRCT 7028.000000 -22.305731 -43.275547
28 APP2 DRCT 5028.000000 -22.629873 -42.928529
28 APP3 DRCT 3028.000000 -22.740634 -43.013663
1 ADES ADES 28.000000 -22.805090 -43.256699
EOF
debug 276 200 --debug   28.000000 -22.805090 -43.256699 W22

# Done
echo ""


clean
echo "OK."

